
Application1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  08008190  08008190  00008190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800bfac  0800bfac  0000bfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c09c  0800c09c  00010070  2**0
                  CONTENTS
  4 .ARM          00000000  0800c09c  0800c09c  00010070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c09c  0800c09c  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c09c  0800c09c  0000c09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0a0  0800c0a0  0000c0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c0a4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010070  2**0
                  CONTENTS
 10 .bss          00000144  20000070  20000070  00010070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001b4  200001b4  00010070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009863  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016ff  00000000  00000000  00019903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  0001b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000698  00000000  00000000  0001b738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d99d  00000000  00000000  0001bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e67  00000000  00000000  0003976d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae755  00000000  00000000  000435d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f1d29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002394  00000000  00000000  000f1d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	; (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	; (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20000070 	.word	0x20000070
 80081ac:	00000000 	.word	0x00000000
 80081b0:	0800bf94 	.word	0x0800bf94

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	; (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	; (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	20000074 	.word	0x20000074
 80081cc:	0800bf94 	.word	0x0800bf94

080081d0 <memchr>:
 80081d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081d4:	2a10      	cmp	r2, #16
 80081d6:	db2b      	blt.n	8008230 <memchr+0x60>
 80081d8:	f010 0f07 	tst.w	r0, #7
 80081dc:	d008      	beq.n	80081f0 <memchr+0x20>
 80081de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081e2:	3a01      	subs	r2, #1
 80081e4:	428b      	cmp	r3, r1
 80081e6:	d02d      	beq.n	8008244 <memchr+0x74>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	b342      	cbz	r2, 8008240 <memchr+0x70>
 80081ee:	d1f6      	bne.n	80081de <memchr+0xe>
 80081f0:	b4f0      	push	{r4, r5, r6, r7}
 80081f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80081f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80081fa:	f022 0407 	bic.w	r4, r2, #7
 80081fe:	f07f 0700 	mvns.w	r7, #0
 8008202:	2300      	movs	r3, #0
 8008204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008208:	3c08      	subs	r4, #8
 800820a:	ea85 0501 	eor.w	r5, r5, r1
 800820e:	ea86 0601 	eor.w	r6, r6, r1
 8008212:	fa85 f547 	uadd8	r5, r5, r7
 8008216:	faa3 f587 	sel	r5, r3, r7
 800821a:	fa86 f647 	uadd8	r6, r6, r7
 800821e:	faa5 f687 	sel	r6, r5, r7
 8008222:	b98e      	cbnz	r6, 8008248 <memchr+0x78>
 8008224:	d1ee      	bne.n	8008204 <memchr+0x34>
 8008226:	bcf0      	pop	{r4, r5, r6, r7}
 8008228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800822c:	f002 0207 	and.w	r2, r2, #7
 8008230:	b132      	cbz	r2, 8008240 <memchr+0x70>
 8008232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008236:	3a01      	subs	r2, #1
 8008238:	ea83 0301 	eor.w	r3, r3, r1
 800823c:	b113      	cbz	r3, 8008244 <memchr+0x74>
 800823e:	d1f8      	bne.n	8008232 <memchr+0x62>
 8008240:	2000      	movs	r0, #0
 8008242:	4770      	bx	lr
 8008244:	3801      	subs	r0, #1
 8008246:	4770      	bx	lr
 8008248:	2d00      	cmp	r5, #0
 800824a:	bf06      	itte	eq
 800824c:	4635      	moveq	r5, r6
 800824e:	3803      	subeq	r0, #3
 8008250:	3807      	subne	r0, #7
 8008252:	f015 0f01 	tst.w	r5, #1
 8008256:	d107      	bne.n	8008268 <memchr+0x98>
 8008258:	3001      	adds	r0, #1
 800825a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800825e:	bf02      	ittt	eq
 8008260:	3001      	addeq	r0, #1
 8008262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008266:	3001      	addeq	r0, #1
 8008268:	bcf0      	pop	{r4, r5, r6, r7}
 800826a:	3801      	subs	r0, #1
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop

08008270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008274:	f000 fae6 	bl	8008844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008278:	f000 f826 	bl	80082c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800827c:	f000 f8d6 	bl	800842c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8008280:	f000 f874 	bl	800836c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8008284:	f000 f8a2 	bl	80083cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application(%d.%d)\n", APP_Version[0], APP_Version[1] );
 8008288:	2300      	movs	r3, #0
 800828a:	2201      	movs	r2, #1
 800828c:	4619      	mov	r1, r3
 800828e:	480c      	ldr	r0, [pc, #48]	; (80082c0 <main+0x50>)
 8008290:	f002 fef2 	bl	800b078 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin( GPIOE, GPIO_PIN_8, GPIO_PIN_SET );
 8008294:	2201      	movs	r2, #1
 8008296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800829a:	480a      	ldr	r0, [pc, #40]	; (80082c4 <main+0x54>)
 800829c:	f000 fdbc 	bl	8008e18 <HAL_GPIO_WritePin>
	HAL_Delay(1000);    //1 Sec delay
 80082a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082a4:	f000 fb34 	bl	8008910 <HAL_Delay>
    HAL_GPIO_WritePin( GPIOE, GPIO_PIN_8, GPIO_PIN_RESET );
 80082a8:	2200      	movs	r2, #0
 80082aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082ae:	4805      	ldr	r0, [pc, #20]	; (80082c4 <main+0x54>)
 80082b0:	f000 fdb2 	bl	8008e18 <HAL_GPIO_WritePin>
	HAL_Delay(1000);	//1 Sec delay
 80082b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082b8:	f000 fb2a 	bl	8008910 <HAL_Delay>
	HAL_GPIO_WritePin( GPIOE, GPIO_PIN_8, GPIO_PIN_SET );
 80082bc:	e7ea      	b.n	8008294 <main+0x24>
 80082be:	bf00      	nop
 80082c0:	0800bfac 	.word	0x0800bfac
 80082c4:	48001000 	.word	0x48001000

080082c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b09e      	sub	sp, #120	; 0x78
 80082cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80082ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80082d2:	2228      	movs	r2, #40	; 0x28
 80082d4:	2100      	movs	r1, #0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f002 fec6 	bl	800b068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	605a      	str	r2, [r3, #4]
 80082e6:	609a      	str	r2, [r3, #8]
 80082e8:	60da      	str	r2, [r3, #12]
 80082ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082ec:	463b      	mov	r3, r7
 80082ee:	223c      	movs	r2, #60	; 0x3c
 80082f0:	2100      	movs	r1, #0
 80082f2:	4618      	mov	r0, r3
 80082f4:	f002 feb8 	bl	800b068 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80082f8:	2302      	movs	r3, #2
 80082fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80082fc:	2301      	movs	r3, #1
 80082fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008300:	2310      	movs	r3, #16
 8008302:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008304:	2300      	movs	r3, #0
 8008306:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008308:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fd9b 	bl	8008e48 <HAL_RCC_OscConfig>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8008318:	f000 f8e6 	bl	80084e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800831c:	230f      	movs	r3, #15
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008320:	2300      	movs	r3, #0
 8008322:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008324:	2300      	movs	r3, #0
 8008326:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008328:	2300      	movs	r3, #0
 800832a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800832c:	2300      	movs	r3, #0
 800832e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008330:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008334:	2100      	movs	r1, #0
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fdc4 	bl	8009ec4 <HAL_RCC_ClockConfig>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8008342:	f000 f8d1 	bl	80084e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8008346:	2303      	movs	r3, #3
 8008348:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800834a:	2300      	movs	r3, #0
 800834c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008352:	463b      	mov	r3, r7
 8008354:	4618      	mov	r0, r3
 8008356:	f001 ffeb 	bl	800a330 <HAL_RCCEx_PeriphCLKConfig>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8008360:	f000 f8c2 	bl	80084e8 <Error_Handler>
  }
}
 8008364:	bf00      	nop
 8008366:	3778      	adds	r7, #120	; 0x78
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008370:	4b14      	ldr	r3, [pc, #80]	; (80083c4 <MX_USART1_UART_Init+0x58>)
 8008372:	4a15      	ldr	r2, [pc, #84]	; (80083c8 <MX_USART1_UART_Init+0x5c>)
 8008374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008376:	4b13      	ldr	r3, [pc, #76]	; (80083c4 <MX_USART1_UART_Init+0x58>)
 8008378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800837c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800837e:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <MX_USART1_UART_Init+0x58>)
 8008380:	2200      	movs	r2, #0
 8008382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008384:	4b0f      	ldr	r3, [pc, #60]	; (80083c4 <MX_USART1_UART_Init+0x58>)
 8008386:	2200      	movs	r2, #0
 8008388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800838a:	4b0e      	ldr	r3, [pc, #56]	; (80083c4 <MX_USART1_UART_Init+0x58>)
 800838c:	2200      	movs	r2, #0
 800838e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008390:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <MX_USART1_UART_Init+0x58>)
 8008392:	220c      	movs	r2, #12
 8008394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <MX_USART1_UART_Init+0x58>)
 8008398:	2200      	movs	r2, #0
 800839a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <MX_USART1_UART_Init+0x58>)
 800839e:	2200      	movs	r2, #0
 80083a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80083a2:	4b08      	ldr	r3, [pc, #32]	; (80083c4 <MX_USART1_UART_Init+0x58>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80083a8:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <MX_USART1_UART_Init+0x58>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80083ae:	4805      	ldr	r0, [pc, #20]	; (80083c4 <MX_USART1_UART_Init+0x58>)
 80083b0:	f002 f96e 	bl	800a690 <HAL_UART_Init>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80083ba:	f000 f895 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80083be:	bf00      	nop
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	2000008c 	.word	0x2000008c
 80083c8:	40013800 	.word	0x40013800

080083cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80083d0:	4b14      	ldr	r3, [pc, #80]	; (8008424 <MX_USART2_UART_Init+0x58>)
 80083d2:	4a15      	ldr	r2, [pc, #84]	; (8008428 <MX_USART2_UART_Init+0x5c>)
 80083d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80083d6:	4b13      	ldr	r3, [pc, #76]	; (8008424 <MX_USART2_UART_Init+0x58>)
 80083d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80083dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80083de:	4b11      	ldr	r3, [pc, #68]	; (8008424 <MX_USART2_UART_Init+0x58>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80083e4:	4b0f      	ldr	r3, [pc, #60]	; (8008424 <MX_USART2_UART_Init+0x58>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80083ea:	4b0e      	ldr	r3, [pc, #56]	; (8008424 <MX_USART2_UART_Init+0x58>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80083f0:	4b0c      	ldr	r3, [pc, #48]	; (8008424 <MX_USART2_UART_Init+0x58>)
 80083f2:	220c      	movs	r2, #12
 80083f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083f6:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <MX_USART2_UART_Init+0x58>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80083fc:	4b09      	ldr	r3, [pc, #36]	; (8008424 <MX_USART2_UART_Init+0x58>)
 80083fe:	2200      	movs	r2, #0
 8008400:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008402:	4b08      	ldr	r3, [pc, #32]	; (8008424 <MX_USART2_UART_Init+0x58>)
 8008404:	2200      	movs	r2, #0
 8008406:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008408:	4b06      	ldr	r3, [pc, #24]	; (8008424 <MX_USART2_UART_Init+0x58>)
 800840a:	2200      	movs	r2, #0
 800840c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800840e:	4805      	ldr	r0, [pc, #20]	; (8008424 <MX_USART2_UART_Init+0x58>)
 8008410:	f002 f93e 	bl	800a690 <HAL_UART_Init>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800841a:	f000 f865 	bl	80084e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800841e:	bf00      	nop
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20000114 	.word	0x20000114
 8008428:	40004400 	.word	0x40004400

0800842c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b088      	sub	sp, #32
 8008430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008432:	f107 030c 	add.w	r3, r7, #12
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	605a      	str	r2, [r3, #4]
 800843c:	609a      	str	r2, [r3, #8]
 800843e:	60da      	str	r2, [r3, #12]
 8008440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008442:	4b1e      	ldr	r3, [pc, #120]	; (80084bc <MX_GPIO_Init+0x90>)
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	4a1d      	ldr	r2, [pc, #116]	; (80084bc <MX_GPIO_Init+0x90>)
 8008448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800844c:	6153      	str	r3, [r2, #20]
 800844e:	4b1b      	ldr	r3, [pc, #108]	; (80084bc <MX_GPIO_Init+0x90>)
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008456:	60bb      	str	r3, [r7, #8]
 8008458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800845a:	4b18      	ldr	r3, [pc, #96]	; (80084bc <MX_GPIO_Init+0x90>)
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	4a17      	ldr	r2, [pc, #92]	; (80084bc <MX_GPIO_Init+0x90>)
 8008460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008464:	6153      	str	r3, [r2, #20]
 8008466:	4b15      	ldr	r3, [pc, #84]	; (80084bc <MX_GPIO_Init+0x90>)
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846e:	607b      	str	r3, [r7, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008472:	4b12      	ldr	r3, [pc, #72]	; (80084bc <MX_GPIO_Init+0x90>)
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	4a11      	ldr	r2, [pc, #68]	; (80084bc <MX_GPIO_Init+0x90>)
 8008478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800847c:	6153      	str	r3, [r2, #20]
 800847e:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <MX_GPIO_Init+0x90>)
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008486:	603b      	str	r3, [r7, #0]
 8008488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800848a:	2200      	movs	r2, #0
 800848c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008490:	480b      	ldr	r0, [pc, #44]	; (80084c0 <MX_GPIO_Init+0x94>)
 8008492:	f000 fcc1 	bl	8008e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800849a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800849c:	2301      	movs	r3, #1
 800849e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a0:	2300      	movs	r3, #0
 80084a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084a4:	2300      	movs	r3, #0
 80084a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084a8:	f107 030c 	add.w	r3, r7, #12
 80084ac:	4619      	mov	r1, r3
 80084ae:	4804      	ldr	r0, [pc, #16]	; (80084c0 <MX_GPIO_Init+0x94>)
 80084b0:	f000 fb38 	bl	8008b24 <HAL_GPIO_Init>

}
 80084b4:	bf00      	nop
 80084b6:	3720      	adds	r7, #32
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	40021000 	.word	0x40021000
 80084c0:	48001000 	.word	0x48001000

080084c4 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80084cc:	1d39      	adds	r1, r7, #4
 80084ce:	f04f 33ff 	mov.w	r3, #4294967295
 80084d2:	2201      	movs	r2, #1
 80084d4:	4803      	ldr	r0, [pc, #12]	; (80084e4 <__io_putchar+0x20>)
 80084d6:	f002 f929 	bl	800a72c <HAL_UART_Transmit>

  return ch;
 80084da:	687b      	ldr	r3, [r7, #4]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20000114 	.word	0x20000114

080084e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80084ec:	b672      	cpsid	i
}
 80084ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80084f0:	e7fe      	b.n	80084f0 <Error_Handler+0x8>
	...

080084f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084fa:	4b0f      	ldr	r3, [pc, #60]	; (8008538 <HAL_MspInit+0x44>)
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	4a0e      	ldr	r2, [pc, #56]	; (8008538 <HAL_MspInit+0x44>)
 8008500:	f043 0301 	orr.w	r3, r3, #1
 8008504:	6193      	str	r3, [r2, #24]
 8008506:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <HAL_MspInit+0x44>)
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	607b      	str	r3, [r7, #4]
 8008510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008512:	4b09      	ldr	r3, [pc, #36]	; (8008538 <HAL_MspInit+0x44>)
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	4a08      	ldr	r2, [pc, #32]	; (8008538 <HAL_MspInit+0x44>)
 8008518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800851c:	61d3      	str	r3, [r2, #28]
 800851e:	4b06      	ldr	r3, [pc, #24]	; (8008538 <HAL_MspInit+0x44>)
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	40021000 	.word	0x40021000

0800853c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08c      	sub	sp, #48	; 0x30
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008544:	f107 031c 	add.w	r3, r7, #28
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	605a      	str	r2, [r3, #4]
 800854e:	609a      	str	r2, [r3, #8]
 8008550:	60da      	str	r2, [r3, #12]
 8008552:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a2f      	ldr	r2, [pc, #188]	; (8008618 <HAL_UART_MspInit+0xdc>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d12a      	bne.n	80085b4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800855e:	4b2f      	ldr	r3, [pc, #188]	; (800861c <HAL_UART_MspInit+0xe0>)
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	4a2e      	ldr	r2, [pc, #184]	; (800861c <HAL_UART_MspInit+0xe0>)
 8008564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008568:	6193      	str	r3, [r2, #24]
 800856a:	4b2c      	ldr	r3, [pc, #176]	; (800861c <HAL_UART_MspInit+0xe0>)
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008572:	61bb      	str	r3, [r7, #24]
 8008574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008576:	4b29      	ldr	r3, [pc, #164]	; (800861c <HAL_UART_MspInit+0xe0>)
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	4a28      	ldr	r2, [pc, #160]	; (800861c <HAL_UART_MspInit+0xe0>)
 800857c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008580:	6153      	str	r3, [r2, #20]
 8008582:	4b26      	ldr	r3, [pc, #152]	; (800861c <HAL_UART_MspInit+0xe0>)
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800858e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008594:	2302      	movs	r3, #2
 8008596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008598:	2300      	movs	r3, #0
 800859a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800859c:	2303      	movs	r3, #3
 800859e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80085a0:	2307      	movs	r3, #7
 80085a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085a4:	f107 031c 	add.w	r3, r7, #28
 80085a8:	4619      	mov	r1, r3
 80085aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085ae:	f000 fab9 	bl	8008b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80085b2:	e02c      	b.n	800860e <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a19      	ldr	r2, [pc, #100]	; (8008620 <HAL_UART_MspInit+0xe4>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d127      	bne.n	800860e <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80085be:	4b17      	ldr	r3, [pc, #92]	; (800861c <HAL_UART_MspInit+0xe0>)
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	4a16      	ldr	r2, [pc, #88]	; (800861c <HAL_UART_MspInit+0xe0>)
 80085c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085c8:	61d3      	str	r3, [r2, #28]
 80085ca:	4b14      	ldr	r3, [pc, #80]	; (800861c <HAL_UART_MspInit+0xe0>)
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d2:	613b      	str	r3, [r7, #16]
 80085d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80085d6:	4b11      	ldr	r3, [pc, #68]	; (800861c <HAL_UART_MspInit+0xe0>)
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	4a10      	ldr	r2, [pc, #64]	; (800861c <HAL_UART_MspInit+0xe0>)
 80085dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085e0:	6153      	str	r3, [r2, #20]
 80085e2:	4b0e      	ldr	r3, [pc, #56]	; (800861c <HAL_UART_MspInit+0xe0>)
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80085ee:	2360      	movs	r3, #96	; 0x60
 80085f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f2:	2302      	movs	r3, #2
 80085f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085fa:	2303      	movs	r3, #3
 80085fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80085fe:	2307      	movs	r3, #7
 8008600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008602:	f107 031c 	add.w	r3, r7, #28
 8008606:	4619      	mov	r1, r3
 8008608:	4806      	ldr	r0, [pc, #24]	; (8008624 <HAL_UART_MspInit+0xe8>)
 800860a:	f000 fa8b 	bl	8008b24 <HAL_GPIO_Init>
}
 800860e:	bf00      	nop
 8008610:	3730      	adds	r7, #48	; 0x30
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	40013800 	.word	0x40013800
 800861c:	40021000 	.word	0x40021000
 8008620:	40004400 	.word	0x40004400
 8008624:	48000c00 	.word	0x48000c00

08008628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800862c:	e7fe      	b.n	800862c <NMI_Handler+0x4>

0800862e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800862e:	b480      	push	{r7}
 8008630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008632:	e7fe      	b.n	8008632 <HardFault_Handler+0x4>

08008634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008638:	e7fe      	b.n	8008638 <MemManage_Handler+0x4>

0800863a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800863a:	b480      	push	{r7}
 800863c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800863e:	e7fe      	b.n	800863e <BusFault_Handler+0x4>

08008640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008644:	e7fe      	b.n	8008644 <UsageFault_Handler+0x4>

08008646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008646:	b480      	push	{r7}
 8008648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800864a:	bf00      	nop
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008658:	bf00      	nop
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008662:	b480      	push	{r7}
 8008664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008666:	bf00      	nop
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008674:	f000 f92c 	bl	80088d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008678:	bf00      	nop
 800867a:	bd80      	pop	{r7, pc}

0800867c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008688:	2300      	movs	r3, #0
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	e00a      	b.n	80086a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800868e:	f3af 8000 	nop.w
 8008692:	4601      	mov	r1, r0
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	60ba      	str	r2, [r7, #8]
 800869a:	b2ca      	uxtb	r2, r1
 800869c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	3301      	adds	r3, #1
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	dbf0      	blt.n	800868e <_read+0x12>
  }

  return len;
 80086ac:	687b      	ldr	r3, [r7, #4]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b086      	sub	sp, #24
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086c2:	2300      	movs	r3, #0
 80086c4:	617b      	str	r3, [r7, #20]
 80086c6:	e009      	b.n	80086dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	60ba      	str	r2, [r7, #8]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7ff fef7 	bl	80084c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	3301      	adds	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	dbf1      	blt.n	80086c8 <_write+0x12>
  }
  return len;
 80086e4:	687b      	ldr	r3, [r7, #4]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <_close>:

int _close(int file)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80086f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008706:	b480      	push	{r7}
 8008708:	b083      	sub	sp, #12
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008716:	605a      	str	r2, [r3, #4]
  return 0;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <_isatty>:

int _isatty(int file)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800872e:	2301      	movs	r3, #1
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
	...

08008758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008760:	4a14      	ldr	r2, [pc, #80]	; (80087b4 <_sbrk+0x5c>)
 8008762:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <_sbrk+0x60>)
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800876c:	4b13      	ldr	r3, [pc, #76]	; (80087bc <_sbrk+0x64>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008774:	4b11      	ldr	r3, [pc, #68]	; (80087bc <_sbrk+0x64>)
 8008776:	4a12      	ldr	r2, [pc, #72]	; (80087c0 <_sbrk+0x68>)
 8008778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800877a:	4b10      	ldr	r3, [pc, #64]	; (80087bc <_sbrk+0x64>)
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4413      	add	r3, r2
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	429a      	cmp	r2, r3
 8008786:	d207      	bcs.n	8008798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008788:	f002 fc44 	bl	800b014 <__errno>
 800878c:	4603      	mov	r3, r0
 800878e:	220c      	movs	r2, #12
 8008790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008792:	f04f 33ff 	mov.w	r3, #4294967295
 8008796:	e009      	b.n	80087ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008798:	4b08      	ldr	r3, [pc, #32]	; (80087bc <_sbrk+0x64>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800879e:	4b07      	ldr	r3, [pc, #28]	; (80087bc <_sbrk+0x64>)
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	4a05      	ldr	r2, [pc, #20]	; (80087bc <_sbrk+0x64>)
 80087a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80087aa:	68fb      	ldr	r3, [r7, #12]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	2000a000 	.word	0x2000a000
 80087b8:	00000400 	.word	0x00000400
 80087bc:	2000019c 	.word	0x2000019c
 80087c0:	200001b8 	.word	0x200001b8

080087c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80087c4:	b480      	push	{r7}
 80087c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80087c8:	4b07      	ldr	r3, [pc, #28]	; (80087e8 <SystemInit+0x24>)
 80087ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ce:	4a06      	ldr	r2, [pc, #24]	; (80087e8 <SystemInit+0x24>)
 80087d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80087d8:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <SystemInit+0x24>)
 80087da:	4a04      	ldr	r2, [pc, #16]	; (80087ec <SystemInit+0x28>)
 80087dc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80087de:	bf00      	nop
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	e000ed00 	.word	0xe000ed00
 80087ec:	08008000 	.word	0x08008000

080087f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80087f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008828 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80087f4:	f7ff ffe6 	bl	80087c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80087f8:	480c      	ldr	r0, [pc, #48]	; (800882c <LoopForever+0x6>)
  ldr r1, =_edata
 80087fa:	490d      	ldr	r1, [pc, #52]	; (8008830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80087fc:	4a0d      	ldr	r2, [pc, #52]	; (8008834 <LoopForever+0xe>)
  movs r3, #0
 80087fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008800:	e002      	b.n	8008808 <LoopCopyDataInit>

08008802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008806:	3304      	adds	r3, #4

08008808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800880a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800880c:	d3f9      	bcc.n	8008802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800880e:	4a0a      	ldr	r2, [pc, #40]	; (8008838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008810:	4c0a      	ldr	r4, [pc, #40]	; (800883c <LoopForever+0x16>)
  movs r3, #0
 8008812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008814:	e001      	b.n	800881a <LoopFillZerobss>

08008816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008818:	3204      	adds	r2, #4

0800881a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800881a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800881c:	d3fb      	bcc.n	8008816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800881e:	f002 fbff 	bl	800b020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008822:	f7ff fd25 	bl	8008270 <main>

08008826 <LoopForever>:

LoopForever:
    b LoopForever
 8008826:	e7fe      	b.n	8008826 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008828:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800882c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008830:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8008834:	0800c0a4 	.word	0x0800c0a4
  ldr r2, =_sbss
 8008838:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800883c:	200001b4 	.word	0x200001b4

08008840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008840:	e7fe      	b.n	8008840 <ADC1_2_IRQHandler>
	...

08008844 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008848:	4b08      	ldr	r3, [pc, #32]	; (800886c <HAL_Init+0x28>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a07      	ldr	r2, [pc, #28]	; (800886c <HAL_Init+0x28>)
 800884e:	f043 0310 	orr.w	r3, r3, #16
 8008852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008854:	2003      	movs	r0, #3
 8008856:	f000 f931 	bl	8008abc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800885a:	200f      	movs	r0, #15
 800885c:	f000 f808 	bl	8008870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008860:	f7ff fe48 	bl	80084f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	40022000 	.word	0x40022000

08008870 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008878:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <HAL_InitTick+0x54>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	4b12      	ldr	r3, [pc, #72]	; (80088c8 <HAL_InitTick+0x58>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	4619      	mov	r1, r3
 8008882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008886:	fbb3 f3f1 	udiv	r3, r3, r1
 800888a:	fbb2 f3f3 	udiv	r3, r2, r3
 800888e:	4618      	mov	r0, r3
 8008890:	f000 f93b 	bl	8008b0a <HAL_SYSTICK_Config>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e00e      	b.n	80088bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b0f      	cmp	r3, #15
 80088a2:	d80a      	bhi.n	80088ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80088a4:	2200      	movs	r2, #0
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	f000 f911 	bl	8008ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80088b0:	4a06      	ldr	r2, [pc, #24]	; (80088cc <HAL_InitTick+0x5c>)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	e000      	b.n	80088bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20000000 	.word	0x20000000
 80088c8:	20000008 	.word	0x20000008
 80088cc:	20000004 	.word	0x20000004

080088d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088d0:	b480      	push	{r7}
 80088d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80088d4:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <HAL_IncTick+0x20>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	461a      	mov	r2, r3
 80088da:	4b06      	ldr	r3, [pc, #24]	; (80088f4 <HAL_IncTick+0x24>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4413      	add	r3, r2
 80088e0:	4a04      	ldr	r2, [pc, #16]	; (80088f4 <HAL_IncTick+0x24>)
 80088e2:	6013      	str	r3, [r2, #0]
}
 80088e4:	bf00      	nop
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	20000008 	.word	0x20000008
 80088f4:	200001a0 	.word	0x200001a0

080088f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80088fc:	4b03      	ldr	r3, [pc, #12]	; (800890c <HAL_GetTick+0x14>)
 80088fe:	681b      	ldr	r3, [r3, #0]
}
 8008900:	4618      	mov	r0, r3
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	200001a0 	.word	0x200001a0

08008910 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008918:	f7ff ffee 	bl	80088f8 <HAL_GetTick>
 800891c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d005      	beq.n	8008936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800892a:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <HAL_Delay+0x44>)
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4413      	add	r3, r2
 8008934:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8008936:	bf00      	nop
 8008938:	f7ff ffde 	bl	80088f8 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	429a      	cmp	r2, r3
 8008946:	d8f7      	bhi.n	8008938 <HAL_Delay+0x28>
  {
  }
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20000008 	.word	0x20000008

08008958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f003 0307 	and.w	r3, r3, #7
 8008966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008968:	4b0c      	ldr	r3, [pc, #48]	; (800899c <__NVIC_SetPriorityGrouping+0x44>)
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008974:	4013      	ands	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800898a:	4a04      	ldr	r2, [pc, #16]	; (800899c <__NVIC_SetPriorityGrouping+0x44>)
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	60d3      	str	r3, [r2, #12]
}
 8008990:	bf00      	nop
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	e000ed00 	.word	0xe000ed00

080089a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80089a0:	b480      	push	{r7}
 80089a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089a4:	4b04      	ldr	r3, [pc, #16]	; (80089b8 <__NVIC_GetPriorityGrouping+0x18>)
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	0a1b      	lsrs	r3, r3, #8
 80089aa:	f003 0307 	and.w	r3, r3, #7
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	e000ed00 	.word	0xe000ed00

080089bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	6039      	str	r1, [r7, #0]
 80089c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	db0a      	blt.n	80089e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	490c      	ldr	r1, [pc, #48]	; (8008a08 <__NVIC_SetPriority+0x4c>)
 80089d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089da:	0112      	lsls	r2, r2, #4
 80089dc:	b2d2      	uxtb	r2, r2
 80089de:	440b      	add	r3, r1
 80089e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80089e4:	e00a      	b.n	80089fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	4908      	ldr	r1, [pc, #32]	; (8008a0c <__NVIC_SetPriority+0x50>)
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	f003 030f 	and.w	r3, r3, #15
 80089f2:	3b04      	subs	r3, #4
 80089f4:	0112      	lsls	r2, r2, #4
 80089f6:	b2d2      	uxtb	r2, r2
 80089f8:	440b      	add	r3, r1
 80089fa:	761a      	strb	r2, [r3, #24]
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	e000e100 	.word	0xe000e100
 8008a0c:	e000ed00 	.word	0xe000ed00

08008a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b089      	sub	sp, #36	; 0x24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	f1c3 0307 	rsb	r3, r3, #7
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	bf28      	it	cs
 8008a2e:	2304      	movcs	r3, #4
 8008a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	3304      	adds	r3, #4
 8008a36:	2b06      	cmp	r3, #6
 8008a38:	d902      	bls.n	8008a40 <NVIC_EncodePriority+0x30>
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	3b03      	subs	r3, #3
 8008a3e:	e000      	b.n	8008a42 <NVIC_EncodePriority+0x32>
 8008a40:	2300      	movs	r3, #0
 8008a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a44:	f04f 32ff 	mov.w	r2, #4294967295
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4e:	43da      	mvns	r2, r3
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	401a      	ands	r2, r3
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a58:	f04f 31ff 	mov.w	r1, #4294967295
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a62:	43d9      	mvns	r1, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a68:	4313      	orrs	r3, r2
         );
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3724      	adds	r7, #36	; 0x24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
	...

08008a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a88:	d301      	bcc.n	8008a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e00f      	b.n	8008aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a8e:	4a0a      	ldr	r2, [pc, #40]	; (8008ab8 <SysTick_Config+0x40>)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a96:	210f      	movs	r1, #15
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9c:	f7ff ff8e 	bl	80089bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008aa0:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <SysTick_Config+0x40>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008aa6:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <SysTick_Config+0x40>)
 8008aa8:	2207      	movs	r2, #7
 8008aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	e000e010 	.word	0xe000e010

08008abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff ff47 	bl	8008958 <__NVIC_SetPriorityGrouping>
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b086      	sub	sp, #24
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	4603      	mov	r3, r0
 8008ada:	60b9      	str	r1, [r7, #8]
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ae4:	f7ff ff5c 	bl	80089a0 <__NVIC_GetPriorityGrouping>
 8008ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	6978      	ldr	r0, [r7, #20]
 8008af0:	f7ff ff8e 	bl	8008a10 <NVIC_EncodePriority>
 8008af4:	4602      	mov	r2, r0
 8008af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008afa:	4611      	mov	r1, r2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff ff5d 	bl	80089bc <__NVIC_SetPriority>
}
 8008b02:	bf00      	nop
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff ffb0 	bl	8008a78 <SysTick_Config>
 8008b18:	4603      	mov	r3, r0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b32:	e154      	b.n	8008dde <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	2101      	movs	r1, #1
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b40:	4013      	ands	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 8146 	beq.w	8008dd8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f003 0303 	and.w	r3, r3, #3
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d005      	beq.n	8008b64 <HAL_GPIO_Init+0x40>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f003 0303 	and.w	r3, r3, #3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d130      	bne.n	8008bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	2203      	movs	r2, #3
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	43db      	mvns	r3, r3
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba2:	43db      	mvns	r3, r3
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	091b      	lsrs	r3, r3, #4
 8008bb0:	f003 0201 	and.w	r2, r3, #1
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d017      	beq.n	8008c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	005b      	lsls	r3, r3, #1
 8008bdc:	2203      	movs	r2, #3
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	43db      	mvns	r3, r3
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4013      	ands	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d123      	bne.n	8008c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	08da      	lsrs	r2, r3, #3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	3208      	adds	r2, #8
 8008c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	220f      	movs	r2, #15
 8008c26:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2a:	43db      	mvns	r3, r3
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	691a      	ldr	r2, [r3, #16]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	08da      	lsrs	r2, r3, #3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3208      	adds	r2, #8
 8008c50:	6939      	ldr	r1, [r7, #16]
 8008c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	2203      	movs	r2, #3
 8008c62:	fa02 f303 	lsl.w	r3, r2, r3
 8008c66:	43db      	mvns	r3, r3
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f003 0203 	and.w	r2, r3, #3
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 80a0 	beq.w	8008dd8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c98:	4b58      	ldr	r3, [pc, #352]	; (8008dfc <HAL_GPIO_Init+0x2d8>)
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	4a57      	ldr	r2, [pc, #348]	; (8008dfc <HAL_GPIO_Init+0x2d8>)
 8008c9e:	f043 0301 	orr.w	r3, r3, #1
 8008ca2:	6193      	str	r3, [r2, #24]
 8008ca4:	4b55      	ldr	r3, [pc, #340]	; (8008dfc <HAL_GPIO_Init+0x2d8>)
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	60bb      	str	r3, [r7, #8]
 8008cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008cb0:	4a53      	ldr	r2, [pc, #332]	; (8008e00 <HAL_GPIO_Init+0x2dc>)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	089b      	lsrs	r3, r3, #2
 8008cb6:	3302      	adds	r3, #2
 8008cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	220f      	movs	r2, #15
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	43db      	mvns	r3, r3
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008cda:	d019      	beq.n	8008d10 <HAL_GPIO_Init+0x1ec>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a49      	ldr	r2, [pc, #292]	; (8008e04 <HAL_GPIO_Init+0x2e0>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d013      	beq.n	8008d0c <HAL_GPIO_Init+0x1e8>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a48      	ldr	r2, [pc, #288]	; (8008e08 <HAL_GPIO_Init+0x2e4>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00d      	beq.n	8008d08 <HAL_GPIO_Init+0x1e4>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a47      	ldr	r2, [pc, #284]	; (8008e0c <HAL_GPIO_Init+0x2e8>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d007      	beq.n	8008d04 <HAL_GPIO_Init+0x1e0>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a46      	ldr	r2, [pc, #280]	; (8008e10 <HAL_GPIO_Init+0x2ec>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d101      	bne.n	8008d00 <HAL_GPIO_Init+0x1dc>
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	e008      	b.n	8008d12 <HAL_GPIO_Init+0x1ee>
 8008d00:	2305      	movs	r3, #5
 8008d02:	e006      	b.n	8008d12 <HAL_GPIO_Init+0x1ee>
 8008d04:	2303      	movs	r3, #3
 8008d06:	e004      	b.n	8008d12 <HAL_GPIO_Init+0x1ee>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e002      	b.n	8008d12 <HAL_GPIO_Init+0x1ee>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e000      	b.n	8008d12 <HAL_GPIO_Init+0x1ee>
 8008d10:	2300      	movs	r3, #0
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	f002 0203 	and.w	r2, r2, #3
 8008d18:	0092      	lsls	r2, r2, #2
 8008d1a:	4093      	lsls	r3, r2
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008d22:	4937      	ldr	r1, [pc, #220]	; (8008e00 <HAL_GPIO_Init+0x2dc>)
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	089b      	lsrs	r3, r3, #2
 8008d28:	3302      	adds	r3, #2
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d30:	4b38      	ldr	r3, [pc, #224]	; (8008e14 <HAL_GPIO_Init+0x2f0>)
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	43db      	mvns	r3, r3
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008d54:	4a2f      	ldr	r2, [pc, #188]	; (8008e14 <HAL_GPIO_Init+0x2f0>)
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008d5a:	4b2e      	ldr	r3, [pc, #184]	; (8008e14 <HAL_GPIO_Init+0x2f0>)
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	43db      	mvns	r3, r3
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	4013      	ands	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008d7e:	4a25      	ldr	r2, [pc, #148]	; (8008e14 <HAL_GPIO_Init+0x2f0>)
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008d84:	4b23      	ldr	r3, [pc, #140]	; (8008e14 <HAL_GPIO_Init+0x2f0>)
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	43db      	mvns	r3, r3
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	4013      	ands	r3, r2
 8008d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008da8:	4a1a      	ldr	r2, [pc, #104]	; (8008e14 <HAL_GPIO_Init+0x2f0>)
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008dae:	4b19      	ldr	r3, [pc, #100]	; (8008e14 <HAL_GPIO_Init+0x2f0>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	43db      	mvns	r3, r3
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4013      	ands	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008dd2:	4a10      	ldr	r2, [pc, #64]	; (8008e14 <HAL_GPIO_Init+0x2f0>)
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	fa22 f303 	lsr.w	r3, r2, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f47f aea3 	bne.w	8008b34 <HAL_GPIO_Init+0x10>
  }
}
 8008dee:	bf00      	nop
 8008df0:	bf00      	nop
 8008df2:	371c      	adds	r7, #28
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	40021000 	.word	0x40021000
 8008e00:	40010000 	.word	0x40010000
 8008e04:	48000400 	.word	0x48000400
 8008e08:	48000800 	.word	0x48000800
 8008e0c:	48000c00 	.word	0x48000c00
 8008e10:	48001000 	.word	0x48001000
 8008e14:	40010400 	.word	0x40010400

08008e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	807b      	strh	r3, [r7, #2]
 8008e24:	4613      	mov	r3, r2
 8008e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e28:	787b      	ldrb	r3, [r7, #1]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e2e:	887a      	ldrh	r2, [r7, #2]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008e34:	e002      	b.n	8008e3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e36:	887a      	ldrh	r2, [r7, #2]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f001 b823 	b.w	8009eb4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 817d 	beq.w	800917e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008e84:	4bbc      	ldr	r3, [pc, #752]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f003 030c 	and.w	r3, r3, #12
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d00c      	beq.n	8008eaa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008e90:	4bb9      	ldr	r3, [pc, #740]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f003 030c 	and.w	r3, r3, #12
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d15c      	bne.n	8008f56 <HAL_RCC_OscConfig+0x10e>
 8008e9c:	4bb6      	ldr	r3, [pc, #728]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ea8:	d155      	bne.n	8008f56 <HAL_RCC_OscConfig+0x10e>
 8008eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008eae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eb2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8008eb6:	fa93 f3a3 	rbit	r3, r3
 8008eba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008ebe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ec2:	fab3 f383 	clz	r3, r3
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	095b      	lsrs	r3, r3, #5
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	f043 0301 	orr.w	r3, r3, #1
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d102      	bne.n	8008edc <HAL_RCC_OscConfig+0x94>
 8008ed6:	4ba8      	ldr	r3, [pc, #672]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	e015      	b.n	8008f08 <HAL_RCC_OscConfig+0xc0>
 8008edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ee0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ee4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8008ee8:	fa93 f3a3 	rbit	r3, r3
 8008eec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ef4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008ef8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8008efc:	fa93 f3a3 	rbit	r3, r3
 8008f00:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8008f04:	4b9c      	ldr	r3, [pc, #624]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008f0c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8008f10:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008f14:	fa92 f2a2 	rbit	r2, r2
 8008f18:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8008f1c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8008f20:	fab2 f282 	clz	r2, r2
 8008f24:	b2d2      	uxtb	r2, r2
 8008f26:	f042 0220 	orr.w	r2, r2, #32
 8008f2a:	b2d2      	uxtb	r2, r2
 8008f2c:	f002 021f 	and.w	r2, r2, #31
 8008f30:	2101      	movs	r1, #1
 8008f32:	fa01 f202 	lsl.w	r2, r1, r2
 8008f36:	4013      	ands	r3, r2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 811f 	beq.w	800917c <HAL_RCC_OscConfig+0x334>
 8008f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f040 8116 	bne.w	800917c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	f000 bfaf 	b.w	8009eb4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f66:	d106      	bne.n	8008f76 <HAL_RCC_OscConfig+0x12e>
 8008f68:	4b83      	ldr	r3, [pc, #524]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a82      	ldr	r2, [pc, #520]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	e036      	b.n	8008fe4 <HAL_RCC_OscConfig+0x19c>
 8008f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10c      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x158>
 8008f86:	4b7c      	ldr	r3, [pc, #496]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a7b      	ldr	r2, [pc, #492]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f90:	6013      	str	r3, [r2, #0]
 8008f92:	4b79      	ldr	r3, [pc, #484]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a78      	ldr	r2, [pc, #480]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	e021      	b.n	8008fe4 <HAL_RCC_OscConfig+0x19c>
 8008fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008fa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fb0:	d10c      	bne.n	8008fcc <HAL_RCC_OscConfig+0x184>
 8008fb2:	4b71      	ldr	r3, [pc, #452]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a70      	ldr	r2, [pc, #448]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fbc:	6013      	str	r3, [r2, #0]
 8008fbe:	4b6e      	ldr	r3, [pc, #440]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a6d      	ldr	r2, [pc, #436]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	e00b      	b.n	8008fe4 <HAL_RCC_OscConfig+0x19c>
 8008fcc:	4b6a      	ldr	r3, [pc, #424]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a69      	ldr	r2, [pc, #420]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fd6:	6013      	str	r3, [r2, #0]
 8008fd8:	4b67      	ldr	r3, [pc, #412]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a66      	ldr	r2, [pc, #408]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fe2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008fe4:	4b64      	ldr	r3, [pc, #400]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	f023 020f 	bic.w	r2, r3, #15
 8008fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	495f      	ldr	r1, [pc, #380]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d059      	beq.n	80090c2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800900e:	f7ff fc73 	bl	80088f8 <HAL_GetTick>
 8009012:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009016:	e00a      	b.n	800902e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009018:	f7ff fc6e 	bl	80088f8 <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	2b64      	cmp	r3, #100	; 0x64
 8009026:	d902      	bls.n	800902e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	f000 bf43 	b.w	8009eb4 <HAL_RCC_OscConfig+0x106c>
 800902e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009032:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009036:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800903a:	fa93 f3a3 	rbit	r3, r3
 800903e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8009042:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009046:	fab3 f383 	clz	r3, r3
 800904a:	b2db      	uxtb	r3, r3
 800904c:	095b      	lsrs	r3, r3, #5
 800904e:	b2db      	uxtb	r3, r3
 8009050:	f043 0301 	orr.w	r3, r3, #1
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b01      	cmp	r3, #1
 8009058:	d102      	bne.n	8009060 <HAL_RCC_OscConfig+0x218>
 800905a:	4b47      	ldr	r3, [pc, #284]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	e015      	b.n	800908c <HAL_RCC_OscConfig+0x244>
 8009060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009064:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009068:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800906c:	fa93 f3a3 	rbit	r3, r3
 8009070:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8009074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009078:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800907c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009080:	fa93 f3a3 	rbit	r3, r3
 8009084:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8009088:	4b3b      	ldr	r3, [pc, #236]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009090:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8009094:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8009098:	fa92 f2a2 	rbit	r2, r2
 800909c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80090a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80090a4:	fab2 f282 	clz	r2, r2
 80090a8:	b2d2      	uxtb	r2, r2
 80090aa:	f042 0220 	orr.w	r2, r2, #32
 80090ae:	b2d2      	uxtb	r2, r2
 80090b0:	f002 021f 	and.w	r2, r2, #31
 80090b4:	2101      	movs	r1, #1
 80090b6:	fa01 f202 	lsl.w	r2, r1, r2
 80090ba:	4013      	ands	r3, r2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0ab      	beq.n	8009018 <HAL_RCC_OscConfig+0x1d0>
 80090c0:	e05d      	b.n	800917e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090c2:	f7ff fc19 	bl	80088f8 <HAL_GetTick>
 80090c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090ca:	e00a      	b.n	80090e2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090cc:	f7ff fc14 	bl	80088f8 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b64      	cmp	r3, #100	; 0x64
 80090da:	d902      	bls.n	80090e2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	f000 bee9 	b.w	8009eb4 <HAL_RCC_OscConfig+0x106c>
 80090e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090e6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80090ee:	fa93 f3a3 	rbit	r3, r3
 80090f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80090f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090fa:	fab3 f383 	clz	r3, r3
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	095b      	lsrs	r3, r3, #5
 8009102:	b2db      	uxtb	r3, r3
 8009104:	f043 0301 	orr.w	r3, r3, #1
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b01      	cmp	r3, #1
 800910c:	d102      	bne.n	8009114 <HAL_RCC_OscConfig+0x2cc>
 800910e:	4b1a      	ldr	r3, [pc, #104]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	e015      	b.n	8009140 <HAL_RCC_OscConfig+0x2f8>
 8009114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009118:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800911c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8009120:	fa93 f3a3 	rbit	r3, r3
 8009124:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8009128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800912c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009130:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009134:	fa93 f3a3 	rbit	r3, r3
 8009138:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800913c:	4b0e      	ldr	r3, [pc, #56]	; (8009178 <HAL_RCC_OscConfig+0x330>)
 800913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009140:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009144:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8009148:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800914c:	fa92 f2a2 	rbit	r2, r2
 8009150:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8009154:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009158:	fab2 f282 	clz	r2, r2
 800915c:	b2d2      	uxtb	r2, r2
 800915e:	f042 0220 	orr.w	r2, r2, #32
 8009162:	b2d2      	uxtb	r2, r2
 8009164:	f002 021f 	and.w	r2, r2, #31
 8009168:	2101      	movs	r1, #1
 800916a:	fa01 f202 	lsl.w	r2, r1, r2
 800916e:	4013      	ands	r3, r2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1ab      	bne.n	80090cc <HAL_RCC_OscConfig+0x284>
 8009174:	e003      	b.n	800917e <HAL_RCC_OscConfig+0x336>
 8009176:	bf00      	nop
 8009178:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800917c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800917e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 817d 	beq.w	800948e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8009194:	4ba6      	ldr	r3, [pc, #664]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f003 030c 	and.w	r3, r3, #12
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00b      	beq.n	80091b8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80091a0:	4ba3      	ldr	r3, [pc, #652]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f003 030c 	and.w	r3, r3, #12
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d172      	bne.n	8009292 <HAL_RCC_OscConfig+0x44a>
 80091ac:	4ba0      	ldr	r3, [pc, #640]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d16c      	bne.n	8009292 <HAL_RCC_OscConfig+0x44a>
 80091b8:	2302      	movs	r3, #2
 80091ba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091be:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80091c2:	fa93 f3a3 	rbit	r3, r3
 80091c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80091ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091ce:	fab3 f383 	clz	r3, r3
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	095b      	lsrs	r3, r3, #5
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	f043 0301 	orr.w	r3, r3, #1
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d102      	bne.n	80091e8 <HAL_RCC_OscConfig+0x3a0>
 80091e2:	4b93      	ldr	r3, [pc, #588]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	e013      	b.n	8009210 <HAL_RCC_OscConfig+0x3c8>
 80091e8:	2302      	movs	r3, #2
 80091ea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80091f2:	fa93 f3a3 	rbit	r3, r3
 80091f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80091fa:	2302      	movs	r3, #2
 80091fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8009200:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009204:	fa93 f3a3 	rbit	r3, r3
 8009208:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800920c:	4b88      	ldr	r3, [pc, #544]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	2202      	movs	r2, #2
 8009212:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8009216:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800921a:	fa92 f2a2 	rbit	r2, r2
 800921e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8009222:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8009226:	fab2 f282 	clz	r2, r2
 800922a:	b2d2      	uxtb	r2, r2
 800922c:	f042 0220 	orr.w	r2, r2, #32
 8009230:	b2d2      	uxtb	r2, r2
 8009232:	f002 021f 	and.w	r2, r2, #31
 8009236:	2101      	movs	r1, #1
 8009238:	fa01 f202 	lsl.w	r2, r1, r2
 800923c:	4013      	ands	r3, r2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00a      	beq.n	8009258 <HAL_RCC_OscConfig+0x410>
 8009242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d002      	beq.n	8009258 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	f000 be2e 	b.w	8009eb4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009258:	4b75      	ldr	r3, [pc, #468]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009264:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	21f8      	movs	r1, #248	; 0xf8
 800926e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009272:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8009276:	fa91 f1a1 	rbit	r1, r1
 800927a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800927e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8009282:	fab1 f181 	clz	r1, r1
 8009286:	b2c9      	uxtb	r1, r1
 8009288:	408b      	lsls	r3, r1
 800928a:	4969      	ldr	r1, [pc, #420]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 800928c:	4313      	orrs	r3, r2
 800928e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009290:	e0fd      	b.n	800948e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 8088 	beq.w	80093b4 <HAL_RCC_OscConfig+0x56c>
 80092a4:	2301      	movs	r3, #1
 80092a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80092ae:	fa93 f3a3 	rbit	r3, r3
 80092b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80092b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092ba:	fab3 f383 	clz	r3, r3
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80092c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	461a      	mov	r2, r3
 80092cc:	2301      	movs	r3, #1
 80092ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092d0:	f7ff fb12 	bl	80088f8 <HAL_GetTick>
 80092d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092d8:	e00a      	b.n	80092f0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092da:	f7ff fb0d 	bl	80088f8 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d902      	bls.n	80092f0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	f000 bde2 	b.w	8009eb4 <HAL_RCC_OscConfig+0x106c>
 80092f0:	2302      	movs	r3, #2
 80092f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80092fa:	fa93 f3a3 	rbit	r3, r3
 80092fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8009302:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009306:	fab3 f383 	clz	r3, r3
 800930a:	b2db      	uxtb	r3, r3
 800930c:	095b      	lsrs	r3, r3, #5
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f043 0301 	orr.w	r3, r3, #1
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b01      	cmp	r3, #1
 8009318:	d102      	bne.n	8009320 <HAL_RCC_OscConfig+0x4d8>
 800931a:	4b45      	ldr	r3, [pc, #276]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	e013      	b.n	8009348 <HAL_RCC_OscConfig+0x500>
 8009320:	2302      	movs	r3, #2
 8009322:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009326:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800932a:	fa93 f3a3 	rbit	r3, r3
 800932e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8009332:	2302      	movs	r3, #2
 8009334:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009338:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800933c:	fa93 f3a3 	rbit	r3, r3
 8009340:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8009344:	4b3a      	ldr	r3, [pc, #232]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2202      	movs	r2, #2
 800934a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800934e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009352:	fa92 f2a2 	rbit	r2, r2
 8009356:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800935a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800935e:	fab2 f282 	clz	r2, r2
 8009362:	b2d2      	uxtb	r2, r2
 8009364:	f042 0220 	orr.w	r2, r2, #32
 8009368:	b2d2      	uxtb	r2, r2
 800936a:	f002 021f 	and.w	r2, r2, #31
 800936e:	2101      	movs	r1, #1
 8009370:	fa01 f202 	lsl.w	r2, r1, r2
 8009374:	4013      	ands	r3, r2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0af      	beq.n	80092da <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800937a:	4b2d      	ldr	r3, [pc, #180]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	21f8      	movs	r1, #248	; 0xf8
 8009390:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009394:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009398:	fa91 f1a1 	rbit	r1, r1
 800939c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80093a0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80093a4:	fab1 f181 	clz	r1, r1
 80093a8:	b2c9      	uxtb	r1, r1
 80093aa:	408b      	lsls	r3, r1
 80093ac:	4920      	ldr	r1, [pc, #128]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 80093ae:	4313      	orrs	r3, r2
 80093b0:	600b      	str	r3, [r1, #0]
 80093b2:	e06c      	b.n	800948e <HAL_RCC_OscConfig+0x646>
 80093b4:	2301      	movs	r3, #1
 80093b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80093be:	fa93 f3a3 	rbit	r3, r3
 80093c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80093c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093ca:	fab3 f383 	clz	r3, r3
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80093d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	461a      	mov	r2, r3
 80093dc:	2300      	movs	r3, #0
 80093de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093e0:	f7ff fa8a 	bl	80088f8 <HAL_GetTick>
 80093e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093e8:	e00a      	b.n	8009400 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093ea:	f7ff fa85 	bl	80088f8 <HAL_GetTick>
 80093ee:	4602      	mov	r2, r0
 80093f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d902      	bls.n	8009400 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	f000 bd5a 	b.w	8009eb4 <HAL_RCC_OscConfig+0x106c>
 8009400:	2302      	movs	r3, #2
 8009402:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009406:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800940a:	fa93 f3a3 	rbit	r3, r3
 800940e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8009412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009416:	fab3 f383 	clz	r3, r3
 800941a:	b2db      	uxtb	r3, r3
 800941c:	095b      	lsrs	r3, r3, #5
 800941e:	b2db      	uxtb	r3, r3
 8009420:	f043 0301 	orr.w	r3, r3, #1
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b01      	cmp	r3, #1
 8009428:	d104      	bne.n	8009434 <HAL_RCC_OscConfig+0x5ec>
 800942a:	4b01      	ldr	r3, [pc, #4]	; (8009430 <HAL_RCC_OscConfig+0x5e8>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	e015      	b.n	800945c <HAL_RCC_OscConfig+0x614>
 8009430:	40021000 	.word	0x40021000
 8009434:	2302      	movs	r3, #2
 8009436:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800943a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800943e:	fa93 f3a3 	rbit	r3, r3
 8009442:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009446:	2302      	movs	r3, #2
 8009448:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800944c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009450:	fa93 f3a3 	rbit	r3, r3
 8009454:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009458:	4bc8      	ldr	r3, [pc, #800]	; (800977c <HAL_RCC_OscConfig+0x934>)
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	2202      	movs	r2, #2
 800945e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8009462:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009466:	fa92 f2a2 	rbit	r2, r2
 800946a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800946e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009472:	fab2 f282 	clz	r2, r2
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	f042 0220 	orr.w	r2, r2, #32
 800947c:	b2d2      	uxtb	r2, r2
 800947e:	f002 021f 	and.w	r2, r2, #31
 8009482:	2101      	movs	r1, #1
 8009484:	fa01 f202 	lsl.w	r2, r1, r2
 8009488:	4013      	ands	r3, r2
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1ad      	bne.n	80093ea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800948e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0308 	and.w	r3, r3, #8
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 8110 	beq.w	80096c4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80094a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d079      	beq.n	80095a8 <HAL_RCC_OscConfig+0x760>
 80094b4:	2301      	movs	r3, #1
 80094b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80094be:	fa93 f3a3 	rbit	r3, r3
 80094c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80094c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094ca:	fab3 f383 	clz	r3, r3
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	461a      	mov	r2, r3
 80094d2:	4bab      	ldr	r3, [pc, #684]	; (8009780 <HAL_RCC_OscConfig+0x938>)
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	461a      	mov	r2, r3
 80094da:	2301      	movs	r3, #1
 80094dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094de:	f7ff fa0b 	bl	80088f8 <HAL_GetTick>
 80094e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094e6:	e00a      	b.n	80094fe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094e8:	f7ff fa06 	bl	80088f8 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d902      	bls.n	80094fe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	f000 bcdb 	b.w	8009eb4 <HAL_RCC_OscConfig+0x106c>
 80094fe:	2302      	movs	r3, #2
 8009500:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009508:	fa93 f3a3 	rbit	r3, r3
 800950c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009514:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009518:	2202      	movs	r2, #2
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009520:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	fa93 f2a3 	rbit	r2, r3
 800952a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800952e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800953c:	2202      	movs	r2, #2
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	fa93 f2a3 	rbit	r2, r3
 800954e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009552:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009556:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009558:	4b88      	ldr	r3, [pc, #544]	; (800977c <HAL_RCC_OscConfig+0x934>)
 800955a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800955c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009560:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009564:	2102      	movs	r1, #2
 8009566:	6019      	str	r1, [r3, #0]
 8009568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800956c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	fa93 f1a3 	rbit	r1, r3
 8009576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800957a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800957e:	6019      	str	r1, [r3, #0]
  return result;
 8009580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009584:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	fab3 f383 	clz	r3, r3
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009594:	b2db      	uxtb	r3, r3
 8009596:	f003 031f 	and.w	r3, r3, #31
 800959a:	2101      	movs	r1, #1
 800959c:	fa01 f303 	lsl.w	r3, r1, r3
 80095a0:	4013      	ands	r3, r2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0a0      	beq.n	80094e8 <HAL_RCC_OscConfig+0x6a0>
 80095a6:	e08d      	b.n	80096c4 <HAL_RCC_OscConfig+0x87c>
 80095a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80095b0:	2201      	movs	r2, #1
 80095b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	fa93 f2a3 	rbit	r2, r3
 80095c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80095ca:	601a      	str	r2, [r3, #0]
  return result;
 80095cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80095d4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095d6:	fab3 f383 	clz	r3, r3
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	4b68      	ldr	r3, [pc, #416]	; (8009780 <HAL_RCC_OscConfig+0x938>)
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	461a      	mov	r2, r3
 80095e6:	2300      	movs	r3, #0
 80095e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095ea:	f7ff f985 	bl	80088f8 <HAL_GetTick>
 80095ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095f2:	e00a      	b.n	800960a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095f4:	f7ff f980 	bl	80088f8 <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	2b02      	cmp	r3, #2
 8009602:	d902      	bls.n	800960a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	f000 bc55 	b.w	8009eb4 <HAL_RCC_OscConfig+0x106c>
 800960a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800960e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009612:	2202      	movs	r2, #2
 8009614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800961a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	fa93 f2a3 	rbit	r2, r3
 8009624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009628:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009632:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009636:	2202      	movs	r2, #2
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800963e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	fa93 f2a3 	rbit	r2, r3
 8009648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800964c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800965a:	2202      	movs	r2, #2
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	fa93 f2a3 	rbit	r2, r3
 800966c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009670:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009674:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009676:	4b41      	ldr	r3, [pc, #260]	; (800977c <HAL_RCC_OscConfig+0x934>)
 8009678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800967a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800967e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009682:	2102      	movs	r1, #2
 8009684:	6019      	str	r1, [r3, #0]
 8009686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800968a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	fa93 f1a3 	rbit	r1, r3
 8009694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009698:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800969c:	6019      	str	r1, [r3, #0]
  return result;
 800969e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096a2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	fab3 f383 	clz	r3, r3
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	f003 031f 	and.w	r3, r3, #31
 80096b8:	2101      	movs	r1, #1
 80096ba:	fa01 f303 	lsl.w	r3, r1, r3
 80096be:	4013      	ands	r3, r2
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d197      	bne.n	80095f4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0304 	and.w	r3, r3, #4
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 81a1 	beq.w	8009a1c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096da:	2300      	movs	r3, #0
 80096dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096e0:	4b26      	ldr	r3, [pc, #152]	; (800977c <HAL_RCC_OscConfig+0x934>)
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d116      	bne.n	800971a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096ec:	4b23      	ldr	r3, [pc, #140]	; (800977c <HAL_RCC_OscConfig+0x934>)
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	4a22      	ldr	r2, [pc, #136]	; (800977c <HAL_RCC_OscConfig+0x934>)
 80096f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096f6:	61d3      	str	r3, [r2, #28]
 80096f8:	4b20      	ldr	r3, [pc, #128]	; (800977c <HAL_RCC_OscConfig+0x934>)
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009704:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009708:	601a      	str	r2, [r3, #0]
 800970a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800970e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009712:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8009714:	2301      	movs	r3, #1
 8009716:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800971a:	4b1a      	ldr	r3, [pc, #104]	; (8009784 <HAL_RCC_OscConfig+0x93c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009722:	2b00      	cmp	r3, #0
 8009724:	d11a      	bne.n	800975c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009726:	4b17      	ldr	r3, [pc, #92]	; (8009784 <HAL_RCC_OscConfig+0x93c>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a16      	ldr	r2, [pc, #88]	; (8009784 <HAL_RCC_OscConfig+0x93c>)
 800972c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009730:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009732:	f7ff f8e1 	bl	80088f8 <HAL_GetTick>
 8009736:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800973a:	e009      	b.n	8009750 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800973c:	f7ff f8dc 	bl	80088f8 <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	2b64      	cmp	r3, #100	; 0x64
 800974a:	d901      	bls.n	8009750 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e3b1      	b.n	8009eb4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009750:	4b0c      	ldr	r3, [pc, #48]	; (8009784 <HAL_RCC_OscConfig+0x93c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009758:	2b00      	cmp	r3, #0
 800975a:	d0ef      	beq.n	800973c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800975c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009760:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d10d      	bne.n	8009788 <HAL_RCC_OscConfig+0x940>
 800976c:	4b03      	ldr	r3, [pc, #12]	; (800977c <HAL_RCC_OscConfig+0x934>)
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	4a02      	ldr	r2, [pc, #8]	; (800977c <HAL_RCC_OscConfig+0x934>)
 8009772:	f043 0301 	orr.w	r3, r3, #1
 8009776:	6213      	str	r3, [r2, #32]
 8009778:	e03c      	b.n	80097f4 <HAL_RCC_OscConfig+0x9ac>
 800977a:	bf00      	nop
 800977c:	40021000 	.word	0x40021000
 8009780:	10908120 	.word	0x10908120
 8009784:	40007000 	.word	0x40007000
 8009788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800978c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10c      	bne.n	80097b2 <HAL_RCC_OscConfig+0x96a>
 8009798:	4bc1      	ldr	r3, [pc, #772]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 800979a:	6a1b      	ldr	r3, [r3, #32]
 800979c:	4ac0      	ldr	r2, [pc, #768]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 800979e:	f023 0301 	bic.w	r3, r3, #1
 80097a2:	6213      	str	r3, [r2, #32]
 80097a4:	4bbe      	ldr	r3, [pc, #760]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80097a6:	6a1b      	ldr	r3, [r3, #32]
 80097a8:	4abd      	ldr	r2, [pc, #756]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80097aa:	f023 0304 	bic.w	r3, r3, #4
 80097ae:	6213      	str	r3, [r2, #32]
 80097b0:	e020      	b.n	80097f4 <HAL_RCC_OscConfig+0x9ac>
 80097b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	2b05      	cmp	r3, #5
 80097c0:	d10c      	bne.n	80097dc <HAL_RCC_OscConfig+0x994>
 80097c2:	4bb7      	ldr	r3, [pc, #732]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	4ab6      	ldr	r2, [pc, #728]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80097c8:	f043 0304 	orr.w	r3, r3, #4
 80097cc:	6213      	str	r3, [r2, #32]
 80097ce:	4bb4      	ldr	r3, [pc, #720]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	4ab3      	ldr	r2, [pc, #716]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80097d4:	f043 0301 	orr.w	r3, r3, #1
 80097d8:	6213      	str	r3, [r2, #32]
 80097da:	e00b      	b.n	80097f4 <HAL_RCC_OscConfig+0x9ac>
 80097dc:	4bb0      	ldr	r3, [pc, #704]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	4aaf      	ldr	r2, [pc, #700]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80097e2:	f023 0301 	bic.w	r3, r3, #1
 80097e6:	6213      	str	r3, [r2, #32]
 80097e8:	4bad      	ldr	r3, [pc, #692]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	4aac      	ldr	r2, [pc, #688]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80097ee:	f023 0304 	bic.w	r3, r3, #4
 80097f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80097f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 8081 	beq.w	8009908 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009806:	f7ff f877 	bl	80088f8 <HAL_GetTick>
 800980a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800980e:	e00b      	b.n	8009828 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009810:	f7ff f872 	bl	80088f8 <HAL_GetTick>
 8009814:	4602      	mov	r2, r0
 8009816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009820:	4293      	cmp	r3, r2
 8009822:	d901      	bls.n	8009828 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e345      	b.n	8009eb4 <HAL_RCC_OscConfig+0x106c>
 8009828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800982c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009830:	2202      	movs	r2, #2
 8009832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009838:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	fa93 f2a3 	rbit	r2, r3
 8009842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009846:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800984a:	601a      	str	r2, [r3, #0]
 800984c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009850:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009854:	2202      	movs	r2, #2
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800985c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	fa93 f2a3 	rbit	r2, r3
 8009866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800986a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800986e:	601a      	str	r2, [r3, #0]
  return result;
 8009870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009874:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009878:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800987a:	fab3 f383 	clz	r3, r3
 800987e:	b2db      	uxtb	r3, r3
 8009880:	095b      	lsrs	r3, r3, #5
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f043 0302 	orr.w	r3, r3, #2
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b02      	cmp	r3, #2
 800988c:	d102      	bne.n	8009894 <HAL_RCC_OscConfig+0xa4c>
 800988e:	4b84      	ldr	r3, [pc, #528]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	e013      	b.n	80098bc <HAL_RCC_OscConfig+0xa74>
 8009894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009898:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800989c:	2202      	movs	r2, #2
 800989e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	fa93 f2a3 	rbit	r2, r3
 80098ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	4b79      	ldr	r3, [pc, #484]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80098c4:	2102      	movs	r1, #2
 80098c6:	6011      	str	r1, [r2, #0]
 80098c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80098d0:	6812      	ldr	r2, [r2, #0]
 80098d2:	fa92 f1a2 	rbit	r1, r2
 80098d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80098de:	6011      	str	r1, [r2, #0]
  return result;
 80098e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098e4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80098e8:	6812      	ldr	r2, [r2, #0]
 80098ea:	fab2 f282 	clz	r2, r2
 80098ee:	b2d2      	uxtb	r2, r2
 80098f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098f4:	b2d2      	uxtb	r2, r2
 80098f6:	f002 021f 	and.w	r2, r2, #31
 80098fa:	2101      	movs	r1, #1
 80098fc:	fa01 f202 	lsl.w	r2, r1, r2
 8009900:	4013      	ands	r3, r2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d084      	beq.n	8009810 <HAL_RCC_OscConfig+0x9c8>
 8009906:	e07f      	b.n	8009a08 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009908:	f7fe fff6 	bl	80088f8 <HAL_GetTick>
 800990c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009910:	e00b      	b.n	800992a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009912:	f7fe fff1 	bl	80088f8 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009922:	4293      	cmp	r3, r2
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e2c4      	b.n	8009eb4 <HAL_RCC_OscConfig+0x106c>
 800992a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800992e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009932:	2202      	movs	r2, #2
 8009934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800993a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	fa93 f2a3 	rbit	r2, r3
 8009944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009948:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009952:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009956:	2202      	movs	r2, #2
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800995e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	fa93 f2a3 	rbit	r2, r3
 8009968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800996c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009970:	601a      	str	r2, [r3, #0]
  return result;
 8009972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009976:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800997a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800997c:	fab3 f383 	clz	r3, r3
 8009980:	b2db      	uxtb	r3, r3
 8009982:	095b      	lsrs	r3, r3, #5
 8009984:	b2db      	uxtb	r3, r3
 8009986:	f043 0302 	orr.w	r3, r3, #2
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b02      	cmp	r3, #2
 800998e:	d102      	bne.n	8009996 <HAL_RCC_OscConfig+0xb4e>
 8009990:	4b43      	ldr	r3, [pc, #268]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	e013      	b.n	80099be <HAL_RCC_OscConfig+0xb76>
 8009996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800999a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800999e:	2202      	movs	r2, #2
 80099a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	fa93 f2a3 	rbit	r2, r3
 80099b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	4b39      	ldr	r3, [pc, #228]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80099c6:	2102      	movs	r1, #2
 80099c8:	6011      	str	r1, [r2, #0]
 80099ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80099d2:	6812      	ldr	r2, [r2, #0]
 80099d4:	fa92 f1a2 	rbit	r1, r2
 80099d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80099e0:	6011      	str	r1, [r2, #0]
  return result;
 80099e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80099e6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80099ea:	6812      	ldr	r2, [r2, #0]
 80099ec:	fab2 f282 	clz	r2, r2
 80099f0:	b2d2      	uxtb	r2, r2
 80099f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099f6:	b2d2      	uxtb	r2, r2
 80099f8:	f002 021f 	and.w	r2, r2, #31
 80099fc:	2101      	movs	r1, #1
 80099fe:	fa01 f202 	lsl.w	r2, r1, r2
 8009a02:	4013      	ands	r3, r2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d184      	bne.n	8009912 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009a08:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d105      	bne.n	8009a1c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a10:	4b23      	ldr	r3, [pc, #140]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 8009a12:	69db      	ldr	r3, [r3, #28]
 8009a14:	4a22      	ldr	r2, [pc, #136]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 8009a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a1a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 8242 	beq.w	8009eb2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a2e:	4b1c      	ldr	r3, [pc, #112]	; (8009aa0 <HAL_RCC_OscConfig+0xc58>)
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f003 030c 	and.w	r3, r3, #12
 8009a36:	2b08      	cmp	r3, #8
 8009a38:	f000 8213 	beq.w	8009e62 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	f040 8162 	bne.w	8009d12 <HAL_RCC_OscConfig+0xeca>
 8009a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a52:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009a56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a60:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	fa93 f2a3 	rbit	r2, r3
 8009a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a6e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009a72:	601a      	str	r2, [r3, #0]
  return result;
 8009a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a78:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009a7c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a7e:	fab3 f383 	clz	r3, r3
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009a88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	461a      	mov	r2, r3
 8009a90:	2300      	movs	r3, #0
 8009a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a94:	f7fe ff30 	bl	80088f8 <HAL_GetTick>
 8009a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009a9c:	e00c      	b.n	8009ab8 <HAL_RCC_OscConfig+0xc70>
 8009a9e:	bf00      	nop
 8009aa0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009aa4:	f7fe ff28 	bl	80088f8 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d901      	bls.n	8009ab8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e1fd      	b.n	8009eb4 <HAL_RCC_OscConfig+0x106c>
 8009ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009abc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	fa93 f2a3 	rbit	r2, r3
 8009ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ad8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009adc:	601a      	str	r2, [r3, #0]
  return result;
 8009ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ae2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009ae6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009ae8:	fab3 f383 	clz	r3, r3
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	095b      	lsrs	r3, r3, #5
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	f043 0301 	orr.w	r3, r3, #1
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d102      	bne.n	8009b02 <HAL_RCC_OscConfig+0xcba>
 8009afc:	4bb0      	ldr	r3, [pc, #704]	; (8009dc0 <HAL_RCC_OscConfig+0xf78>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	e027      	b.n	8009b52 <HAL_RCC_OscConfig+0xd0a>
 8009b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b06:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b14:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	fa93 f2a3 	rbit	r2, r3
 8009b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b22:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b2c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b3a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	fa93 f2a3 	rbit	r2, r3
 8009b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b48:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	4b9c      	ldr	r3, [pc, #624]	; (8009dc0 <HAL_RCC_OscConfig+0xf78>)
 8009b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b56:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009b5a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009b5e:	6011      	str	r1, [r2, #0]
 8009b60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b64:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009b68:	6812      	ldr	r2, [r2, #0]
 8009b6a:	fa92 f1a2 	rbit	r1, r2
 8009b6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b72:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009b76:	6011      	str	r1, [r2, #0]
  return result;
 8009b78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b7c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009b80:	6812      	ldr	r2, [r2, #0]
 8009b82:	fab2 f282 	clz	r2, r2
 8009b86:	b2d2      	uxtb	r2, r2
 8009b88:	f042 0220 	orr.w	r2, r2, #32
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	f002 021f 	and.w	r2, r2, #31
 8009b92:	2101      	movs	r1, #1
 8009b94:	fa01 f202 	lsl.w	r2, r1, r2
 8009b98:	4013      	ands	r3, r2
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d182      	bne.n	8009aa4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b9e:	4b88      	ldr	r3, [pc, #544]	; (8009dc0 <HAL_RCC_OscConfig+0xf78>)
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	430b      	orrs	r3, r1
 8009bc0:	497f      	ldr	r1, [pc, #508]	; (8009dc0 <HAL_RCC_OscConfig+0xf78>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	604b      	str	r3, [r1, #4]
 8009bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009bce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bd8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	fa93 f2a3 	rbit	r2, r3
 8009be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009be6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009bea:	601a      	str	r2, [r3, #0]
  return result;
 8009bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bf0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009bf4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bf6:	fab3 f383 	clz	r3, r3
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009c00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	461a      	mov	r2, r3
 8009c08:	2301      	movs	r3, #1
 8009c0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c0c:	f7fe fe74 	bl	80088f8 <HAL_GetTick>
 8009c10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009c14:	e009      	b.n	8009c2a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c16:	f7fe fe6f 	bl	80088f8 <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d901      	bls.n	8009c2a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e144      	b.n	8009eb4 <HAL_RCC_OscConfig+0x106c>
 8009c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c2e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c3c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	fa93 f2a3 	rbit	r2, r3
 8009c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c4a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009c4e:	601a      	str	r2, [r3, #0]
  return result;
 8009c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c54:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009c58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009c5a:	fab3 f383 	clz	r3, r3
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	095b      	lsrs	r3, r3, #5
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	f043 0301 	orr.w	r3, r3, #1
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d102      	bne.n	8009c74 <HAL_RCC_OscConfig+0xe2c>
 8009c6e:	4b54      	ldr	r3, [pc, #336]	; (8009dc0 <HAL_RCC_OscConfig+0xf78>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	e027      	b.n	8009cc4 <HAL_RCC_OscConfig+0xe7c>
 8009c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c78:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c86:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	fa93 f2a3 	rbit	r2, r3
 8009c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c94:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c9e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009ca2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009ca6:	601a      	str	r2, [r3, #0]
 8009ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	fa93 f2a3 	rbit	r2, r3
 8009cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	4b3f      	ldr	r3, [pc, #252]	; (8009dc0 <HAL_RCC_OscConfig+0xf78>)
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cc8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009ccc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009cd0:	6011      	str	r1, [r2, #0]
 8009cd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cd6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009cda:	6812      	ldr	r2, [r2, #0]
 8009cdc:	fa92 f1a2 	rbit	r1, r2
 8009ce0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009ce4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009ce8:	6011      	str	r1, [r2, #0]
  return result;
 8009cea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009cf2:	6812      	ldr	r2, [r2, #0]
 8009cf4:	fab2 f282 	clz	r2, r2
 8009cf8:	b2d2      	uxtb	r2, r2
 8009cfa:	f042 0220 	orr.w	r2, r2, #32
 8009cfe:	b2d2      	uxtb	r2, r2
 8009d00:	f002 021f 	and.w	r2, r2, #31
 8009d04:	2101      	movs	r1, #1
 8009d06:	fa01 f202 	lsl.w	r2, r1, r2
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d082      	beq.n	8009c16 <HAL_RCC_OscConfig+0xdce>
 8009d10:	e0cf      	b.n	8009eb2 <HAL_RCC_OscConfig+0x106a>
 8009d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d16:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d24:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	fa93 f2a3 	rbit	r2, r3
 8009d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d32:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009d36:	601a      	str	r2, [r3, #0]
  return result;
 8009d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d3c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009d40:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d42:	fab3 f383 	clz	r3, r3
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009d4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	461a      	mov	r2, r3
 8009d54:	2300      	movs	r3, #0
 8009d56:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d58:	f7fe fdce 	bl	80088f8 <HAL_GetTick>
 8009d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009d60:	e009      	b.n	8009d76 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d62:	f7fe fdc9 	bl	80088f8 <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d901      	bls.n	8009d76 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e09e      	b.n	8009eb4 <HAL_RCC_OscConfig+0x106c>
 8009d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d7a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d88:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	fa93 f2a3 	rbit	r2, r3
 8009d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d96:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009d9a:	601a      	str	r2, [r3, #0]
  return result;
 8009d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009da0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009da4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009da6:	fab3 f383 	clz	r3, r3
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	095b      	lsrs	r3, r3, #5
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	f043 0301 	orr.w	r3, r3, #1
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d104      	bne.n	8009dc4 <HAL_RCC_OscConfig+0xf7c>
 8009dba:	4b01      	ldr	r3, [pc, #4]	; (8009dc0 <HAL_RCC_OscConfig+0xf78>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	e029      	b.n	8009e14 <HAL_RCC_OscConfig+0xfcc>
 8009dc0:	40021000 	.word	0x40021000
 8009dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dc8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009dcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dd6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	fa93 f2a3 	rbit	r2, r3
 8009de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009de4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009df2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dfc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	fa93 f2a3 	rbit	r2, r3
 8009e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	4b2b      	ldr	r3, [pc, #172]	; (8009ec0 <HAL_RCC_OscConfig+0x1078>)
 8009e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e18:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009e1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009e20:	6011      	str	r1, [r2, #0]
 8009e22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e26:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009e2a:	6812      	ldr	r2, [r2, #0]
 8009e2c:	fa92 f1a2 	rbit	r1, r2
 8009e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e34:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009e38:	6011      	str	r1, [r2, #0]
  return result;
 8009e3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e3e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009e42:	6812      	ldr	r2, [r2, #0]
 8009e44:	fab2 f282 	clz	r2, r2
 8009e48:	b2d2      	uxtb	r2, r2
 8009e4a:	f042 0220 	orr.w	r2, r2, #32
 8009e4e:	b2d2      	uxtb	r2, r2
 8009e50:	f002 021f 	and.w	r2, r2, #31
 8009e54:	2101      	movs	r1, #1
 8009e56:	fa01 f202 	lsl.w	r2, r1, r2
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d180      	bne.n	8009d62 <HAL_RCC_OscConfig+0xf1a>
 8009e60:	e027      	b.n	8009eb2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e01e      	b.n	8009eb4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009e76:	4b12      	ldr	r3, [pc, #72]	; (8009ec0 <HAL_RCC_OscConfig+0x1078>)
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009e7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009e82:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d10b      	bne.n	8009eae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8009e96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009e9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d001      	beq.n	8009eb2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	40021000 	.word	0x40021000

08009ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b09e      	sub	sp, #120	; 0x78
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e162      	b.n	800a1a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009edc:	4b90      	ldr	r3, [pc, #576]	; (800a120 <HAL_RCC_ClockConfig+0x25c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 0307 	and.w	r3, r3, #7
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d910      	bls.n	8009f0c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009eea:	4b8d      	ldr	r3, [pc, #564]	; (800a120 <HAL_RCC_ClockConfig+0x25c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f023 0207 	bic.w	r2, r3, #7
 8009ef2:	498b      	ldr	r1, [pc, #556]	; (800a120 <HAL_RCC_ClockConfig+0x25c>)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009efa:	4b89      	ldr	r3, [pc, #548]	; (800a120 <HAL_RCC_ClockConfig+0x25c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0307 	and.w	r3, r3, #7
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d001      	beq.n	8009f0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e14a      	b.n	800a1a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0302 	and.w	r3, r3, #2
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d008      	beq.n	8009f2a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f18:	4b82      	ldr	r3, [pc, #520]	; (800a124 <HAL_RCC_ClockConfig+0x260>)
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	497f      	ldr	r1, [pc, #508]	; (800a124 <HAL_RCC_ClockConfig+0x260>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 80dc 	beq.w	800a0f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d13c      	bne.n	8009fba <HAL_RCC_ClockConfig+0xf6>
 8009f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f48:	fa93 f3a3 	rbit	r3, r3
 8009f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f50:	fab3 f383 	clz	r3, r3
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	095b      	lsrs	r3, r3, #5
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	f043 0301 	orr.w	r3, r3, #1
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d102      	bne.n	8009f6a <HAL_RCC_ClockConfig+0xa6>
 8009f64:	4b6f      	ldr	r3, [pc, #444]	; (800a124 <HAL_RCC_ClockConfig+0x260>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	e00f      	b.n	8009f8a <HAL_RCC_ClockConfig+0xc6>
 8009f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f72:	fa93 f3a3 	rbit	r3, r3
 8009f76:	667b      	str	r3, [r7, #100]	; 0x64
 8009f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8009f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f80:	fa93 f3a3 	rbit	r3, r3
 8009f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f86:	4b67      	ldr	r3, [pc, #412]	; (800a124 <HAL_RCC_ClockConfig+0x260>)
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009f8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f92:	fa92 f2a2 	rbit	r2, r2
 8009f96:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8009f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f9a:	fab2 f282 	clz	r2, r2
 8009f9e:	b2d2      	uxtb	r2, r2
 8009fa0:	f042 0220 	orr.w	r2, r2, #32
 8009fa4:	b2d2      	uxtb	r2, r2
 8009fa6:	f002 021f 	and.w	r2, r2, #31
 8009faa:	2101      	movs	r1, #1
 8009fac:	fa01 f202 	lsl.w	r2, r1, r2
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d17b      	bne.n	800a0ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e0f3      	b.n	800a1a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d13c      	bne.n	800a03c <HAL_RCC_ClockConfig+0x178>
 8009fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fca:	fa93 f3a3 	rbit	r3, r3
 8009fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fd2:	fab3 f383 	clz	r3, r3
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	095b      	lsrs	r3, r3, #5
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	f043 0301 	orr.w	r3, r3, #1
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d102      	bne.n	8009fec <HAL_RCC_ClockConfig+0x128>
 8009fe6:	4b4f      	ldr	r3, [pc, #316]	; (800a124 <HAL_RCC_ClockConfig+0x260>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	e00f      	b.n	800a00c <HAL_RCC_ClockConfig+0x148>
 8009fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ff0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ff4:	fa93 f3a3 	rbit	r3, r3
 8009ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8009ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ffe:	643b      	str	r3, [r7, #64]	; 0x40
 800a000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a002:	fa93 f3a3 	rbit	r3, r3
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a008:	4b46      	ldr	r3, [pc, #280]	; (800a124 <HAL_RCC_ClockConfig+0x260>)
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a010:	63ba      	str	r2, [r7, #56]	; 0x38
 800a012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a014:	fa92 f2a2 	rbit	r2, r2
 800a018:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800a01a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a01c:	fab2 f282 	clz	r2, r2
 800a020:	b2d2      	uxtb	r2, r2
 800a022:	f042 0220 	orr.w	r2, r2, #32
 800a026:	b2d2      	uxtb	r2, r2
 800a028:	f002 021f 	and.w	r2, r2, #31
 800a02c:	2101      	movs	r1, #1
 800a02e:	fa01 f202 	lsl.w	r2, r1, r2
 800a032:	4013      	ands	r3, r2
 800a034:	2b00      	cmp	r3, #0
 800a036:	d13a      	bne.n	800a0ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e0b2      	b.n	800a1a2 <HAL_RCC_ClockConfig+0x2de>
 800a03c:	2302      	movs	r3, #2
 800a03e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a042:	fa93 f3a3 	rbit	r3, r3
 800a046:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a04a:	fab3 f383 	clz	r3, r3
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	095b      	lsrs	r3, r3, #5
 800a052:	b2db      	uxtb	r3, r3
 800a054:	f043 0301 	orr.w	r3, r3, #1
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d102      	bne.n	800a064 <HAL_RCC_ClockConfig+0x1a0>
 800a05e:	4b31      	ldr	r3, [pc, #196]	; (800a124 <HAL_RCC_ClockConfig+0x260>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	e00d      	b.n	800a080 <HAL_RCC_ClockConfig+0x1bc>
 800a064:	2302      	movs	r3, #2
 800a066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06a:	fa93 f3a3 	rbit	r3, r3
 800a06e:	627b      	str	r3, [r7, #36]	; 0x24
 800a070:	2302      	movs	r3, #2
 800a072:	623b      	str	r3, [r7, #32]
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	fa93 f3a3 	rbit	r3, r3
 800a07a:	61fb      	str	r3, [r7, #28]
 800a07c:	4b29      	ldr	r3, [pc, #164]	; (800a124 <HAL_RCC_ClockConfig+0x260>)
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	2202      	movs	r2, #2
 800a082:	61ba      	str	r2, [r7, #24]
 800a084:	69ba      	ldr	r2, [r7, #24]
 800a086:	fa92 f2a2 	rbit	r2, r2
 800a08a:	617a      	str	r2, [r7, #20]
  return result;
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	fab2 f282 	clz	r2, r2
 800a092:	b2d2      	uxtb	r2, r2
 800a094:	f042 0220 	orr.w	r2, r2, #32
 800a098:	b2d2      	uxtb	r2, r2
 800a09a:	f002 021f 	and.w	r2, r2, #31
 800a09e:	2101      	movs	r1, #1
 800a0a0:	fa01 f202 	lsl.w	r2, r1, r2
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e079      	b.n	800a1a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a0ae:	4b1d      	ldr	r3, [pc, #116]	; (800a124 <HAL_RCC_ClockConfig+0x260>)
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f023 0203 	bic.w	r2, r3, #3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	491a      	ldr	r1, [pc, #104]	; (800a124 <HAL_RCC_ClockConfig+0x260>)
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a0c0:	f7fe fc1a 	bl	80088f8 <HAL_GetTick>
 800a0c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0c6:	e00a      	b.n	800a0de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0c8:	f7fe fc16 	bl	80088f8 <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d901      	bls.n	800a0de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	e061      	b.n	800a1a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0de:	4b11      	ldr	r3, [pc, #68]	; (800a124 <HAL_RCC_ClockConfig+0x260>)
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	f003 020c 	and.w	r2, r3, #12
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d1eb      	bne.n	800a0c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a0f0:	4b0b      	ldr	r3, [pc, #44]	; (800a120 <HAL_RCC_ClockConfig+0x25c>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0307 	and.w	r3, r3, #7
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d214      	bcs.n	800a128 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0fe:	4b08      	ldr	r3, [pc, #32]	; (800a120 <HAL_RCC_ClockConfig+0x25c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f023 0207 	bic.w	r2, r3, #7
 800a106:	4906      	ldr	r1, [pc, #24]	; (800a120 <HAL_RCC_ClockConfig+0x25c>)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a10e:	4b04      	ldr	r3, [pc, #16]	; (800a120 <HAL_RCC_ClockConfig+0x25c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f003 0307 	and.w	r3, r3, #7
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d005      	beq.n	800a128 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e040      	b.n	800a1a2 <HAL_RCC_ClockConfig+0x2de>
 800a120:	40022000 	.word	0x40022000
 800a124:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b00      	cmp	r3, #0
 800a132:	d008      	beq.n	800a146 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a134:	4b1d      	ldr	r3, [pc, #116]	; (800a1ac <HAL_RCC_ClockConfig+0x2e8>)
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	491a      	ldr	r1, [pc, #104]	; (800a1ac <HAL_RCC_ClockConfig+0x2e8>)
 800a142:	4313      	orrs	r3, r2
 800a144:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0308 	and.w	r3, r3, #8
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d009      	beq.n	800a166 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a152:	4b16      	ldr	r3, [pc, #88]	; (800a1ac <HAL_RCC_ClockConfig+0x2e8>)
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	4912      	ldr	r1, [pc, #72]	; (800a1ac <HAL_RCC_ClockConfig+0x2e8>)
 800a162:	4313      	orrs	r3, r2
 800a164:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a166:	f000 f829 	bl	800a1bc <HAL_RCC_GetSysClockFreq>
 800a16a:	4601      	mov	r1, r0
 800a16c:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <HAL_RCC_ClockConfig+0x2e8>)
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a174:	22f0      	movs	r2, #240	; 0xf0
 800a176:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	fa92 f2a2 	rbit	r2, r2
 800a17e:	60fa      	str	r2, [r7, #12]
  return result;
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	fab2 f282 	clz	r2, r2
 800a186:	b2d2      	uxtb	r2, r2
 800a188:	40d3      	lsrs	r3, r2
 800a18a:	4a09      	ldr	r2, [pc, #36]	; (800a1b0 <HAL_RCC_ClockConfig+0x2ec>)
 800a18c:	5cd3      	ldrb	r3, [r2, r3]
 800a18e:	fa21 f303 	lsr.w	r3, r1, r3
 800a192:	4a08      	ldr	r2, [pc, #32]	; (800a1b4 <HAL_RCC_ClockConfig+0x2f0>)
 800a194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a196:	4b08      	ldr	r3, [pc, #32]	; (800a1b8 <HAL_RCC_ClockConfig+0x2f4>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe fb68 	bl	8008870 <HAL_InitTick>
  
  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3778      	adds	r7, #120	; 0x78
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	40021000 	.word	0x40021000
 800a1b0:	0800bfcc 	.word	0x0800bfcc
 800a1b4:	20000000 	.word	0x20000000
 800a1b8:	20000004 	.word	0x20000004

0800a1bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b08b      	sub	sp, #44	; 0x2c
 800a1c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	61fb      	str	r3, [r7, #28]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	61bb      	str	r3, [r7, #24]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a1d6:	4b29      	ldr	r3, [pc, #164]	; (800a27c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	f003 030c 	and.w	r3, r3, #12
 800a1e2:	2b04      	cmp	r3, #4
 800a1e4:	d002      	beq.n	800a1ec <HAL_RCC_GetSysClockFreq+0x30>
 800a1e6:	2b08      	cmp	r3, #8
 800a1e8:	d003      	beq.n	800a1f2 <HAL_RCC_GetSysClockFreq+0x36>
 800a1ea:	e03c      	b.n	800a266 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a1ec:	4b24      	ldr	r3, [pc, #144]	; (800a280 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a1ee:	623b      	str	r3, [r7, #32]
      break;
 800a1f0:	e03c      	b.n	800a26c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a1f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a1fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	fa92 f2a2 	rbit	r2, r2
 800a204:	607a      	str	r2, [r7, #4]
  return result;
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	fab2 f282 	clz	r2, r2
 800a20c:	b2d2      	uxtb	r2, r2
 800a20e:	40d3      	lsrs	r3, r2
 800a210:	4a1c      	ldr	r2, [pc, #112]	; (800a284 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a212:	5cd3      	ldrb	r3, [r2, r3]
 800a214:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a216:	4b19      	ldr	r3, [pc, #100]	; (800a27c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	f003 030f 	and.w	r3, r3, #15
 800a21e:	220f      	movs	r2, #15
 800a220:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	fa92 f2a2 	rbit	r2, r2
 800a228:	60fa      	str	r2, [r7, #12]
  return result;
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	fab2 f282 	clz	r2, r2
 800a230:	b2d2      	uxtb	r2, r2
 800a232:	40d3      	lsrs	r3, r2
 800a234:	4a14      	ldr	r2, [pc, #80]	; (800a288 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a236:	5cd3      	ldrb	r3, [r2, r3]
 800a238:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d008      	beq.n	800a256 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a244:	4a0e      	ldr	r2, [pc, #56]	; (800a280 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	fbb2 f2f3 	udiv	r2, r2, r3
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	fb02 f303 	mul.w	r3, r2, r3
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
 800a254:	e004      	b.n	800a260 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	4a0c      	ldr	r2, [pc, #48]	; (800a28c <HAL_RCC_GetSysClockFreq+0xd0>)
 800a25a:	fb02 f303 	mul.w	r3, r2, r3
 800a25e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	623b      	str	r3, [r7, #32]
      break;
 800a264:	e002      	b.n	800a26c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a266:	4b06      	ldr	r3, [pc, #24]	; (800a280 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a268:	623b      	str	r3, [r7, #32]
      break;
 800a26a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a26c:	6a3b      	ldr	r3, [r7, #32]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	372c      	adds	r7, #44	; 0x2c
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	40021000 	.word	0x40021000
 800a280:	007a1200 	.word	0x007a1200
 800a284:	0800bfe4 	.word	0x0800bfe4
 800a288:	0800bff4 	.word	0x0800bff4
 800a28c:	003d0900 	.word	0x003d0900

0800a290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a294:	4b03      	ldr	r3, [pc, #12]	; (800a2a4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a296:	681b      	ldr	r3, [r3, #0]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	20000000 	.word	0x20000000

0800a2a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a2ae:	f7ff ffef 	bl	800a290 <HAL_RCC_GetHCLKFreq>
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	4b0b      	ldr	r3, [pc, #44]	; (800a2e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a2c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	fa92 f2a2 	rbit	r2, r2
 800a2c8:	603a      	str	r2, [r7, #0]
  return result;
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	fab2 f282 	clz	r2, r2
 800a2d0:	b2d2      	uxtb	r2, r2
 800a2d2:	40d3      	lsrs	r3, r2
 800a2d4:	4a04      	ldr	r2, [pc, #16]	; (800a2e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a2d6:	5cd3      	ldrb	r3, [r2, r3]
 800a2d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	40021000 	.word	0x40021000
 800a2e8:	0800bfdc 	.word	0x0800bfdc

0800a2ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a2f2:	f7ff ffcd 	bl	800a290 <HAL_RCC_GetHCLKFreq>
 800a2f6:	4601      	mov	r1, r0
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	; (800a328 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a300:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a304:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	fa92 f2a2 	rbit	r2, r2
 800a30c:	603a      	str	r2, [r7, #0]
  return result;
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	fab2 f282 	clz	r2, r2
 800a314:	b2d2      	uxtb	r2, r2
 800a316:	40d3      	lsrs	r3, r2
 800a318:	4a04      	ldr	r2, [pc, #16]	; (800a32c <HAL_RCC_GetPCLK2Freq+0x40>)
 800a31a:	5cd3      	ldrb	r3, [r2, r3]
 800a31c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a320:	4618      	mov	r0, r3
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	40021000 	.word	0x40021000
 800a32c:	0800bfdc 	.word	0x0800bfdc

0800a330 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b092      	sub	sp, #72	; 0x48
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a338:	2300      	movs	r3, #0
 800a33a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a340:	2300      	movs	r3, #0
 800a342:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 80d4 	beq.w	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a354:	4b4e      	ldr	r3, [pc, #312]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10e      	bne.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a360:	4b4b      	ldr	r3, [pc, #300]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a362:	69db      	ldr	r3, [r3, #28]
 800a364:	4a4a      	ldr	r2, [pc, #296]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a36a:	61d3      	str	r3, [r2, #28]
 800a36c:	4b48      	ldr	r3, [pc, #288]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a374:	60bb      	str	r3, [r7, #8]
 800a376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a37e:	4b45      	ldr	r3, [pc, #276]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a386:	2b00      	cmp	r3, #0
 800a388:	d118      	bne.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a38a:	4b42      	ldr	r3, [pc, #264]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a41      	ldr	r2, [pc, #260]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a394:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a396:	f7fe faaf 	bl	80088f8 <HAL_GetTick>
 800a39a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a39c:	e008      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a39e:	f7fe faab 	bl	80088f8 <HAL_GetTick>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	2b64      	cmp	r3, #100	; 0x64
 800a3aa:	d901      	bls.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e169      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3b0:	4b38      	ldr	r3, [pc, #224]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d0f0      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a3bc:	4b34      	ldr	r3, [pc, #208]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3be:	6a1b      	ldr	r3, [r3, #32]
 800a3c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a3c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 8084 	beq.w	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d07c      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3dc:	4b2c      	ldr	r3, [pc, #176]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3de:	6a1b      	ldr	r3, [r3, #32]
 800a3e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a3ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	fa93 f3a3 	rbit	r3, r3
 800a3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a3f6:	fab3 f383 	clz	r3, r3
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	4b26      	ldr	r3, [pc, #152]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a400:	4413      	add	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	461a      	mov	r2, r3
 800a406:	2301      	movs	r3, #1
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a40e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	fa93 f3a3 	rbit	r3, r3
 800a416:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a41a:	fab3 f383 	clz	r3, r3
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	461a      	mov	r2, r3
 800a422:	4b1d      	ldr	r3, [pc, #116]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a424:	4413      	add	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	461a      	mov	r2, r3
 800a42a:	2300      	movs	r3, #0
 800a42c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a42e:	4a18      	ldr	r2, [pc, #96]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a432:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d04b      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a43e:	f7fe fa5b 	bl	80088f8 <HAL_GetTick>
 800a442:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a444:	e00a      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a446:	f7fe fa57 	bl	80088f8 <HAL_GetTick>
 800a44a:	4602      	mov	r2, r0
 800a44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	f241 3288 	movw	r2, #5000	; 0x1388
 800a454:	4293      	cmp	r3, r2
 800a456:	d901      	bls.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e113      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a45c:	2302      	movs	r3, #2
 800a45e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	fa93 f3a3 	rbit	r3, r3
 800a466:	627b      	str	r3, [r7, #36]	; 0x24
 800a468:	2302      	movs	r3, #2
 800a46a:	623b      	str	r3, [r7, #32]
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	fa93 f3a3 	rbit	r3, r3
 800a472:	61fb      	str	r3, [r7, #28]
  return result;
 800a474:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a476:	fab3 f383 	clz	r3, r3
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	095b      	lsrs	r3, r3, #5
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	f043 0302 	orr.w	r3, r3, #2
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b02      	cmp	r3, #2
 800a488:	d108      	bne.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a48a:	4b01      	ldr	r3, [pc, #4]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	e00d      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a490:	40021000 	.word	0x40021000
 800a494:	40007000 	.word	0x40007000
 800a498:	10908100 	.word	0x10908100
 800a49c:	2302      	movs	r3, #2
 800a49e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	fa93 f3a3 	rbit	r3, r3
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	4b78      	ldr	r3, [pc, #480]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	613a      	str	r2, [r7, #16]
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	fa92 f2a2 	rbit	r2, r2
 800a4b6:	60fa      	str	r2, [r7, #12]
  return result;
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	fab2 f282 	clz	r2, r2
 800a4be:	b2d2      	uxtb	r2, r2
 800a4c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4c4:	b2d2      	uxtb	r2, r2
 800a4c6:	f002 021f 	and.w	r2, r2, #31
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	fa01 f202 	lsl.w	r2, r1, r2
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0b7      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a4d6:	4b6d      	ldr	r3, [pc, #436]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	496a      	ldr	r1, [pc, #424]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a4e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d105      	bne.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4f0:	4b66      	ldr	r3, [pc, #408]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4f2:	69db      	ldr	r3, [r3, #28]
 800a4f4:	4a65      	ldr	r2, [pc, #404]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	2b00      	cmp	r3, #0
 800a506:	d008      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a508:	4b60      	ldr	r3, [pc, #384]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50c:	f023 0203 	bic.w	r2, r3, #3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	495d      	ldr	r1, [pc, #372]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a516:	4313      	orrs	r3, r2
 800a518:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	2b00      	cmp	r3, #0
 800a524:	d008      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a526:	4b59      	ldr	r3, [pc, #356]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	4956      	ldr	r1, [pc, #344]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a534:	4313      	orrs	r3, r2
 800a536:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0304 	and.w	r3, r3, #4
 800a540:	2b00      	cmp	r3, #0
 800a542:	d008      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a544:	4b51      	ldr	r3, [pc, #324]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a548:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	494e      	ldr	r1, [pc, #312]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a552:	4313      	orrs	r3, r2
 800a554:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 0320 	and.w	r3, r3, #32
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d008      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a562:	4b4a      	ldr	r3, [pc, #296]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a566:	f023 0210 	bic.w	r2, r3, #16
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	4947      	ldr	r1, [pc, #284]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a570:	4313      	orrs	r3, r2
 800a572:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d008      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a580:	4b42      	ldr	r3, [pc, #264]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58c:	493f      	ldr	r1, [pc, #252]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d008      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a59e:	4b3b      	ldr	r3, [pc, #236]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a2:	f023 0220 	bic.w	r2, r3, #32
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	4938      	ldr	r1, [pc, #224]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0308 	and.w	r3, r3, #8
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d008      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a5bc:	4b33      	ldr	r3, [pc, #204]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	4930      	ldr	r1, [pc, #192]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0310 	and.w	r3, r3, #16
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d008      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a5da:	4b2c      	ldr	r3, [pc, #176]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	4929      	ldr	r1, [pc, #164]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d008      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a5f8:	4b24      	ldr	r3, [pc, #144]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a604:	4921      	ldr	r1, [pc, #132]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a606:	4313      	orrs	r3, r2
 800a608:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a612:	2b00      	cmp	r3, #0
 800a614:	d008      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a616:	4b1d      	ldr	r3, [pc, #116]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a622:	491a      	ldr	r1, [pc, #104]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a624:	4313      	orrs	r3, r2
 800a626:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a630:	2b00      	cmp	r3, #0
 800a632:	d008      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a634:	4b15      	ldr	r3, [pc, #84]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a638:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a640:	4912      	ldr	r1, [pc, #72]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a642:	4313      	orrs	r3, r2
 800a644:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d008      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a652:	4b0e      	ldr	r3, [pc, #56]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a656:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	490b      	ldr	r1, [pc, #44]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a660:	4313      	orrs	r3, r2
 800a662:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d008      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a670:	4b06      	ldr	r3, [pc, #24]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a674:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67c:	4903      	ldr	r1, [pc, #12]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3748      	adds	r7, #72	; 0x48
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	40021000 	.word	0x40021000

0800a690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e040      	b.n	800a724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d106      	bne.n	800a6b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7fd ff42 	bl	800853c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2224      	movs	r2, #36	; 0x24
 800a6bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 0201 	bic.w	r2, r2, #1
 800a6cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f8b6 	bl	800a840 <UART_SetConfig>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d101      	bne.n	800a6de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e022      	b.n	800a724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fa7e 	bl	800abe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689a      	ldr	r2, [r3, #8]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a70a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f042 0201 	orr.w	r2, r2, #1
 800a71a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 fb05 	bl	800ad2c <UART_CheckIdleState>
 800a722:	4603      	mov	r3, r0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08a      	sub	sp, #40	; 0x28
 800a730:	af02      	add	r7, sp, #8
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	603b      	str	r3, [r7, #0]
 800a738:	4613      	mov	r3, r2
 800a73a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a740:	2b20      	cmp	r3, #32
 800a742:	d178      	bne.n	800a836 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d002      	beq.n	800a750 <HAL_UART_Transmit+0x24>
 800a74a:	88fb      	ldrh	r3, [r7, #6]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e071      	b.n	800a838 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2221      	movs	r2, #33	; 0x21
 800a760:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a762:	f7fe f8c9 	bl	80088f8 <HAL_GetTick>
 800a766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	88fa      	ldrh	r2, [r7, #6]
 800a76c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	88fa      	ldrh	r2, [r7, #6]
 800a774:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a780:	d108      	bne.n	800a794 <HAL_UART_Transmit+0x68>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d104      	bne.n	800a794 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	61bb      	str	r3, [r7, #24]
 800a792:	e003      	b.n	800a79c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a798:	2300      	movs	r3, #0
 800a79a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a79c:	e030      	b.n	800a800 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2180      	movs	r1, #128	; 0x80
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 fb67 	bl	800ae7c <UART_WaitOnFlagUntilTimeout>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d004      	beq.n	800a7be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e03c      	b.n	800a838 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10b      	bne.n	800a7dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	881a      	ldrh	r2, [r3, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7d0:	b292      	uxth	r2, r2
 800a7d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	3302      	adds	r3, #2
 800a7d8:	61bb      	str	r3, [r7, #24]
 800a7da:	e008      	b.n	800a7ee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	781a      	ldrb	r2, [r3, #0]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	b292      	uxth	r2, r2
 800a7e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a806:	b29b      	uxth	r3, r3
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1c8      	bne.n	800a79e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	2200      	movs	r2, #0
 800a814:	2140      	movs	r1, #64	; 0x40
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f000 fb30 	bl	800ae7c <UART_WaitOnFlagUntilTimeout>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d004      	beq.n	800a82c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2220      	movs	r2, #32
 800a826:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e005      	b.n	800a838 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2220      	movs	r2, #32
 800a830:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	e000      	b.n	800a838 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800a836:	2302      	movs	r3, #2
  }
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3720      	adds	r7, #32
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	689a      	ldr	r2, [r3, #8]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	431a      	orrs	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	431a      	orrs	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	4313      	orrs	r3, r2
 800a862:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a86e:	f023 030c 	bic.w	r3, r3, #12
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	6812      	ldr	r2, [r2, #0]
 800a876:	6979      	ldr	r1, [r7, #20]
 800a878:	430b      	orrs	r3, r1
 800a87a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68da      	ldr	r2, [r3, #12]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a1b      	ldr	r3, [r3, #32]
 800a89c:	697a      	ldr	r2, [r7, #20]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	697a      	ldr	r2, [r7, #20]
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4aa7      	ldr	r2, [pc, #668]	; (800ab58 <UART_SetConfig+0x318>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d120      	bne.n	800a902 <UART_SetConfig+0xc2>
 800a8c0:	4ba6      	ldr	r3, [pc, #664]	; (800ab5c <UART_SetConfig+0x31c>)
 800a8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c4:	f003 0303 	and.w	r3, r3, #3
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d817      	bhi.n	800a8fc <UART_SetConfig+0xbc>
 800a8cc:	a201      	add	r2, pc, #4	; (adr r2, 800a8d4 <UART_SetConfig+0x94>)
 800a8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d2:	bf00      	nop
 800a8d4:	0800a8e5 	.word	0x0800a8e5
 800a8d8:	0800a8f1 	.word	0x0800a8f1
 800a8dc:	0800a8f7 	.word	0x0800a8f7
 800a8e0:	0800a8eb 	.word	0x0800a8eb
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	77fb      	strb	r3, [r7, #31]
 800a8e8:	e0b5      	b.n	800aa56 <UART_SetConfig+0x216>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	77fb      	strb	r3, [r7, #31]
 800a8ee:	e0b2      	b.n	800aa56 <UART_SetConfig+0x216>
 800a8f0:	2304      	movs	r3, #4
 800a8f2:	77fb      	strb	r3, [r7, #31]
 800a8f4:	e0af      	b.n	800aa56 <UART_SetConfig+0x216>
 800a8f6:	2308      	movs	r3, #8
 800a8f8:	77fb      	strb	r3, [r7, #31]
 800a8fa:	e0ac      	b.n	800aa56 <UART_SetConfig+0x216>
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	77fb      	strb	r3, [r7, #31]
 800a900:	e0a9      	b.n	800aa56 <UART_SetConfig+0x216>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a96      	ldr	r2, [pc, #600]	; (800ab60 <UART_SetConfig+0x320>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d124      	bne.n	800a956 <UART_SetConfig+0x116>
 800a90c:	4b93      	ldr	r3, [pc, #588]	; (800ab5c <UART_SetConfig+0x31c>)
 800a90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a914:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a918:	d011      	beq.n	800a93e <UART_SetConfig+0xfe>
 800a91a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a91e:	d817      	bhi.n	800a950 <UART_SetConfig+0x110>
 800a920:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a924:	d011      	beq.n	800a94a <UART_SetConfig+0x10a>
 800a926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a92a:	d811      	bhi.n	800a950 <UART_SetConfig+0x110>
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d003      	beq.n	800a938 <UART_SetConfig+0xf8>
 800a930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a934:	d006      	beq.n	800a944 <UART_SetConfig+0x104>
 800a936:	e00b      	b.n	800a950 <UART_SetConfig+0x110>
 800a938:	2300      	movs	r3, #0
 800a93a:	77fb      	strb	r3, [r7, #31]
 800a93c:	e08b      	b.n	800aa56 <UART_SetConfig+0x216>
 800a93e:	2302      	movs	r3, #2
 800a940:	77fb      	strb	r3, [r7, #31]
 800a942:	e088      	b.n	800aa56 <UART_SetConfig+0x216>
 800a944:	2304      	movs	r3, #4
 800a946:	77fb      	strb	r3, [r7, #31]
 800a948:	e085      	b.n	800aa56 <UART_SetConfig+0x216>
 800a94a:	2308      	movs	r3, #8
 800a94c:	77fb      	strb	r3, [r7, #31]
 800a94e:	e082      	b.n	800aa56 <UART_SetConfig+0x216>
 800a950:	2310      	movs	r3, #16
 800a952:	77fb      	strb	r3, [r7, #31]
 800a954:	e07f      	b.n	800aa56 <UART_SetConfig+0x216>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a82      	ldr	r2, [pc, #520]	; (800ab64 <UART_SetConfig+0x324>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d124      	bne.n	800a9aa <UART_SetConfig+0x16a>
 800a960:	4b7e      	ldr	r3, [pc, #504]	; (800ab5c <UART_SetConfig+0x31c>)
 800a962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a964:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a968:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a96c:	d011      	beq.n	800a992 <UART_SetConfig+0x152>
 800a96e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a972:	d817      	bhi.n	800a9a4 <UART_SetConfig+0x164>
 800a974:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a978:	d011      	beq.n	800a99e <UART_SetConfig+0x15e>
 800a97a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a97e:	d811      	bhi.n	800a9a4 <UART_SetConfig+0x164>
 800a980:	2b00      	cmp	r3, #0
 800a982:	d003      	beq.n	800a98c <UART_SetConfig+0x14c>
 800a984:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a988:	d006      	beq.n	800a998 <UART_SetConfig+0x158>
 800a98a:	e00b      	b.n	800a9a4 <UART_SetConfig+0x164>
 800a98c:	2300      	movs	r3, #0
 800a98e:	77fb      	strb	r3, [r7, #31]
 800a990:	e061      	b.n	800aa56 <UART_SetConfig+0x216>
 800a992:	2302      	movs	r3, #2
 800a994:	77fb      	strb	r3, [r7, #31]
 800a996:	e05e      	b.n	800aa56 <UART_SetConfig+0x216>
 800a998:	2304      	movs	r3, #4
 800a99a:	77fb      	strb	r3, [r7, #31]
 800a99c:	e05b      	b.n	800aa56 <UART_SetConfig+0x216>
 800a99e:	2308      	movs	r3, #8
 800a9a0:	77fb      	strb	r3, [r7, #31]
 800a9a2:	e058      	b.n	800aa56 <UART_SetConfig+0x216>
 800a9a4:	2310      	movs	r3, #16
 800a9a6:	77fb      	strb	r3, [r7, #31]
 800a9a8:	e055      	b.n	800aa56 <UART_SetConfig+0x216>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a6e      	ldr	r2, [pc, #440]	; (800ab68 <UART_SetConfig+0x328>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d124      	bne.n	800a9fe <UART_SetConfig+0x1be>
 800a9b4:	4b69      	ldr	r3, [pc, #420]	; (800ab5c <UART_SetConfig+0x31c>)
 800a9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a9bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9c0:	d011      	beq.n	800a9e6 <UART_SetConfig+0x1a6>
 800a9c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9c6:	d817      	bhi.n	800a9f8 <UART_SetConfig+0x1b8>
 800a9c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9cc:	d011      	beq.n	800a9f2 <UART_SetConfig+0x1b2>
 800a9ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9d2:	d811      	bhi.n	800a9f8 <UART_SetConfig+0x1b8>
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d003      	beq.n	800a9e0 <UART_SetConfig+0x1a0>
 800a9d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9dc:	d006      	beq.n	800a9ec <UART_SetConfig+0x1ac>
 800a9de:	e00b      	b.n	800a9f8 <UART_SetConfig+0x1b8>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	77fb      	strb	r3, [r7, #31]
 800a9e4:	e037      	b.n	800aa56 <UART_SetConfig+0x216>
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	77fb      	strb	r3, [r7, #31]
 800a9ea:	e034      	b.n	800aa56 <UART_SetConfig+0x216>
 800a9ec:	2304      	movs	r3, #4
 800a9ee:	77fb      	strb	r3, [r7, #31]
 800a9f0:	e031      	b.n	800aa56 <UART_SetConfig+0x216>
 800a9f2:	2308      	movs	r3, #8
 800a9f4:	77fb      	strb	r3, [r7, #31]
 800a9f6:	e02e      	b.n	800aa56 <UART_SetConfig+0x216>
 800a9f8:	2310      	movs	r3, #16
 800a9fa:	77fb      	strb	r3, [r7, #31]
 800a9fc:	e02b      	b.n	800aa56 <UART_SetConfig+0x216>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a5a      	ldr	r2, [pc, #360]	; (800ab6c <UART_SetConfig+0x32c>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d124      	bne.n	800aa52 <UART_SetConfig+0x212>
 800aa08:	4b54      	ldr	r3, [pc, #336]	; (800ab5c <UART_SetConfig+0x31c>)
 800aa0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800aa10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800aa14:	d011      	beq.n	800aa3a <UART_SetConfig+0x1fa>
 800aa16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800aa1a:	d817      	bhi.n	800aa4c <UART_SetConfig+0x20c>
 800aa1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa20:	d011      	beq.n	800aa46 <UART_SetConfig+0x206>
 800aa22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa26:	d811      	bhi.n	800aa4c <UART_SetConfig+0x20c>
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d003      	beq.n	800aa34 <UART_SetConfig+0x1f4>
 800aa2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa30:	d006      	beq.n	800aa40 <UART_SetConfig+0x200>
 800aa32:	e00b      	b.n	800aa4c <UART_SetConfig+0x20c>
 800aa34:	2300      	movs	r3, #0
 800aa36:	77fb      	strb	r3, [r7, #31]
 800aa38:	e00d      	b.n	800aa56 <UART_SetConfig+0x216>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	77fb      	strb	r3, [r7, #31]
 800aa3e:	e00a      	b.n	800aa56 <UART_SetConfig+0x216>
 800aa40:	2304      	movs	r3, #4
 800aa42:	77fb      	strb	r3, [r7, #31]
 800aa44:	e007      	b.n	800aa56 <UART_SetConfig+0x216>
 800aa46:	2308      	movs	r3, #8
 800aa48:	77fb      	strb	r3, [r7, #31]
 800aa4a:	e004      	b.n	800aa56 <UART_SetConfig+0x216>
 800aa4c:	2310      	movs	r3, #16
 800aa4e:	77fb      	strb	r3, [r7, #31]
 800aa50:	e001      	b.n	800aa56 <UART_SetConfig+0x216>
 800aa52:	2310      	movs	r3, #16
 800aa54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	69db      	ldr	r3, [r3, #28]
 800aa5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa5e:	d15b      	bne.n	800ab18 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800aa60:	7ffb      	ldrb	r3, [r7, #31]
 800aa62:	2b08      	cmp	r3, #8
 800aa64:	d827      	bhi.n	800aab6 <UART_SetConfig+0x276>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <UART_SetConfig+0x22c>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aa91 	.word	0x0800aa91
 800aa70:	0800aa99 	.word	0x0800aa99
 800aa74:	0800aaa1 	.word	0x0800aaa1
 800aa78:	0800aab7 	.word	0x0800aab7
 800aa7c:	0800aaa7 	.word	0x0800aaa7
 800aa80:	0800aab7 	.word	0x0800aab7
 800aa84:	0800aab7 	.word	0x0800aab7
 800aa88:	0800aab7 	.word	0x0800aab7
 800aa8c:	0800aaaf 	.word	0x0800aaaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa90:	f7ff fc0a 	bl	800a2a8 <HAL_RCC_GetPCLK1Freq>
 800aa94:	61b8      	str	r0, [r7, #24]
        break;
 800aa96:	e013      	b.n	800aac0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa98:	f7ff fc28 	bl	800a2ec <HAL_RCC_GetPCLK2Freq>
 800aa9c:	61b8      	str	r0, [r7, #24]
        break;
 800aa9e:	e00f      	b.n	800aac0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aaa0:	4b33      	ldr	r3, [pc, #204]	; (800ab70 <UART_SetConfig+0x330>)
 800aaa2:	61bb      	str	r3, [r7, #24]
        break;
 800aaa4:	e00c      	b.n	800aac0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aaa6:	f7ff fb89 	bl	800a1bc <HAL_RCC_GetSysClockFreq>
 800aaaa:	61b8      	str	r0, [r7, #24]
        break;
 800aaac:	e008      	b.n	800aac0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aab2:	61bb      	str	r3, [r7, #24]
        break;
 800aab4:	e004      	b.n	800aac0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800aab6:	2300      	movs	r3, #0
 800aab8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	77bb      	strb	r3, [r7, #30]
        break;
 800aabe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 8082 	beq.w	800abcc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	005a      	lsls	r2, r3, #1
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	085b      	lsrs	r3, r3, #1
 800aad2:	441a      	add	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aadc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	2b0f      	cmp	r3, #15
 800aae2:	d916      	bls.n	800ab12 <UART_SetConfig+0x2d2>
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaea:	d212      	bcs.n	800ab12 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	f023 030f 	bic.w	r3, r3, #15
 800aaf4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	085b      	lsrs	r3, r3, #1
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	f003 0307 	and.w	r3, r3, #7
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	89fb      	ldrh	r3, [r7, #14]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	89fa      	ldrh	r2, [r7, #14]
 800ab0e:	60da      	str	r2, [r3, #12]
 800ab10:	e05c      	b.n	800abcc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	77bb      	strb	r3, [r7, #30]
 800ab16:	e059      	b.n	800abcc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab18:	7ffb      	ldrb	r3, [r7, #31]
 800ab1a:	2b08      	cmp	r3, #8
 800ab1c:	d835      	bhi.n	800ab8a <UART_SetConfig+0x34a>
 800ab1e:	a201      	add	r2, pc, #4	; (adr r2, 800ab24 <UART_SetConfig+0x2e4>)
 800ab20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab24:	0800ab49 	.word	0x0800ab49
 800ab28:	0800ab51 	.word	0x0800ab51
 800ab2c:	0800ab75 	.word	0x0800ab75
 800ab30:	0800ab8b 	.word	0x0800ab8b
 800ab34:	0800ab7b 	.word	0x0800ab7b
 800ab38:	0800ab8b 	.word	0x0800ab8b
 800ab3c:	0800ab8b 	.word	0x0800ab8b
 800ab40:	0800ab8b 	.word	0x0800ab8b
 800ab44:	0800ab83 	.word	0x0800ab83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab48:	f7ff fbae 	bl	800a2a8 <HAL_RCC_GetPCLK1Freq>
 800ab4c:	61b8      	str	r0, [r7, #24]
        break;
 800ab4e:	e021      	b.n	800ab94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab50:	f7ff fbcc 	bl	800a2ec <HAL_RCC_GetPCLK2Freq>
 800ab54:	61b8      	str	r0, [r7, #24]
        break;
 800ab56:	e01d      	b.n	800ab94 <UART_SetConfig+0x354>
 800ab58:	40013800 	.word	0x40013800
 800ab5c:	40021000 	.word	0x40021000
 800ab60:	40004400 	.word	0x40004400
 800ab64:	40004800 	.word	0x40004800
 800ab68:	40004c00 	.word	0x40004c00
 800ab6c:	40005000 	.word	0x40005000
 800ab70:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab74:	4b1b      	ldr	r3, [pc, #108]	; (800abe4 <UART_SetConfig+0x3a4>)
 800ab76:	61bb      	str	r3, [r7, #24]
        break;
 800ab78:	e00c      	b.n	800ab94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab7a:	f7ff fb1f 	bl	800a1bc <HAL_RCC_GetSysClockFreq>
 800ab7e:	61b8      	str	r0, [r7, #24]
        break;
 800ab80:	e008      	b.n	800ab94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab86:	61bb      	str	r3, [r7, #24]
        break;
 800ab88:	e004      	b.n	800ab94 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	77bb      	strb	r3, [r7, #30]
        break;
 800ab92:	bf00      	nop
    }

    if (pclk != 0U)
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d018      	beq.n	800abcc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	085a      	lsrs	r2, r3, #1
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	441a      	add	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b0f      	cmp	r3, #15
 800abb2:	d909      	bls.n	800abc8 <UART_SetConfig+0x388>
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abba:	d205      	bcs.n	800abc8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	60da      	str	r2, [r3, #12]
 800abc6:	e001      	b.n	800abcc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800abd8:	7fbb      	ldrb	r3, [r7, #30]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3720      	adds	r7, #32
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	007a1200 	.word	0x007a1200

0800abe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00a      	beq.n	800ac12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac16:	f003 0302 	and.w	r3, r3, #2
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00a      	beq.n	800ac34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	430a      	orrs	r2, r1
 800ac32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	f003 0304 	and.w	r3, r3, #4
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00a      	beq.n	800ac56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	430a      	orrs	r2, r1
 800ac54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	f003 0308 	and.w	r3, r3, #8
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00a      	beq.n	800ac78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	430a      	orrs	r2, r1
 800ac76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7c:	f003 0310 	and.w	r3, r3, #16
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00a      	beq.n	800ac9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	430a      	orrs	r2, r1
 800ac98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9e:	f003 0320 	and.w	r3, r3, #32
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	430a      	orrs	r2, r1
 800acba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d01a      	beq.n	800acfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ace6:	d10a      	bne.n	800acfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	430a      	orrs	r2, r1
 800acfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00a      	beq.n	800ad20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	430a      	orrs	r2, r1
 800ad1e:	605a      	str	r2, [r3, #4]
  }
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b098      	sub	sp, #96	; 0x60
 800ad30:	af02      	add	r7, sp, #8
 800ad32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad3c:	f7fd fddc 	bl	80088f8 <HAL_GetTick>
 800ad40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 0308 	and.w	r3, r3, #8
 800ad4c:	2b08      	cmp	r3, #8
 800ad4e:	d12e      	bne.n	800adae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f88c 	bl	800ae7c <UART_WaitOnFlagUntilTimeout>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d021      	beq.n	800adae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	e853 3f00 	ldrex	r3, [r3]
 800ad76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad7e:	653b      	str	r3, [r7, #80]	; 0x50
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad88:	647b      	str	r3, [r7, #68]	; 0x44
 800ad8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad90:	e841 2300 	strex	r3, r2, [r1]
 800ad94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1e6      	bne.n	800ad6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2220      	movs	r2, #32
 800ada0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e062      	b.n	800ae74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d149      	bne.n	800ae50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adc4:	2200      	movs	r2, #0
 800adc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f856 	bl	800ae7c <UART_WaitOnFlagUntilTimeout>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d03c      	beq.n	800ae50 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adde:	e853 3f00 	ldrex	r3, [r3]
 800ade2:	623b      	str	r3, [r7, #32]
   return(result);
 800ade4:	6a3b      	ldr	r3, [r7, #32]
 800ade6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	461a      	mov	r2, r3
 800adf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf4:	633b      	str	r3, [r7, #48]	; 0x30
 800adf6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adfc:	e841 2300 	strex	r3, r2, [r1]
 800ae00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1e6      	bne.n	800add6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	3308      	adds	r3, #8
 800ae0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	e853 3f00 	ldrex	r3, [r3]
 800ae16:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f023 0301 	bic.w	r3, r3, #1
 800ae1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3308      	adds	r3, #8
 800ae26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae28:	61fa      	str	r2, [r7, #28]
 800ae2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2c:	69b9      	ldr	r1, [r7, #24]
 800ae2e:	69fa      	ldr	r2, [r7, #28]
 800ae30:	e841 2300 	strex	r3, r2, [r1]
 800ae34:	617b      	str	r3, [r7, #20]
   return(result);
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e5      	bne.n	800ae08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2220      	movs	r2, #32
 800ae40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e011      	b.n	800ae74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2220      	movs	r2, #32
 800ae54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2220      	movs	r2, #32
 800ae5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3758      	adds	r7, #88	; 0x58
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	603b      	str	r3, [r7, #0]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae8c:	e049      	b.n	800af22 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae94:	d045      	beq.n	800af22 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae96:	f7fd fd2f 	bl	80088f8 <HAL_GetTick>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	69ba      	ldr	r2, [r7, #24]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d302      	bcc.n	800aeac <UART_WaitOnFlagUntilTimeout+0x30>
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e048      	b.n	800af42 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 0304 	and.w	r3, r3, #4
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d031      	beq.n	800af22 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	69db      	ldr	r3, [r3, #28]
 800aec4:	f003 0308 	and.w	r3, r3, #8
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d110      	bne.n	800aeee <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2208      	movs	r2, #8
 800aed2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f000 f838 	bl	800af4a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2208      	movs	r2, #8
 800aede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e029      	b.n	800af42 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	69db      	ldr	r3, [r3, #28]
 800aef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aefc:	d111      	bne.n	800af22 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f000 f81e 	bl	800af4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2220      	movs	r2, #32
 800af12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e00f      	b.n	800af42 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	69da      	ldr	r2, [r3, #28]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	4013      	ands	r3, r2
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	429a      	cmp	r2, r3
 800af30:	bf0c      	ite	eq
 800af32:	2301      	moveq	r3, #1
 800af34:	2300      	movne	r3, #0
 800af36:	b2db      	uxtb	r3, r3
 800af38:	461a      	mov	r2, r3
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d0a6      	beq.n	800ae8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af4a:	b480      	push	{r7}
 800af4c:	b095      	sub	sp, #84	; 0x54
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5a:	e853 3f00 	ldrex	r3, [r3]
 800af5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	461a      	mov	r2, r3
 800af6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af70:	643b      	str	r3, [r7, #64]	; 0x40
 800af72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af78:	e841 2300 	strex	r3, r2, [r1]
 800af7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1e6      	bne.n	800af52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3308      	adds	r3, #8
 800af8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	e853 3f00 	ldrex	r3, [r3]
 800af92:	61fb      	str	r3, [r7, #28]
   return(result);
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	f023 0301 	bic.w	r3, r3, #1
 800af9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	3308      	adds	r3, #8
 800afa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afac:	e841 2300 	strex	r3, r2, [r1]
 800afb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1e5      	bne.n	800af84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d118      	bne.n	800aff2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	e853 3f00 	ldrex	r3, [r3]
 800afcc:	60bb      	str	r3, [r7, #8]
   return(result);
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	f023 0310 	bic.w	r3, r3, #16
 800afd4:	647b      	str	r3, [r7, #68]	; 0x44
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afde:	61bb      	str	r3, [r7, #24]
 800afe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe2:	6979      	ldr	r1, [r7, #20]
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	e841 2300 	strex	r3, r2, [r1]
 800afea:	613b      	str	r3, [r7, #16]
   return(result);
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e6      	bne.n	800afc0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2220      	movs	r2, #32
 800aff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b006:	bf00      	nop
 800b008:	3754      	adds	r7, #84	; 0x54
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
	...

0800b014 <__errno>:
 800b014:	4b01      	ldr	r3, [pc, #4]	; (800b01c <__errno+0x8>)
 800b016:	6818      	ldr	r0, [r3, #0]
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	2000000c 	.word	0x2000000c

0800b020 <__libc_init_array>:
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	4d0d      	ldr	r5, [pc, #52]	; (800b058 <__libc_init_array+0x38>)
 800b024:	4c0d      	ldr	r4, [pc, #52]	; (800b05c <__libc_init_array+0x3c>)
 800b026:	1b64      	subs	r4, r4, r5
 800b028:	10a4      	asrs	r4, r4, #2
 800b02a:	2600      	movs	r6, #0
 800b02c:	42a6      	cmp	r6, r4
 800b02e:	d109      	bne.n	800b044 <__libc_init_array+0x24>
 800b030:	4d0b      	ldr	r5, [pc, #44]	; (800b060 <__libc_init_array+0x40>)
 800b032:	4c0c      	ldr	r4, [pc, #48]	; (800b064 <__libc_init_array+0x44>)
 800b034:	f000 ffae 	bl	800bf94 <_init>
 800b038:	1b64      	subs	r4, r4, r5
 800b03a:	10a4      	asrs	r4, r4, #2
 800b03c:	2600      	movs	r6, #0
 800b03e:	42a6      	cmp	r6, r4
 800b040:	d105      	bne.n	800b04e <__libc_init_array+0x2e>
 800b042:	bd70      	pop	{r4, r5, r6, pc}
 800b044:	f855 3b04 	ldr.w	r3, [r5], #4
 800b048:	4798      	blx	r3
 800b04a:	3601      	adds	r6, #1
 800b04c:	e7ee      	b.n	800b02c <__libc_init_array+0xc>
 800b04e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b052:	4798      	blx	r3
 800b054:	3601      	adds	r6, #1
 800b056:	e7f2      	b.n	800b03e <__libc_init_array+0x1e>
 800b058:	0800c09c 	.word	0x0800c09c
 800b05c:	0800c09c 	.word	0x0800c09c
 800b060:	0800c09c 	.word	0x0800c09c
 800b064:	0800c0a0 	.word	0x0800c0a0

0800b068 <memset>:
 800b068:	4402      	add	r2, r0
 800b06a:	4603      	mov	r3, r0
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d100      	bne.n	800b072 <memset+0xa>
 800b070:	4770      	bx	lr
 800b072:	f803 1b01 	strb.w	r1, [r3], #1
 800b076:	e7f9      	b.n	800b06c <memset+0x4>

0800b078 <iprintf>:
 800b078:	b40f      	push	{r0, r1, r2, r3}
 800b07a:	4b0a      	ldr	r3, [pc, #40]	; (800b0a4 <iprintf+0x2c>)
 800b07c:	b513      	push	{r0, r1, r4, lr}
 800b07e:	681c      	ldr	r4, [r3, #0]
 800b080:	b124      	cbz	r4, 800b08c <iprintf+0x14>
 800b082:	69a3      	ldr	r3, [r4, #24]
 800b084:	b913      	cbnz	r3, 800b08c <iprintf+0x14>
 800b086:	4620      	mov	r0, r4
 800b088:	f000 f866 	bl	800b158 <__sinit>
 800b08c:	ab05      	add	r3, sp, #20
 800b08e:	9a04      	ldr	r2, [sp, #16]
 800b090:	68a1      	ldr	r1, [r4, #8]
 800b092:	9301      	str	r3, [sp, #4]
 800b094:	4620      	mov	r0, r4
 800b096:	f000 f9bd 	bl	800b414 <_vfiprintf_r>
 800b09a:	b002      	add	sp, #8
 800b09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0a0:	b004      	add	sp, #16
 800b0a2:	4770      	bx	lr
 800b0a4:	2000000c 	.word	0x2000000c

0800b0a8 <std>:
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	b510      	push	{r4, lr}
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0b6:	6083      	str	r3, [r0, #8]
 800b0b8:	8181      	strh	r1, [r0, #12]
 800b0ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b0bc:	81c2      	strh	r2, [r0, #14]
 800b0be:	6183      	str	r3, [r0, #24]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	2208      	movs	r2, #8
 800b0c4:	305c      	adds	r0, #92	; 0x5c
 800b0c6:	f7ff ffcf 	bl	800b068 <memset>
 800b0ca:	4b05      	ldr	r3, [pc, #20]	; (800b0e0 <std+0x38>)
 800b0cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b0ce:	4b05      	ldr	r3, [pc, #20]	; (800b0e4 <std+0x3c>)
 800b0d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0d2:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <std+0x40>)
 800b0d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0d6:	4b05      	ldr	r3, [pc, #20]	; (800b0ec <std+0x44>)
 800b0d8:	6224      	str	r4, [r4, #32]
 800b0da:	6323      	str	r3, [r4, #48]	; 0x30
 800b0dc:	bd10      	pop	{r4, pc}
 800b0de:	bf00      	nop
 800b0e0:	0800b9bd 	.word	0x0800b9bd
 800b0e4:	0800b9df 	.word	0x0800b9df
 800b0e8:	0800ba17 	.word	0x0800ba17
 800b0ec:	0800ba3b 	.word	0x0800ba3b

0800b0f0 <_cleanup_r>:
 800b0f0:	4901      	ldr	r1, [pc, #4]	; (800b0f8 <_cleanup_r+0x8>)
 800b0f2:	f000 b8af 	b.w	800b254 <_fwalk_reent>
 800b0f6:	bf00      	nop
 800b0f8:	0800bd15 	.word	0x0800bd15

0800b0fc <__sfmoreglue>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	2268      	movs	r2, #104	; 0x68
 800b100:	1e4d      	subs	r5, r1, #1
 800b102:	4355      	muls	r5, r2
 800b104:	460e      	mov	r6, r1
 800b106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b10a:	f000 f8e5 	bl	800b2d8 <_malloc_r>
 800b10e:	4604      	mov	r4, r0
 800b110:	b140      	cbz	r0, 800b124 <__sfmoreglue+0x28>
 800b112:	2100      	movs	r1, #0
 800b114:	e9c0 1600 	strd	r1, r6, [r0]
 800b118:	300c      	adds	r0, #12
 800b11a:	60a0      	str	r0, [r4, #8]
 800b11c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b120:	f7ff ffa2 	bl	800b068 <memset>
 800b124:	4620      	mov	r0, r4
 800b126:	bd70      	pop	{r4, r5, r6, pc}

0800b128 <__sfp_lock_acquire>:
 800b128:	4801      	ldr	r0, [pc, #4]	; (800b130 <__sfp_lock_acquire+0x8>)
 800b12a:	f000 b8b3 	b.w	800b294 <__retarget_lock_acquire_recursive>
 800b12e:	bf00      	nop
 800b130:	200001a5 	.word	0x200001a5

0800b134 <__sfp_lock_release>:
 800b134:	4801      	ldr	r0, [pc, #4]	; (800b13c <__sfp_lock_release+0x8>)
 800b136:	f000 b8ae 	b.w	800b296 <__retarget_lock_release_recursive>
 800b13a:	bf00      	nop
 800b13c:	200001a5 	.word	0x200001a5

0800b140 <__sinit_lock_acquire>:
 800b140:	4801      	ldr	r0, [pc, #4]	; (800b148 <__sinit_lock_acquire+0x8>)
 800b142:	f000 b8a7 	b.w	800b294 <__retarget_lock_acquire_recursive>
 800b146:	bf00      	nop
 800b148:	200001a6 	.word	0x200001a6

0800b14c <__sinit_lock_release>:
 800b14c:	4801      	ldr	r0, [pc, #4]	; (800b154 <__sinit_lock_release+0x8>)
 800b14e:	f000 b8a2 	b.w	800b296 <__retarget_lock_release_recursive>
 800b152:	bf00      	nop
 800b154:	200001a6 	.word	0x200001a6

0800b158 <__sinit>:
 800b158:	b510      	push	{r4, lr}
 800b15a:	4604      	mov	r4, r0
 800b15c:	f7ff fff0 	bl	800b140 <__sinit_lock_acquire>
 800b160:	69a3      	ldr	r3, [r4, #24]
 800b162:	b11b      	cbz	r3, 800b16c <__sinit+0x14>
 800b164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b168:	f7ff bff0 	b.w	800b14c <__sinit_lock_release>
 800b16c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b170:	6523      	str	r3, [r4, #80]	; 0x50
 800b172:	4b13      	ldr	r3, [pc, #76]	; (800b1c0 <__sinit+0x68>)
 800b174:	4a13      	ldr	r2, [pc, #76]	; (800b1c4 <__sinit+0x6c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	62a2      	str	r2, [r4, #40]	; 0x28
 800b17a:	42a3      	cmp	r3, r4
 800b17c:	bf04      	itt	eq
 800b17e:	2301      	moveq	r3, #1
 800b180:	61a3      	streq	r3, [r4, #24]
 800b182:	4620      	mov	r0, r4
 800b184:	f000 f820 	bl	800b1c8 <__sfp>
 800b188:	6060      	str	r0, [r4, #4]
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 f81c 	bl	800b1c8 <__sfp>
 800b190:	60a0      	str	r0, [r4, #8]
 800b192:	4620      	mov	r0, r4
 800b194:	f000 f818 	bl	800b1c8 <__sfp>
 800b198:	2200      	movs	r2, #0
 800b19a:	60e0      	str	r0, [r4, #12]
 800b19c:	2104      	movs	r1, #4
 800b19e:	6860      	ldr	r0, [r4, #4]
 800b1a0:	f7ff ff82 	bl	800b0a8 <std>
 800b1a4:	68a0      	ldr	r0, [r4, #8]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	2109      	movs	r1, #9
 800b1aa:	f7ff ff7d 	bl	800b0a8 <std>
 800b1ae:	68e0      	ldr	r0, [r4, #12]
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	2112      	movs	r1, #18
 800b1b4:	f7ff ff78 	bl	800b0a8 <std>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	61a3      	str	r3, [r4, #24]
 800b1bc:	e7d2      	b.n	800b164 <__sinit+0xc>
 800b1be:	bf00      	nop
 800b1c0:	0800c004 	.word	0x0800c004
 800b1c4:	0800b0f1 	.word	0x0800b0f1

0800b1c8 <__sfp>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	4607      	mov	r7, r0
 800b1cc:	f7ff ffac 	bl	800b128 <__sfp_lock_acquire>
 800b1d0:	4b1e      	ldr	r3, [pc, #120]	; (800b24c <__sfp+0x84>)
 800b1d2:	681e      	ldr	r6, [r3, #0]
 800b1d4:	69b3      	ldr	r3, [r6, #24]
 800b1d6:	b913      	cbnz	r3, 800b1de <__sfp+0x16>
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7ff ffbd 	bl	800b158 <__sinit>
 800b1de:	3648      	adds	r6, #72	; 0x48
 800b1e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	d503      	bpl.n	800b1f0 <__sfp+0x28>
 800b1e8:	6833      	ldr	r3, [r6, #0]
 800b1ea:	b30b      	cbz	r3, 800b230 <__sfp+0x68>
 800b1ec:	6836      	ldr	r6, [r6, #0]
 800b1ee:	e7f7      	b.n	800b1e0 <__sfp+0x18>
 800b1f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1f4:	b9d5      	cbnz	r5, 800b22c <__sfp+0x64>
 800b1f6:	4b16      	ldr	r3, [pc, #88]	; (800b250 <__sfp+0x88>)
 800b1f8:	60e3      	str	r3, [r4, #12]
 800b1fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1fe:	6665      	str	r5, [r4, #100]	; 0x64
 800b200:	f000 f847 	bl	800b292 <__retarget_lock_init_recursive>
 800b204:	f7ff ff96 	bl	800b134 <__sfp_lock_release>
 800b208:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b20c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b210:	6025      	str	r5, [r4, #0]
 800b212:	61a5      	str	r5, [r4, #24]
 800b214:	2208      	movs	r2, #8
 800b216:	4629      	mov	r1, r5
 800b218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b21c:	f7ff ff24 	bl	800b068 <memset>
 800b220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b224:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b228:	4620      	mov	r0, r4
 800b22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b22c:	3468      	adds	r4, #104	; 0x68
 800b22e:	e7d9      	b.n	800b1e4 <__sfp+0x1c>
 800b230:	2104      	movs	r1, #4
 800b232:	4638      	mov	r0, r7
 800b234:	f7ff ff62 	bl	800b0fc <__sfmoreglue>
 800b238:	4604      	mov	r4, r0
 800b23a:	6030      	str	r0, [r6, #0]
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d1d5      	bne.n	800b1ec <__sfp+0x24>
 800b240:	f7ff ff78 	bl	800b134 <__sfp_lock_release>
 800b244:	230c      	movs	r3, #12
 800b246:	603b      	str	r3, [r7, #0]
 800b248:	e7ee      	b.n	800b228 <__sfp+0x60>
 800b24a:	bf00      	nop
 800b24c:	0800c004 	.word	0x0800c004
 800b250:	ffff0001 	.word	0xffff0001

0800b254 <_fwalk_reent>:
 800b254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b258:	4606      	mov	r6, r0
 800b25a:	4688      	mov	r8, r1
 800b25c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b260:	2700      	movs	r7, #0
 800b262:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b266:	f1b9 0901 	subs.w	r9, r9, #1
 800b26a:	d505      	bpl.n	800b278 <_fwalk_reent+0x24>
 800b26c:	6824      	ldr	r4, [r4, #0]
 800b26e:	2c00      	cmp	r4, #0
 800b270:	d1f7      	bne.n	800b262 <_fwalk_reent+0xe>
 800b272:	4638      	mov	r0, r7
 800b274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b278:	89ab      	ldrh	r3, [r5, #12]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d907      	bls.n	800b28e <_fwalk_reent+0x3a>
 800b27e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b282:	3301      	adds	r3, #1
 800b284:	d003      	beq.n	800b28e <_fwalk_reent+0x3a>
 800b286:	4629      	mov	r1, r5
 800b288:	4630      	mov	r0, r6
 800b28a:	47c0      	blx	r8
 800b28c:	4307      	orrs	r7, r0
 800b28e:	3568      	adds	r5, #104	; 0x68
 800b290:	e7e9      	b.n	800b266 <_fwalk_reent+0x12>

0800b292 <__retarget_lock_init_recursive>:
 800b292:	4770      	bx	lr

0800b294 <__retarget_lock_acquire_recursive>:
 800b294:	4770      	bx	lr

0800b296 <__retarget_lock_release_recursive>:
 800b296:	4770      	bx	lr

0800b298 <sbrk_aligned>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	4e0e      	ldr	r6, [pc, #56]	; (800b2d4 <sbrk_aligned+0x3c>)
 800b29c:	460c      	mov	r4, r1
 800b29e:	6831      	ldr	r1, [r6, #0]
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	b911      	cbnz	r1, 800b2aa <sbrk_aligned+0x12>
 800b2a4:	f000 fb7a 	bl	800b99c <_sbrk_r>
 800b2a8:	6030      	str	r0, [r6, #0]
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	f000 fb75 	bl	800b99c <_sbrk_r>
 800b2b2:	1c43      	adds	r3, r0, #1
 800b2b4:	d00a      	beq.n	800b2cc <sbrk_aligned+0x34>
 800b2b6:	1cc4      	adds	r4, r0, #3
 800b2b8:	f024 0403 	bic.w	r4, r4, #3
 800b2bc:	42a0      	cmp	r0, r4
 800b2be:	d007      	beq.n	800b2d0 <sbrk_aligned+0x38>
 800b2c0:	1a21      	subs	r1, r4, r0
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f000 fb6a 	bl	800b99c <_sbrk_r>
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d101      	bne.n	800b2d0 <sbrk_aligned+0x38>
 800b2cc:	f04f 34ff 	mov.w	r4, #4294967295
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}
 800b2d4:	200001ac 	.word	0x200001ac

0800b2d8 <_malloc_r>:
 800b2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2dc:	1ccd      	adds	r5, r1, #3
 800b2de:	f025 0503 	bic.w	r5, r5, #3
 800b2e2:	3508      	adds	r5, #8
 800b2e4:	2d0c      	cmp	r5, #12
 800b2e6:	bf38      	it	cc
 800b2e8:	250c      	movcc	r5, #12
 800b2ea:	2d00      	cmp	r5, #0
 800b2ec:	4607      	mov	r7, r0
 800b2ee:	db01      	blt.n	800b2f4 <_malloc_r+0x1c>
 800b2f0:	42a9      	cmp	r1, r5
 800b2f2:	d905      	bls.n	800b300 <_malloc_r+0x28>
 800b2f4:	230c      	movs	r3, #12
 800b2f6:	603b      	str	r3, [r7, #0]
 800b2f8:	2600      	movs	r6, #0
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b300:	4e2e      	ldr	r6, [pc, #184]	; (800b3bc <_malloc_r+0xe4>)
 800b302:	f000 fdbb 	bl	800be7c <__malloc_lock>
 800b306:	6833      	ldr	r3, [r6, #0]
 800b308:	461c      	mov	r4, r3
 800b30a:	bb34      	cbnz	r4, 800b35a <_malloc_r+0x82>
 800b30c:	4629      	mov	r1, r5
 800b30e:	4638      	mov	r0, r7
 800b310:	f7ff ffc2 	bl	800b298 <sbrk_aligned>
 800b314:	1c43      	adds	r3, r0, #1
 800b316:	4604      	mov	r4, r0
 800b318:	d14d      	bne.n	800b3b6 <_malloc_r+0xde>
 800b31a:	6834      	ldr	r4, [r6, #0]
 800b31c:	4626      	mov	r6, r4
 800b31e:	2e00      	cmp	r6, #0
 800b320:	d140      	bne.n	800b3a4 <_malloc_r+0xcc>
 800b322:	6823      	ldr	r3, [r4, #0]
 800b324:	4631      	mov	r1, r6
 800b326:	4638      	mov	r0, r7
 800b328:	eb04 0803 	add.w	r8, r4, r3
 800b32c:	f000 fb36 	bl	800b99c <_sbrk_r>
 800b330:	4580      	cmp	r8, r0
 800b332:	d13a      	bne.n	800b3aa <_malloc_r+0xd2>
 800b334:	6821      	ldr	r1, [r4, #0]
 800b336:	3503      	adds	r5, #3
 800b338:	1a6d      	subs	r5, r5, r1
 800b33a:	f025 0503 	bic.w	r5, r5, #3
 800b33e:	3508      	adds	r5, #8
 800b340:	2d0c      	cmp	r5, #12
 800b342:	bf38      	it	cc
 800b344:	250c      	movcc	r5, #12
 800b346:	4629      	mov	r1, r5
 800b348:	4638      	mov	r0, r7
 800b34a:	f7ff ffa5 	bl	800b298 <sbrk_aligned>
 800b34e:	3001      	adds	r0, #1
 800b350:	d02b      	beq.n	800b3aa <_malloc_r+0xd2>
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	442b      	add	r3, r5
 800b356:	6023      	str	r3, [r4, #0]
 800b358:	e00e      	b.n	800b378 <_malloc_r+0xa0>
 800b35a:	6822      	ldr	r2, [r4, #0]
 800b35c:	1b52      	subs	r2, r2, r5
 800b35e:	d41e      	bmi.n	800b39e <_malloc_r+0xc6>
 800b360:	2a0b      	cmp	r2, #11
 800b362:	d916      	bls.n	800b392 <_malloc_r+0xba>
 800b364:	1961      	adds	r1, r4, r5
 800b366:	42a3      	cmp	r3, r4
 800b368:	6025      	str	r5, [r4, #0]
 800b36a:	bf18      	it	ne
 800b36c:	6059      	strne	r1, [r3, #4]
 800b36e:	6863      	ldr	r3, [r4, #4]
 800b370:	bf08      	it	eq
 800b372:	6031      	streq	r1, [r6, #0]
 800b374:	5162      	str	r2, [r4, r5]
 800b376:	604b      	str	r3, [r1, #4]
 800b378:	4638      	mov	r0, r7
 800b37a:	f104 060b 	add.w	r6, r4, #11
 800b37e:	f000 fd83 	bl	800be88 <__malloc_unlock>
 800b382:	f026 0607 	bic.w	r6, r6, #7
 800b386:	1d23      	adds	r3, r4, #4
 800b388:	1af2      	subs	r2, r6, r3
 800b38a:	d0b6      	beq.n	800b2fa <_malloc_r+0x22>
 800b38c:	1b9b      	subs	r3, r3, r6
 800b38e:	50a3      	str	r3, [r4, r2]
 800b390:	e7b3      	b.n	800b2fa <_malloc_r+0x22>
 800b392:	6862      	ldr	r2, [r4, #4]
 800b394:	42a3      	cmp	r3, r4
 800b396:	bf0c      	ite	eq
 800b398:	6032      	streq	r2, [r6, #0]
 800b39a:	605a      	strne	r2, [r3, #4]
 800b39c:	e7ec      	b.n	800b378 <_malloc_r+0xa0>
 800b39e:	4623      	mov	r3, r4
 800b3a0:	6864      	ldr	r4, [r4, #4]
 800b3a2:	e7b2      	b.n	800b30a <_malloc_r+0x32>
 800b3a4:	4634      	mov	r4, r6
 800b3a6:	6876      	ldr	r6, [r6, #4]
 800b3a8:	e7b9      	b.n	800b31e <_malloc_r+0x46>
 800b3aa:	230c      	movs	r3, #12
 800b3ac:	603b      	str	r3, [r7, #0]
 800b3ae:	4638      	mov	r0, r7
 800b3b0:	f000 fd6a 	bl	800be88 <__malloc_unlock>
 800b3b4:	e7a1      	b.n	800b2fa <_malloc_r+0x22>
 800b3b6:	6025      	str	r5, [r4, #0]
 800b3b8:	e7de      	b.n	800b378 <_malloc_r+0xa0>
 800b3ba:	bf00      	nop
 800b3bc:	200001a8 	.word	0x200001a8

0800b3c0 <__sfputc_r>:
 800b3c0:	6893      	ldr	r3, [r2, #8]
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	b410      	push	{r4}
 800b3c8:	6093      	str	r3, [r2, #8]
 800b3ca:	da08      	bge.n	800b3de <__sfputc_r+0x1e>
 800b3cc:	6994      	ldr	r4, [r2, #24]
 800b3ce:	42a3      	cmp	r3, r4
 800b3d0:	db01      	blt.n	800b3d6 <__sfputc_r+0x16>
 800b3d2:	290a      	cmp	r1, #10
 800b3d4:	d103      	bne.n	800b3de <__sfputc_r+0x1e>
 800b3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3da:	f000 bb33 	b.w	800ba44 <__swbuf_r>
 800b3de:	6813      	ldr	r3, [r2, #0]
 800b3e0:	1c58      	adds	r0, r3, #1
 800b3e2:	6010      	str	r0, [r2, #0]
 800b3e4:	7019      	strb	r1, [r3, #0]
 800b3e6:	4608      	mov	r0, r1
 800b3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <__sfputs_r>:
 800b3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f0:	4606      	mov	r6, r0
 800b3f2:	460f      	mov	r7, r1
 800b3f4:	4614      	mov	r4, r2
 800b3f6:	18d5      	adds	r5, r2, r3
 800b3f8:	42ac      	cmp	r4, r5
 800b3fa:	d101      	bne.n	800b400 <__sfputs_r+0x12>
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	e007      	b.n	800b410 <__sfputs_r+0x22>
 800b400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b404:	463a      	mov	r2, r7
 800b406:	4630      	mov	r0, r6
 800b408:	f7ff ffda 	bl	800b3c0 <__sfputc_r>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	d1f3      	bne.n	800b3f8 <__sfputs_r+0xa>
 800b410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b414 <_vfiprintf_r>:
 800b414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b418:	460d      	mov	r5, r1
 800b41a:	b09d      	sub	sp, #116	; 0x74
 800b41c:	4614      	mov	r4, r2
 800b41e:	4698      	mov	r8, r3
 800b420:	4606      	mov	r6, r0
 800b422:	b118      	cbz	r0, 800b42c <_vfiprintf_r+0x18>
 800b424:	6983      	ldr	r3, [r0, #24]
 800b426:	b90b      	cbnz	r3, 800b42c <_vfiprintf_r+0x18>
 800b428:	f7ff fe96 	bl	800b158 <__sinit>
 800b42c:	4b89      	ldr	r3, [pc, #548]	; (800b654 <_vfiprintf_r+0x240>)
 800b42e:	429d      	cmp	r5, r3
 800b430:	d11b      	bne.n	800b46a <_vfiprintf_r+0x56>
 800b432:	6875      	ldr	r5, [r6, #4]
 800b434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b436:	07d9      	lsls	r1, r3, #31
 800b438:	d405      	bmi.n	800b446 <_vfiprintf_r+0x32>
 800b43a:	89ab      	ldrh	r3, [r5, #12]
 800b43c:	059a      	lsls	r2, r3, #22
 800b43e:	d402      	bmi.n	800b446 <_vfiprintf_r+0x32>
 800b440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b442:	f7ff ff27 	bl	800b294 <__retarget_lock_acquire_recursive>
 800b446:	89ab      	ldrh	r3, [r5, #12]
 800b448:	071b      	lsls	r3, r3, #28
 800b44a:	d501      	bpl.n	800b450 <_vfiprintf_r+0x3c>
 800b44c:	692b      	ldr	r3, [r5, #16]
 800b44e:	b9eb      	cbnz	r3, 800b48c <_vfiprintf_r+0x78>
 800b450:	4629      	mov	r1, r5
 800b452:	4630      	mov	r0, r6
 800b454:	f000 fb5a 	bl	800bb0c <__swsetup_r>
 800b458:	b1c0      	cbz	r0, 800b48c <_vfiprintf_r+0x78>
 800b45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b45c:	07dc      	lsls	r4, r3, #31
 800b45e:	d50e      	bpl.n	800b47e <_vfiprintf_r+0x6a>
 800b460:	f04f 30ff 	mov.w	r0, #4294967295
 800b464:	b01d      	add	sp, #116	; 0x74
 800b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46a:	4b7b      	ldr	r3, [pc, #492]	; (800b658 <_vfiprintf_r+0x244>)
 800b46c:	429d      	cmp	r5, r3
 800b46e:	d101      	bne.n	800b474 <_vfiprintf_r+0x60>
 800b470:	68b5      	ldr	r5, [r6, #8]
 800b472:	e7df      	b.n	800b434 <_vfiprintf_r+0x20>
 800b474:	4b79      	ldr	r3, [pc, #484]	; (800b65c <_vfiprintf_r+0x248>)
 800b476:	429d      	cmp	r5, r3
 800b478:	bf08      	it	eq
 800b47a:	68f5      	ldreq	r5, [r6, #12]
 800b47c:	e7da      	b.n	800b434 <_vfiprintf_r+0x20>
 800b47e:	89ab      	ldrh	r3, [r5, #12]
 800b480:	0598      	lsls	r0, r3, #22
 800b482:	d4ed      	bmi.n	800b460 <_vfiprintf_r+0x4c>
 800b484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b486:	f7ff ff06 	bl	800b296 <__retarget_lock_release_recursive>
 800b48a:	e7e9      	b.n	800b460 <_vfiprintf_r+0x4c>
 800b48c:	2300      	movs	r3, #0
 800b48e:	9309      	str	r3, [sp, #36]	; 0x24
 800b490:	2320      	movs	r3, #32
 800b492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b496:	f8cd 800c 	str.w	r8, [sp, #12]
 800b49a:	2330      	movs	r3, #48	; 0x30
 800b49c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b660 <_vfiprintf_r+0x24c>
 800b4a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4a4:	f04f 0901 	mov.w	r9, #1
 800b4a8:	4623      	mov	r3, r4
 800b4aa:	469a      	mov	sl, r3
 800b4ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4b0:	b10a      	cbz	r2, 800b4b6 <_vfiprintf_r+0xa2>
 800b4b2:	2a25      	cmp	r2, #37	; 0x25
 800b4b4:	d1f9      	bne.n	800b4aa <_vfiprintf_r+0x96>
 800b4b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b4ba:	d00b      	beq.n	800b4d4 <_vfiprintf_r+0xc0>
 800b4bc:	465b      	mov	r3, fp
 800b4be:	4622      	mov	r2, r4
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f7ff ff93 	bl	800b3ee <__sfputs_r>
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	f000 80aa 	beq.w	800b622 <_vfiprintf_r+0x20e>
 800b4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4d0:	445a      	add	r2, fp
 800b4d2:	9209      	str	r2, [sp, #36]	; 0x24
 800b4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 80a2 	beq.w	800b622 <_vfiprintf_r+0x20e>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4e8:	f10a 0a01 	add.w	sl, sl, #1
 800b4ec:	9304      	str	r3, [sp, #16]
 800b4ee:	9307      	str	r3, [sp, #28]
 800b4f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4f4:	931a      	str	r3, [sp, #104]	; 0x68
 800b4f6:	4654      	mov	r4, sl
 800b4f8:	2205      	movs	r2, #5
 800b4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4fe:	4858      	ldr	r0, [pc, #352]	; (800b660 <_vfiprintf_r+0x24c>)
 800b500:	f7fc fe66 	bl	80081d0 <memchr>
 800b504:	9a04      	ldr	r2, [sp, #16]
 800b506:	b9d8      	cbnz	r0, 800b540 <_vfiprintf_r+0x12c>
 800b508:	06d1      	lsls	r1, r2, #27
 800b50a:	bf44      	itt	mi
 800b50c:	2320      	movmi	r3, #32
 800b50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b512:	0713      	lsls	r3, r2, #28
 800b514:	bf44      	itt	mi
 800b516:	232b      	movmi	r3, #43	; 0x2b
 800b518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b51c:	f89a 3000 	ldrb.w	r3, [sl]
 800b520:	2b2a      	cmp	r3, #42	; 0x2a
 800b522:	d015      	beq.n	800b550 <_vfiprintf_r+0x13c>
 800b524:	9a07      	ldr	r2, [sp, #28]
 800b526:	4654      	mov	r4, sl
 800b528:	2000      	movs	r0, #0
 800b52a:	f04f 0c0a 	mov.w	ip, #10
 800b52e:	4621      	mov	r1, r4
 800b530:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b534:	3b30      	subs	r3, #48	; 0x30
 800b536:	2b09      	cmp	r3, #9
 800b538:	d94e      	bls.n	800b5d8 <_vfiprintf_r+0x1c4>
 800b53a:	b1b0      	cbz	r0, 800b56a <_vfiprintf_r+0x156>
 800b53c:	9207      	str	r2, [sp, #28]
 800b53e:	e014      	b.n	800b56a <_vfiprintf_r+0x156>
 800b540:	eba0 0308 	sub.w	r3, r0, r8
 800b544:	fa09 f303 	lsl.w	r3, r9, r3
 800b548:	4313      	orrs	r3, r2
 800b54a:	9304      	str	r3, [sp, #16]
 800b54c:	46a2      	mov	sl, r4
 800b54e:	e7d2      	b.n	800b4f6 <_vfiprintf_r+0xe2>
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	1d19      	adds	r1, r3, #4
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	9103      	str	r1, [sp, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	bfbb      	ittet	lt
 800b55c:	425b      	neglt	r3, r3
 800b55e:	f042 0202 	orrlt.w	r2, r2, #2
 800b562:	9307      	strge	r3, [sp, #28]
 800b564:	9307      	strlt	r3, [sp, #28]
 800b566:	bfb8      	it	lt
 800b568:	9204      	strlt	r2, [sp, #16]
 800b56a:	7823      	ldrb	r3, [r4, #0]
 800b56c:	2b2e      	cmp	r3, #46	; 0x2e
 800b56e:	d10c      	bne.n	800b58a <_vfiprintf_r+0x176>
 800b570:	7863      	ldrb	r3, [r4, #1]
 800b572:	2b2a      	cmp	r3, #42	; 0x2a
 800b574:	d135      	bne.n	800b5e2 <_vfiprintf_r+0x1ce>
 800b576:	9b03      	ldr	r3, [sp, #12]
 800b578:	1d1a      	adds	r2, r3, #4
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	9203      	str	r2, [sp, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	bfb8      	it	lt
 800b582:	f04f 33ff 	movlt.w	r3, #4294967295
 800b586:	3402      	adds	r4, #2
 800b588:	9305      	str	r3, [sp, #20]
 800b58a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b670 <_vfiprintf_r+0x25c>
 800b58e:	7821      	ldrb	r1, [r4, #0]
 800b590:	2203      	movs	r2, #3
 800b592:	4650      	mov	r0, sl
 800b594:	f7fc fe1c 	bl	80081d0 <memchr>
 800b598:	b140      	cbz	r0, 800b5ac <_vfiprintf_r+0x198>
 800b59a:	2340      	movs	r3, #64	; 0x40
 800b59c:	eba0 000a 	sub.w	r0, r0, sl
 800b5a0:	fa03 f000 	lsl.w	r0, r3, r0
 800b5a4:	9b04      	ldr	r3, [sp, #16]
 800b5a6:	4303      	orrs	r3, r0
 800b5a8:	3401      	adds	r4, #1
 800b5aa:	9304      	str	r3, [sp, #16]
 800b5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b0:	482c      	ldr	r0, [pc, #176]	; (800b664 <_vfiprintf_r+0x250>)
 800b5b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5b6:	2206      	movs	r2, #6
 800b5b8:	f7fc fe0a 	bl	80081d0 <memchr>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d03f      	beq.n	800b640 <_vfiprintf_r+0x22c>
 800b5c0:	4b29      	ldr	r3, [pc, #164]	; (800b668 <_vfiprintf_r+0x254>)
 800b5c2:	bb1b      	cbnz	r3, 800b60c <_vfiprintf_r+0x1f8>
 800b5c4:	9b03      	ldr	r3, [sp, #12]
 800b5c6:	3307      	adds	r3, #7
 800b5c8:	f023 0307 	bic.w	r3, r3, #7
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	9303      	str	r3, [sp, #12]
 800b5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d2:	443b      	add	r3, r7
 800b5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d6:	e767      	b.n	800b4a8 <_vfiprintf_r+0x94>
 800b5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5dc:	460c      	mov	r4, r1
 800b5de:	2001      	movs	r0, #1
 800b5e0:	e7a5      	b.n	800b52e <_vfiprintf_r+0x11a>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	3401      	adds	r4, #1
 800b5e6:	9305      	str	r3, [sp, #20]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	f04f 0c0a 	mov.w	ip, #10
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5f4:	3a30      	subs	r2, #48	; 0x30
 800b5f6:	2a09      	cmp	r2, #9
 800b5f8:	d903      	bls.n	800b602 <_vfiprintf_r+0x1ee>
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0c5      	beq.n	800b58a <_vfiprintf_r+0x176>
 800b5fe:	9105      	str	r1, [sp, #20]
 800b600:	e7c3      	b.n	800b58a <_vfiprintf_r+0x176>
 800b602:	fb0c 2101 	mla	r1, ip, r1, r2
 800b606:	4604      	mov	r4, r0
 800b608:	2301      	movs	r3, #1
 800b60a:	e7f0      	b.n	800b5ee <_vfiprintf_r+0x1da>
 800b60c:	ab03      	add	r3, sp, #12
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	462a      	mov	r2, r5
 800b612:	4b16      	ldr	r3, [pc, #88]	; (800b66c <_vfiprintf_r+0x258>)
 800b614:	a904      	add	r1, sp, #16
 800b616:	4630      	mov	r0, r6
 800b618:	f3af 8000 	nop.w
 800b61c:	4607      	mov	r7, r0
 800b61e:	1c78      	adds	r0, r7, #1
 800b620:	d1d6      	bne.n	800b5d0 <_vfiprintf_r+0x1bc>
 800b622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b624:	07d9      	lsls	r1, r3, #31
 800b626:	d405      	bmi.n	800b634 <_vfiprintf_r+0x220>
 800b628:	89ab      	ldrh	r3, [r5, #12]
 800b62a:	059a      	lsls	r2, r3, #22
 800b62c:	d402      	bmi.n	800b634 <_vfiprintf_r+0x220>
 800b62e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b630:	f7ff fe31 	bl	800b296 <__retarget_lock_release_recursive>
 800b634:	89ab      	ldrh	r3, [r5, #12]
 800b636:	065b      	lsls	r3, r3, #25
 800b638:	f53f af12 	bmi.w	800b460 <_vfiprintf_r+0x4c>
 800b63c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b63e:	e711      	b.n	800b464 <_vfiprintf_r+0x50>
 800b640:	ab03      	add	r3, sp, #12
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	462a      	mov	r2, r5
 800b646:	4b09      	ldr	r3, [pc, #36]	; (800b66c <_vfiprintf_r+0x258>)
 800b648:	a904      	add	r1, sp, #16
 800b64a:	4630      	mov	r0, r6
 800b64c:	f000 f880 	bl	800b750 <_printf_i>
 800b650:	e7e4      	b.n	800b61c <_vfiprintf_r+0x208>
 800b652:	bf00      	nop
 800b654:	0800c028 	.word	0x0800c028
 800b658:	0800c048 	.word	0x0800c048
 800b65c:	0800c008 	.word	0x0800c008
 800b660:	0800c068 	.word	0x0800c068
 800b664:	0800c072 	.word	0x0800c072
 800b668:	00000000 	.word	0x00000000
 800b66c:	0800b3ef 	.word	0x0800b3ef
 800b670:	0800c06e 	.word	0x0800c06e

0800b674 <_printf_common>:
 800b674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b678:	4616      	mov	r6, r2
 800b67a:	4699      	mov	r9, r3
 800b67c:	688a      	ldr	r2, [r1, #8]
 800b67e:	690b      	ldr	r3, [r1, #16]
 800b680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b684:	4293      	cmp	r3, r2
 800b686:	bfb8      	it	lt
 800b688:	4613      	movlt	r3, r2
 800b68a:	6033      	str	r3, [r6, #0]
 800b68c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b690:	4607      	mov	r7, r0
 800b692:	460c      	mov	r4, r1
 800b694:	b10a      	cbz	r2, 800b69a <_printf_common+0x26>
 800b696:	3301      	adds	r3, #1
 800b698:	6033      	str	r3, [r6, #0]
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	0699      	lsls	r1, r3, #26
 800b69e:	bf42      	ittt	mi
 800b6a0:	6833      	ldrmi	r3, [r6, #0]
 800b6a2:	3302      	addmi	r3, #2
 800b6a4:	6033      	strmi	r3, [r6, #0]
 800b6a6:	6825      	ldr	r5, [r4, #0]
 800b6a8:	f015 0506 	ands.w	r5, r5, #6
 800b6ac:	d106      	bne.n	800b6bc <_printf_common+0x48>
 800b6ae:	f104 0a19 	add.w	sl, r4, #25
 800b6b2:	68e3      	ldr	r3, [r4, #12]
 800b6b4:	6832      	ldr	r2, [r6, #0]
 800b6b6:	1a9b      	subs	r3, r3, r2
 800b6b8:	42ab      	cmp	r3, r5
 800b6ba:	dc26      	bgt.n	800b70a <_printf_common+0x96>
 800b6bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6c0:	1e13      	subs	r3, r2, #0
 800b6c2:	6822      	ldr	r2, [r4, #0]
 800b6c4:	bf18      	it	ne
 800b6c6:	2301      	movne	r3, #1
 800b6c8:	0692      	lsls	r2, r2, #26
 800b6ca:	d42b      	bmi.n	800b724 <_printf_common+0xb0>
 800b6cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6d0:	4649      	mov	r1, r9
 800b6d2:	4638      	mov	r0, r7
 800b6d4:	47c0      	blx	r8
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	d01e      	beq.n	800b718 <_printf_common+0xa4>
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	68e5      	ldr	r5, [r4, #12]
 800b6de:	6832      	ldr	r2, [r6, #0]
 800b6e0:	f003 0306 	and.w	r3, r3, #6
 800b6e4:	2b04      	cmp	r3, #4
 800b6e6:	bf08      	it	eq
 800b6e8:	1aad      	subeq	r5, r5, r2
 800b6ea:	68a3      	ldr	r3, [r4, #8]
 800b6ec:	6922      	ldr	r2, [r4, #16]
 800b6ee:	bf0c      	ite	eq
 800b6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6f4:	2500      	movne	r5, #0
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	bfc4      	itt	gt
 800b6fa:	1a9b      	subgt	r3, r3, r2
 800b6fc:	18ed      	addgt	r5, r5, r3
 800b6fe:	2600      	movs	r6, #0
 800b700:	341a      	adds	r4, #26
 800b702:	42b5      	cmp	r5, r6
 800b704:	d11a      	bne.n	800b73c <_printf_common+0xc8>
 800b706:	2000      	movs	r0, #0
 800b708:	e008      	b.n	800b71c <_printf_common+0xa8>
 800b70a:	2301      	movs	r3, #1
 800b70c:	4652      	mov	r2, sl
 800b70e:	4649      	mov	r1, r9
 800b710:	4638      	mov	r0, r7
 800b712:	47c0      	blx	r8
 800b714:	3001      	adds	r0, #1
 800b716:	d103      	bne.n	800b720 <_printf_common+0xac>
 800b718:	f04f 30ff 	mov.w	r0, #4294967295
 800b71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b720:	3501      	adds	r5, #1
 800b722:	e7c6      	b.n	800b6b2 <_printf_common+0x3e>
 800b724:	18e1      	adds	r1, r4, r3
 800b726:	1c5a      	adds	r2, r3, #1
 800b728:	2030      	movs	r0, #48	; 0x30
 800b72a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b72e:	4422      	add	r2, r4
 800b730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b738:	3302      	adds	r3, #2
 800b73a:	e7c7      	b.n	800b6cc <_printf_common+0x58>
 800b73c:	2301      	movs	r3, #1
 800b73e:	4622      	mov	r2, r4
 800b740:	4649      	mov	r1, r9
 800b742:	4638      	mov	r0, r7
 800b744:	47c0      	blx	r8
 800b746:	3001      	adds	r0, #1
 800b748:	d0e6      	beq.n	800b718 <_printf_common+0xa4>
 800b74a:	3601      	adds	r6, #1
 800b74c:	e7d9      	b.n	800b702 <_printf_common+0x8e>
	...

0800b750 <_printf_i>:
 800b750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b754:	7e0f      	ldrb	r7, [r1, #24]
 800b756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b758:	2f78      	cmp	r7, #120	; 0x78
 800b75a:	4691      	mov	r9, r2
 800b75c:	4680      	mov	r8, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	469a      	mov	sl, r3
 800b762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b766:	d807      	bhi.n	800b778 <_printf_i+0x28>
 800b768:	2f62      	cmp	r7, #98	; 0x62
 800b76a:	d80a      	bhi.n	800b782 <_printf_i+0x32>
 800b76c:	2f00      	cmp	r7, #0
 800b76e:	f000 80d8 	beq.w	800b922 <_printf_i+0x1d2>
 800b772:	2f58      	cmp	r7, #88	; 0x58
 800b774:	f000 80a3 	beq.w	800b8be <_printf_i+0x16e>
 800b778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b77c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b780:	e03a      	b.n	800b7f8 <_printf_i+0xa8>
 800b782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b786:	2b15      	cmp	r3, #21
 800b788:	d8f6      	bhi.n	800b778 <_printf_i+0x28>
 800b78a:	a101      	add	r1, pc, #4	; (adr r1, 800b790 <_printf_i+0x40>)
 800b78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b790:	0800b7e9 	.word	0x0800b7e9
 800b794:	0800b7fd 	.word	0x0800b7fd
 800b798:	0800b779 	.word	0x0800b779
 800b79c:	0800b779 	.word	0x0800b779
 800b7a0:	0800b779 	.word	0x0800b779
 800b7a4:	0800b779 	.word	0x0800b779
 800b7a8:	0800b7fd 	.word	0x0800b7fd
 800b7ac:	0800b779 	.word	0x0800b779
 800b7b0:	0800b779 	.word	0x0800b779
 800b7b4:	0800b779 	.word	0x0800b779
 800b7b8:	0800b779 	.word	0x0800b779
 800b7bc:	0800b909 	.word	0x0800b909
 800b7c0:	0800b82d 	.word	0x0800b82d
 800b7c4:	0800b8eb 	.word	0x0800b8eb
 800b7c8:	0800b779 	.word	0x0800b779
 800b7cc:	0800b779 	.word	0x0800b779
 800b7d0:	0800b92b 	.word	0x0800b92b
 800b7d4:	0800b779 	.word	0x0800b779
 800b7d8:	0800b82d 	.word	0x0800b82d
 800b7dc:	0800b779 	.word	0x0800b779
 800b7e0:	0800b779 	.word	0x0800b779
 800b7e4:	0800b8f3 	.word	0x0800b8f3
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	1d1a      	adds	r2, r3, #4
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	602a      	str	r2, [r5, #0]
 800b7f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e0a3      	b.n	800b944 <_printf_i+0x1f4>
 800b7fc:	6820      	ldr	r0, [r4, #0]
 800b7fe:	6829      	ldr	r1, [r5, #0]
 800b800:	0606      	lsls	r6, r0, #24
 800b802:	f101 0304 	add.w	r3, r1, #4
 800b806:	d50a      	bpl.n	800b81e <_printf_i+0xce>
 800b808:	680e      	ldr	r6, [r1, #0]
 800b80a:	602b      	str	r3, [r5, #0]
 800b80c:	2e00      	cmp	r6, #0
 800b80e:	da03      	bge.n	800b818 <_printf_i+0xc8>
 800b810:	232d      	movs	r3, #45	; 0x2d
 800b812:	4276      	negs	r6, r6
 800b814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b818:	485e      	ldr	r0, [pc, #376]	; (800b994 <_printf_i+0x244>)
 800b81a:	230a      	movs	r3, #10
 800b81c:	e019      	b.n	800b852 <_printf_i+0x102>
 800b81e:	680e      	ldr	r6, [r1, #0]
 800b820:	602b      	str	r3, [r5, #0]
 800b822:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b826:	bf18      	it	ne
 800b828:	b236      	sxthne	r6, r6
 800b82a:	e7ef      	b.n	800b80c <_printf_i+0xbc>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	6820      	ldr	r0, [r4, #0]
 800b830:	1d19      	adds	r1, r3, #4
 800b832:	6029      	str	r1, [r5, #0]
 800b834:	0601      	lsls	r1, r0, #24
 800b836:	d501      	bpl.n	800b83c <_printf_i+0xec>
 800b838:	681e      	ldr	r6, [r3, #0]
 800b83a:	e002      	b.n	800b842 <_printf_i+0xf2>
 800b83c:	0646      	lsls	r6, r0, #25
 800b83e:	d5fb      	bpl.n	800b838 <_printf_i+0xe8>
 800b840:	881e      	ldrh	r6, [r3, #0]
 800b842:	4854      	ldr	r0, [pc, #336]	; (800b994 <_printf_i+0x244>)
 800b844:	2f6f      	cmp	r7, #111	; 0x6f
 800b846:	bf0c      	ite	eq
 800b848:	2308      	moveq	r3, #8
 800b84a:	230a      	movne	r3, #10
 800b84c:	2100      	movs	r1, #0
 800b84e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b852:	6865      	ldr	r5, [r4, #4]
 800b854:	60a5      	str	r5, [r4, #8]
 800b856:	2d00      	cmp	r5, #0
 800b858:	bfa2      	ittt	ge
 800b85a:	6821      	ldrge	r1, [r4, #0]
 800b85c:	f021 0104 	bicge.w	r1, r1, #4
 800b860:	6021      	strge	r1, [r4, #0]
 800b862:	b90e      	cbnz	r6, 800b868 <_printf_i+0x118>
 800b864:	2d00      	cmp	r5, #0
 800b866:	d04d      	beq.n	800b904 <_printf_i+0x1b4>
 800b868:	4615      	mov	r5, r2
 800b86a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b86e:	fb03 6711 	mls	r7, r3, r1, r6
 800b872:	5dc7      	ldrb	r7, [r0, r7]
 800b874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b878:	4637      	mov	r7, r6
 800b87a:	42bb      	cmp	r3, r7
 800b87c:	460e      	mov	r6, r1
 800b87e:	d9f4      	bls.n	800b86a <_printf_i+0x11a>
 800b880:	2b08      	cmp	r3, #8
 800b882:	d10b      	bne.n	800b89c <_printf_i+0x14c>
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	07de      	lsls	r6, r3, #31
 800b888:	d508      	bpl.n	800b89c <_printf_i+0x14c>
 800b88a:	6923      	ldr	r3, [r4, #16]
 800b88c:	6861      	ldr	r1, [r4, #4]
 800b88e:	4299      	cmp	r1, r3
 800b890:	bfde      	ittt	le
 800b892:	2330      	movle	r3, #48	; 0x30
 800b894:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b89c:	1b52      	subs	r2, r2, r5
 800b89e:	6122      	str	r2, [r4, #16]
 800b8a0:	f8cd a000 	str.w	sl, [sp]
 800b8a4:	464b      	mov	r3, r9
 800b8a6:	aa03      	add	r2, sp, #12
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	f7ff fee2 	bl	800b674 <_printf_common>
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	d14c      	bne.n	800b94e <_printf_i+0x1fe>
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b8:	b004      	add	sp, #16
 800b8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8be:	4835      	ldr	r0, [pc, #212]	; (800b994 <_printf_i+0x244>)
 800b8c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b8c4:	6829      	ldr	r1, [r5, #0]
 800b8c6:	6823      	ldr	r3, [r4, #0]
 800b8c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b8cc:	6029      	str	r1, [r5, #0]
 800b8ce:	061d      	lsls	r5, r3, #24
 800b8d0:	d514      	bpl.n	800b8fc <_printf_i+0x1ac>
 800b8d2:	07df      	lsls	r7, r3, #31
 800b8d4:	bf44      	itt	mi
 800b8d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b8da:	6023      	strmi	r3, [r4, #0]
 800b8dc:	b91e      	cbnz	r6, 800b8e6 <_printf_i+0x196>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	f023 0320 	bic.w	r3, r3, #32
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	2310      	movs	r3, #16
 800b8e8:	e7b0      	b.n	800b84c <_printf_i+0xfc>
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	f043 0320 	orr.w	r3, r3, #32
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	2378      	movs	r3, #120	; 0x78
 800b8f4:	4828      	ldr	r0, [pc, #160]	; (800b998 <_printf_i+0x248>)
 800b8f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8fa:	e7e3      	b.n	800b8c4 <_printf_i+0x174>
 800b8fc:	0659      	lsls	r1, r3, #25
 800b8fe:	bf48      	it	mi
 800b900:	b2b6      	uxthmi	r6, r6
 800b902:	e7e6      	b.n	800b8d2 <_printf_i+0x182>
 800b904:	4615      	mov	r5, r2
 800b906:	e7bb      	b.n	800b880 <_printf_i+0x130>
 800b908:	682b      	ldr	r3, [r5, #0]
 800b90a:	6826      	ldr	r6, [r4, #0]
 800b90c:	6961      	ldr	r1, [r4, #20]
 800b90e:	1d18      	adds	r0, r3, #4
 800b910:	6028      	str	r0, [r5, #0]
 800b912:	0635      	lsls	r5, r6, #24
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	d501      	bpl.n	800b91c <_printf_i+0x1cc>
 800b918:	6019      	str	r1, [r3, #0]
 800b91a:	e002      	b.n	800b922 <_printf_i+0x1d2>
 800b91c:	0670      	lsls	r0, r6, #25
 800b91e:	d5fb      	bpl.n	800b918 <_printf_i+0x1c8>
 800b920:	8019      	strh	r1, [r3, #0]
 800b922:	2300      	movs	r3, #0
 800b924:	6123      	str	r3, [r4, #16]
 800b926:	4615      	mov	r5, r2
 800b928:	e7ba      	b.n	800b8a0 <_printf_i+0x150>
 800b92a:	682b      	ldr	r3, [r5, #0]
 800b92c:	1d1a      	adds	r2, r3, #4
 800b92e:	602a      	str	r2, [r5, #0]
 800b930:	681d      	ldr	r5, [r3, #0]
 800b932:	6862      	ldr	r2, [r4, #4]
 800b934:	2100      	movs	r1, #0
 800b936:	4628      	mov	r0, r5
 800b938:	f7fc fc4a 	bl	80081d0 <memchr>
 800b93c:	b108      	cbz	r0, 800b942 <_printf_i+0x1f2>
 800b93e:	1b40      	subs	r0, r0, r5
 800b940:	6060      	str	r0, [r4, #4]
 800b942:	6863      	ldr	r3, [r4, #4]
 800b944:	6123      	str	r3, [r4, #16]
 800b946:	2300      	movs	r3, #0
 800b948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b94c:	e7a8      	b.n	800b8a0 <_printf_i+0x150>
 800b94e:	6923      	ldr	r3, [r4, #16]
 800b950:	462a      	mov	r2, r5
 800b952:	4649      	mov	r1, r9
 800b954:	4640      	mov	r0, r8
 800b956:	47d0      	blx	sl
 800b958:	3001      	adds	r0, #1
 800b95a:	d0ab      	beq.n	800b8b4 <_printf_i+0x164>
 800b95c:	6823      	ldr	r3, [r4, #0]
 800b95e:	079b      	lsls	r3, r3, #30
 800b960:	d413      	bmi.n	800b98a <_printf_i+0x23a>
 800b962:	68e0      	ldr	r0, [r4, #12]
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	4298      	cmp	r0, r3
 800b968:	bfb8      	it	lt
 800b96a:	4618      	movlt	r0, r3
 800b96c:	e7a4      	b.n	800b8b8 <_printf_i+0x168>
 800b96e:	2301      	movs	r3, #1
 800b970:	4632      	mov	r2, r6
 800b972:	4649      	mov	r1, r9
 800b974:	4640      	mov	r0, r8
 800b976:	47d0      	blx	sl
 800b978:	3001      	adds	r0, #1
 800b97a:	d09b      	beq.n	800b8b4 <_printf_i+0x164>
 800b97c:	3501      	adds	r5, #1
 800b97e:	68e3      	ldr	r3, [r4, #12]
 800b980:	9903      	ldr	r1, [sp, #12]
 800b982:	1a5b      	subs	r3, r3, r1
 800b984:	42ab      	cmp	r3, r5
 800b986:	dcf2      	bgt.n	800b96e <_printf_i+0x21e>
 800b988:	e7eb      	b.n	800b962 <_printf_i+0x212>
 800b98a:	2500      	movs	r5, #0
 800b98c:	f104 0619 	add.w	r6, r4, #25
 800b990:	e7f5      	b.n	800b97e <_printf_i+0x22e>
 800b992:	bf00      	nop
 800b994:	0800c079 	.word	0x0800c079
 800b998:	0800c08a 	.word	0x0800c08a

0800b99c <_sbrk_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d06      	ldr	r5, [pc, #24]	; (800b9b8 <_sbrk_r+0x1c>)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	602b      	str	r3, [r5, #0]
 800b9a8:	f7fc fed6 	bl	8008758 <_sbrk>
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d102      	bne.n	800b9b6 <_sbrk_r+0x1a>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	b103      	cbz	r3, 800b9b6 <_sbrk_r+0x1a>
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	200001b0 	.word	0x200001b0

0800b9bc <__sread>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	460c      	mov	r4, r1
 800b9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c4:	f000 fab2 	bl	800bf2c <_read_r>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	bfab      	itete	ge
 800b9cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b9d0:	181b      	addge	r3, r3, r0
 800b9d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9d6:	bfac      	ite	ge
 800b9d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9da:	81a3      	strhlt	r3, [r4, #12]
 800b9dc:	bd10      	pop	{r4, pc}

0800b9de <__swrite>:
 800b9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e2:	461f      	mov	r7, r3
 800b9e4:	898b      	ldrh	r3, [r1, #12]
 800b9e6:	05db      	lsls	r3, r3, #23
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	4616      	mov	r6, r2
 800b9ee:	d505      	bpl.n	800b9fc <__swrite+0x1e>
 800b9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f000 f9c8 	bl	800bd8c <_lseek_r>
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba06:	81a3      	strh	r3, [r4, #12]
 800ba08:	4632      	mov	r2, r6
 800ba0a:	463b      	mov	r3, r7
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba12:	f000 b869 	b.w	800bae8 <_write_r>

0800ba16 <__sseek>:
 800ba16:	b510      	push	{r4, lr}
 800ba18:	460c      	mov	r4, r1
 800ba1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1e:	f000 f9b5 	bl	800bd8c <_lseek_r>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	bf15      	itete	ne
 800ba28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba32:	81a3      	strheq	r3, [r4, #12]
 800ba34:	bf18      	it	ne
 800ba36:	81a3      	strhne	r3, [r4, #12]
 800ba38:	bd10      	pop	{r4, pc}

0800ba3a <__sclose>:
 800ba3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3e:	f000 b8d3 	b.w	800bbe8 <_close_r>
	...

0800ba44 <__swbuf_r>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	460e      	mov	r6, r1
 800ba48:	4614      	mov	r4, r2
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	b118      	cbz	r0, 800ba56 <__swbuf_r+0x12>
 800ba4e:	6983      	ldr	r3, [r0, #24]
 800ba50:	b90b      	cbnz	r3, 800ba56 <__swbuf_r+0x12>
 800ba52:	f7ff fb81 	bl	800b158 <__sinit>
 800ba56:	4b21      	ldr	r3, [pc, #132]	; (800badc <__swbuf_r+0x98>)
 800ba58:	429c      	cmp	r4, r3
 800ba5a:	d12b      	bne.n	800bab4 <__swbuf_r+0x70>
 800ba5c:	686c      	ldr	r4, [r5, #4]
 800ba5e:	69a3      	ldr	r3, [r4, #24]
 800ba60:	60a3      	str	r3, [r4, #8]
 800ba62:	89a3      	ldrh	r3, [r4, #12]
 800ba64:	071a      	lsls	r2, r3, #28
 800ba66:	d52f      	bpl.n	800bac8 <__swbuf_r+0x84>
 800ba68:	6923      	ldr	r3, [r4, #16]
 800ba6a:	b36b      	cbz	r3, 800bac8 <__swbuf_r+0x84>
 800ba6c:	6923      	ldr	r3, [r4, #16]
 800ba6e:	6820      	ldr	r0, [r4, #0]
 800ba70:	1ac0      	subs	r0, r0, r3
 800ba72:	6963      	ldr	r3, [r4, #20]
 800ba74:	b2f6      	uxtb	r6, r6
 800ba76:	4283      	cmp	r3, r0
 800ba78:	4637      	mov	r7, r6
 800ba7a:	dc04      	bgt.n	800ba86 <__swbuf_r+0x42>
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f000 f948 	bl	800bd14 <_fflush_r>
 800ba84:	bb30      	cbnz	r0, 800bad4 <__swbuf_r+0x90>
 800ba86:	68a3      	ldr	r3, [r4, #8]
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	60a3      	str	r3, [r4, #8]
 800ba8c:	6823      	ldr	r3, [r4, #0]
 800ba8e:	1c5a      	adds	r2, r3, #1
 800ba90:	6022      	str	r2, [r4, #0]
 800ba92:	701e      	strb	r6, [r3, #0]
 800ba94:	6963      	ldr	r3, [r4, #20]
 800ba96:	3001      	adds	r0, #1
 800ba98:	4283      	cmp	r3, r0
 800ba9a:	d004      	beq.n	800baa6 <__swbuf_r+0x62>
 800ba9c:	89a3      	ldrh	r3, [r4, #12]
 800ba9e:	07db      	lsls	r3, r3, #31
 800baa0:	d506      	bpl.n	800bab0 <__swbuf_r+0x6c>
 800baa2:	2e0a      	cmp	r6, #10
 800baa4:	d104      	bne.n	800bab0 <__swbuf_r+0x6c>
 800baa6:	4621      	mov	r1, r4
 800baa8:	4628      	mov	r0, r5
 800baaa:	f000 f933 	bl	800bd14 <_fflush_r>
 800baae:	b988      	cbnz	r0, 800bad4 <__swbuf_r+0x90>
 800bab0:	4638      	mov	r0, r7
 800bab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bab4:	4b0a      	ldr	r3, [pc, #40]	; (800bae0 <__swbuf_r+0x9c>)
 800bab6:	429c      	cmp	r4, r3
 800bab8:	d101      	bne.n	800babe <__swbuf_r+0x7a>
 800baba:	68ac      	ldr	r4, [r5, #8]
 800babc:	e7cf      	b.n	800ba5e <__swbuf_r+0x1a>
 800babe:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <__swbuf_r+0xa0>)
 800bac0:	429c      	cmp	r4, r3
 800bac2:	bf08      	it	eq
 800bac4:	68ec      	ldreq	r4, [r5, #12]
 800bac6:	e7ca      	b.n	800ba5e <__swbuf_r+0x1a>
 800bac8:	4621      	mov	r1, r4
 800baca:	4628      	mov	r0, r5
 800bacc:	f000 f81e 	bl	800bb0c <__swsetup_r>
 800bad0:	2800      	cmp	r0, #0
 800bad2:	d0cb      	beq.n	800ba6c <__swbuf_r+0x28>
 800bad4:	f04f 37ff 	mov.w	r7, #4294967295
 800bad8:	e7ea      	b.n	800bab0 <__swbuf_r+0x6c>
 800bada:	bf00      	nop
 800badc:	0800c028 	.word	0x0800c028
 800bae0:	0800c048 	.word	0x0800c048
 800bae4:	0800c008 	.word	0x0800c008

0800bae8 <_write_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d07      	ldr	r5, [pc, #28]	; (800bb08 <_write_r+0x20>)
 800baec:	4604      	mov	r4, r0
 800baee:	4608      	mov	r0, r1
 800baf0:	4611      	mov	r1, r2
 800baf2:	2200      	movs	r2, #0
 800baf4:	602a      	str	r2, [r5, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	f7fc fddd 	bl	80086b6 <_write>
 800bafc:	1c43      	adds	r3, r0, #1
 800bafe:	d102      	bne.n	800bb06 <_write_r+0x1e>
 800bb00:	682b      	ldr	r3, [r5, #0]
 800bb02:	b103      	cbz	r3, 800bb06 <_write_r+0x1e>
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	bd38      	pop	{r3, r4, r5, pc}
 800bb08:	200001b0 	.word	0x200001b0

0800bb0c <__swsetup_r>:
 800bb0c:	4b32      	ldr	r3, [pc, #200]	; (800bbd8 <__swsetup_r+0xcc>)
 800bb0e:	b570      	push	{r4, r5, r6, lr}
 800bb10:	681d      	ldr	r5, [r3, #0]
 800bb12:	4606      	mov	r6, r0
 800bb14:	460c      	mov	r4, r1
 800bb16:	b125      	cbz	r5, 800bb22 <__swsetup_r+0x16>
 800bb18:	69ab      	ldr	r3, [r5, #24]
 800bb1a:	b913      	cbnz	r3, 800bb22 <__swsetup_r+0x16>
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	f7ff fb1b 	bl	800b158 <__sinit>
 800bb22:	4b2e      	ldr	r3, [pc, #184]	; (800bbdc <__swsetup_r+0xd0>)
 800bb24:	429c      	cmp	r4, r3
 800bb26:	d10f      	bne.n	800bb48 <__swsetup_r+0x3c>
 800bb28:	686c      	ldr	r4, [r5, #4]
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb30:	0719      	lsls	r1, r3, #28
 800bb32:	d42c      	bmi.n	800bb8e <__swsetup_r+0x82>
 800bb34:	06dd      	lsls	r5, r3, #27
 800bb36:	d411      	bmi.n	800bb5c <__swsetup_r+0x50>
 800bb38:	2309      	movs	r3, #9
 800bb3a:	6033      	str	r3, [r6, #0]
 800bb3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb40:	81a3      	strh	r3, [r4, #12]
 800bb42:	f04f 30ff 	mov.w	r0, #4294967295
 800bb46:	e03e      	b.n	800bbc6 <__swsetup_r+0xba>
 800bb48:	4b25      	ldr	r3, [pc, #148]	; (800bbe0 <__swsetup_r+0xd4>)
 800bb4a:	429c      	cmp	r4, r3
 800bb4c:	d101      	bne.n	800bb52 <__swsetup_r+0x46>
 800bb4e:	68ac      	ldr	r4, [r5, #8]
 800bb50:	e7eb      	b.n	800bb2a <__swsetup_r+0x1e>
 800bb52:	4b24      	ldr	r3, [pc, #144]	; (800bbe4 <__swsetup_r+0xd8>)
 800bb54:	429c      	cmp	r4, r3
 800bb56:	bf08      	it	eq
 800bb58:	68ec      	ldreq	r4, [r5, #12]
 800bb5a:	e7e6      	b.n	800bb2a <__swsetup_r+0x1e>
 800bb5c:	0758      	lsls	r0, r3, #29
 800bb5e:	d512      	bpl.n	800bb86 <__swsetup_r+0x7a>
 800bb60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb62:	b141      	cbz	r1, 800bb76 <__swsetup_r+0x6a>
 800bb64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb68:	4299      	cmp	r1, r3
 800bb6a:	d002      	beq.n	800bb72 <__swsetup_r+0x66>
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f000 f991 	bl	800be94 <_free_r>
 800bb72:	2300      	movs	r3, #0
 800bb74:	6363      	str	r3, [r4, #52]	; 0x34
 800bb76:	89a3      	ldrh	r3, [r4, #12]
 800bb78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb7c:	81a3      	strh	r3, [r4, #12]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	6063      	str	r3, [r4, #4]
 800bb82:	6923      	ldr	r3, [r4, #16]
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	89a3      	ldrh	r3, [r4, #12]
 800bb88:	f043 0308 	orr.w	r3, r3, #8
 800bb8c:	81a3      	strh	r3, [r4, #12]
 800bb8e:	6923      	ldr	r3, [r4, #16]
 800bb90:	b94b      	cbnz	r3, 800bba6 <__swsetup_r+0x9a>
 800bb92:	89a3      	ldrh	r3, [r4, #12]
 800bb94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb9c:	d003      	beq.n	800bba6 <__swsetup_r+0x9a>
 800bb9e:	4621      	mov	r1, r4
 800bba0:	4630      	mov	r0, r6
 800bba2:	f000 f92b 	bl	800bdfc <__smakebuf_r>
 800bba6:	89a0      	ldrh	r0, [r4, #12]
 800bba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbac:	f010 0301 	ands.w	r3, r0, #1
 800bbb0:	d00a      	beq.n	800bbc8 <__swsetup_r+0xbc>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	60a3      	str	r3, [r4, #8]
 800bbb6:	6963      	ldr	r3, [r4, #20]
 800bbb8:	425b      	negs	r3, r3
 800bbba:	61a3      	str	r3, [r4, #24]
 800bbbc:	6923      	ldr	r3, [r4, #16]
 800bbbe:	b943      	cbnz	r3, 800bbd2 <__swsetup_r+0xc6>
 800bbc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbc4:	d1ba      	bne.n	800bb3c <__swsetup_r+0x30>
 800bbc6:	bd70      	pop	{r4, r5, r6, pc}
 800bbc8:	0781      	lsls	r1, r0, #30
 800bbca:	bf58      	it	pl
 800bbcc:	6963      	ldrpl	r3, [r4, #20]
 800bbce:	60a3      	str	r3, [r4, #8]
 800bbd0:	e7f4      	b.n	800bbbc <__swsetup_r+0xb0>
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	e7f7      	b.n	800bbc6 <__swsetup_r+0xba>
 800bbd6:	bf00      	nop
 800bbd8:	2000000c 	.word	0x2000000c
 800bbdc:	0800c028 	.word	0x0800c028
 800bbe0:	0800c048 	.word	0x0800c048
 800bbe4:	0800c008 	.word	0x0800c008

0800bbe8 <_close_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4d06      	ldr	r5, [pc, #24]	; (800bc04 <_close_r+0x1c>)
 800bbec:	2300      	movs	r3, #0
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	f7fc fd7b 	bl	80086ee <_close>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_close_r+0x1a>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_close_r+0x1a>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	200001b0 	.word	0x200001b0

0800bc08 <__sflush_r>:
 800bc08:	898a      	ldrh	r2, [r1, #12]
 800bc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0e:	4605      	mov	r5, r0
 800bc10:	0710      	lsls	r0, r2, #28
 800bc12:	460c      	mov	r4, r1
 800bc14:	d458      	bmi.n	800bcc8 <__sflush_r+0xc0>
 800bc16:	684b      	ldr	r3, [r1, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	dc05      	bgt.n	800bc28 <__sflush_r+0x20>
 800bc1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	dc02      	bgt.n	800bc28 <__sflush_r+0x20>
 800bc22:	2000      	movs	r0, #0
 800bc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc2a:	2e00      	cmp	r6, #0
 800bc2c:	d0f9      	beq.n	800bc22 <__sflush_r+0x1a>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc34:	682f      	ldr	r7, [r5, #0]
 800bc36:	602b      	str	r3, [r5, #0]
 800bc38:	d032      	beq.n	800bca0 <__sflush_r+0x98>
 800bc3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	075a      	lsls	r2, r3, #29
 800bc40:	d505      	bpl.n	800bc4e <__sflush_r+0x46>
 800bc42:	6863      	ldr	r3, [r4, #4]
 800bc44:	1ac0      	subs	r0, r0, r3
 800bc46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc48:	b10b      	cbz	r3, 800bc4e <__sflush_r+0x46>
 800bc4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc4c:	1ac0      	subs	r0, r0, r3
 800bc4e:	2300      	movs	r3, #0
 800bc50:	4602      	mov	r2, r0
 800bc52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc54:	6a21      	ldr	r1, [r4, #32]
 800bc56:	4628      	mov	r0, r5
 800bc58:	47b0      	blx	r6
 800bc5a:	1c43      	adds	r3, r0, #1
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	d106      	bne.n	800bc6e <__sflush_r+0x66>
 800bc60:	6829      	ldr	r1, [r5, #0]
 800bc62:	291d      	cmp	r1, #29
 800bc64:	d82c      	bhi.n	800bcc0 <__sflush_r+0xb8>
 800bc66:	4a2a      	ldr	r2, [pc, #168]	; (800bd10 <__sflush_r+0x108>)
 800bc68:	40ca      	lsrs	r2, r1
 800bc6a:	07d6      	lsls	r6, r2, #31
 800bc6c:	d528      	bpl.n	800bcc0 <__sflush_r+0xb8>
 800bc6e:	2200      	movs	r2, #0
 800bc70:	6062      	str	r2, [r4, #4]
 800bc72:	04d9      	lsls	r1, r3, #19
 800bc74:	6922      	ldr	r2, [r4, #16]
 800bc76:	6022      	str	r2, [r4, #0]
 800bc78:	d504      	bpl.n	800bc84 <__sflush_r+0x7c>
 800bc7a:	1c42      	adds	r2, r0, #1
 800bc7c:	d101      	bne.n	800bc82 <__sflush_r+0x7a>
 800bc7e:	682b      	ldr	r3, [r5, #0]
 800bc80:	b903      	cbnz	r3, 800bc84 <__sflush_r+0x7c>
 800bc82:	6560      	str	r0, [r4, #84]	; 0x54
 800bc84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc86:	602f      	str	r7, [r5, #0]
 800bc88:	2900      	cmp	r1, #0
 800bc8a:	d0ca      	beq.n	800bc22 <__sflush_r+0x1a>
 800bc8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc90:	4299      	cmp	r1, r3
 800bc92:	d002      	beq.n	800bc9a <__sflush_r+0x92>
 800bc94:	4628      	mov	r0, r5
 800bc96:	f000 f8fd 	bl	800be94 <_free_r>
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	6360      	str	r0, [r4, #52]	; 0x34
 800bc9e:	e7c1      	b.n	800bc24 <__sflush_r+0x1c>
 800bca0:	6a21      	ldr	r1, [r4, #32]
 800bca2:	2301      	movs	r3, #1
 800bca4:	4628      	mov	r0, r5
 800bca6:	47b0      	blx	r6
 800bca8:	1c41      	adds	r1, r0, #1
 800bcaa:	d1c7      	bne.n	800bc3c <__sflush_r+0x34>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d0c4      	beq.n	800bc3c <__sflush_r+0x34>
 800bcb2:	2b1d      	cmp	r3, #29
 800bcb4:	d001      	beq.n	800bcba <__sflush_r+0xb2>
 800bcb6:	2b16      	cmp	r3, #22
 800bcb8:	d101      	bne.n	800bcbe <__sflush_r+0xb6>
 800bcba:	602f      	str	r7, [r5, #0]
 800bcbc:	e7b1      	b.n	800bc22 <__sflush_r+0x1a>
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcc4:	81a3      	strh	r3, [r4, #12]
 800bcc6:	e7ad      	b.n	800bc24 <__sflush_r+0x1c>
 800bcc8:	690f      	ldr	r7, [r1, #16]
 800bcca:	2f00      	cmp	r7, #0
 800bccc:	d0a9      	beq.n	800bc22 <__sflush_r+0x1a>
 800bcce:	0793      	lsls	r3, r2, #30
 800bcd0:	680e      	ldr	r6, [r1, #0]
 800bcd2:	bf08      	it	eq
 800bcd4:	694b      	ldreq	r3, [r1, #20]
 800bcd6:	600f      	str	r7, [r1, #0]
 800bcd8:	bf18      	it	ne
 800bcda:	2300      	movne	r3, #0
 800bcdc:	eba6 0807 	sub.w	r8, r6, r7
 800bce0:	608b      	str	r3, [r1, #8]
 800bce2:	f1b8 0f00 	cmp.w	r8, #0
 800bce6:	dd9c      	ble.n	800bc22 <__sflush_r+0x1a>
 800bce8:	6a21      	ldr	r1, [r4, #32]
 800bcea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcec:	4643      	mov	r3, r8
 800bcee:	463a      	mov	r2, r7
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	47b0      	blx	r6
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	dc06      	bgt.n	800bd06 <__sflush_r+0xfe>
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcfe:	81a3      	strh	r3, [r4, #12]
 800bd00:	f04f 30ff 	mov.w	r0, #4294967295
 800bd04:	e78e      	b.n	800bc24 <__sflush_r+0x1c>
 800bd06:	4407      	add	r7, r0
 800bd08:	eba8 0800 	sub.w	r8, r8, r0
 800bd0c:	e7e9      	b.n	800bce2 <__sflush_r+0xda>
 800bd0e:	bf00      	nop
 800bd10:	20400001 	.word	0x20400001

0800bd14 <_fflush_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	690b      	ldr	r3, [r1, #16]
 800bd18:	4605      	mov	r5, r0
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	b913      	cbnz	r3, 800bd24 <_fflush_r+0x10>
 800bd1e:	2500      	movs	r5, #0
 800bd20:	4628      	mov	r0, r5
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	b118      	cbz	r0, 800bd2e <_fflush_r+0x1a>
 800bd26:	6983      	ldr	r3, [r0, #24]
 800bd28:	b90b      	cbnz	r3, 800bd2e <_fflush_r+0x1a>
 800bd2a:	f7ff fa15 	bl	800b158 <__sinit>
 800bd2e:	4b14      	ldr	r3, [pc, #80]	; (800bd80 <_fflush_r+0x6c>)
 800bd30:	429c      	cmp	r4, r3
 800bd32:	d11b      	bne.n	800bd6c <_fflush_r+0x58>
 800bd34:	686c      	ldr	r4, [r5, #4]
 800bd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0ef      	beq.n	800bd1e <_fflush_r+0xa>
 800bd3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd40:	07d0      	lsls	r0, r2, #31
 800bd42:	d404      	bmi.n	800bd4e <_fflush_r+0x3a>
 800bd44:	0599      	lsls	r1, r3, #22
 800bd46:	d402      	bmi.n	800bd4e <_fflush_r+0x3a>
 800bd48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd4a:	f7ff faa3 	bl	800b294 <__retarget_lock_acquire_recursive>
 800bd4e:	4628      	mov	r0, r5
 800bd50:	4621      	mov	r1, r4
 800bd52:	f7ff ff59 	bl	800bc08 <__sflush_r>
 800bd56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd58:	07da      	lsls	r2, r3, #31
 800bd5a:	4605      	mov	r5, r0
 800bd5c:	d4e0      	bmi.n	800bd20 <_fflush_r+0xc>
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	059b      	lsls	r3, r3, #22
 800bd62:	d4dd      	bmi.n	800bd20 <_fflush_r+0xc>
 800bd64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd66:	f7ff fa96 	bl	800b296 <__retarget_lock_release_recursive>
 800bd6a:	e7d9      	b.n	800bd20 <_fflush_r+0xc>
 800bd6c:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <_fflush_r+0x70>)
 800bd6e:	429c      	cmp	r4, r3
 800bd70:	d101      	bne.n	800bd76 <_fflush_r+0x62>
 800bd72:	68ac      	ldr	r4, [r5, #8]
 800bd74:	e7df      	b.n	800bd36 <_fflush_r+0x22>
 800bd76:	4b04      	ldr	r3, [pc, #16]	; (800bd88 <_fflush_r+0x74>)
 800bd78:	429c      	cmp	r4, r3
 800bd7a:	bf08      	it	eq
 800bd7c:	68ec      	ldreq	r4, [r5, #12]
 800bd7e:	e7da      	b.n	800bd36 <_fflush_r+0x22>
 800bd80:	0800c028 	.word	0x0800c028
 800bd84:	0800c048 	.word	0x0800c048
 800bd88:	0800c008 	.word	0x0800c008

0800bd8c <_lseek_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4d07      	ldr	r5, [pc, #28]	; (800bdac <_lseek_r+0x20>)
 800bd90:	4604      	mov	r4, r0
 800bd92:	4608      	mov	r0, r1
 800bd94:	4611      	mov	r1, r2
 800bd96:	2200      	movs	r2, #0
 800bd98:	602a      	str	r2, [r5, #0]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	f7fc fcce 	bl	800873c <_lseek>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d102      	bne.n	800bdaa <_lseek_r+0x1e>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b103      	cbz	r3, 800bdaa <_lseek_r+0x1e>
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	200001b0 	.word	0x200001b0

0800bdb0 <__swhatbuf_r>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	460e      	mov	r6, r1
 800bdb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb8:	2900      	cmp	r1, #0
 800bdba:	b096      	sub	sp, #88	; 0x58
 800bdbc:	4614      	mov	r4, r2
 800bdbe:	461d      	mov	r5, r3
 800bdc0:	da08      	bge.n	800bdd4 <__swhatbuf_r+0x24>
 800bdc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	602a      	str	r2, [r5, #0]
 800bdca:	061a      	lsls	r2, r3, #24
 800bdcc:	d410      	bmi.n	800bdf0 <__swhatbuf_r+0x40>
 800bdce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdd2:	e00e      	b.n	800bdf2 <__swhatbuf_r+0x42>
 800bdd4:	466a      	mov	r2, sp
 800bdd6:	f000 f8bb 	bl	800bf50 <_fstat_r>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	dbf1      	blt.n	800bdc2 <__swhatbuf_r+0x12>
 800bdde:	9a01      	ldr	r2, [sp, #4]
 800bde0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bde4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bde8:	425a      	negs	r2, r3
 800bdea:	415a      	adcs	r2, r3
 800bdec:	602a      	str	r2, [r5, #0]
 800bdee:	e7ee      	b.n	800bdce <__swhatbuf_r+0x1e>
 800bdf0:	2340      	movs	r3, #64	; 0x40
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	b016      	add	sp, #88	; 0x58
 800bdf8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bdfc <__smakebuf_r>:
 800bdfc:	898b      	ldrh	r3, [r1, #12]
 800bdfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be00:	079d      	lsls	r5, r3, #30
 800be02:	4606      	mov	r6, r0
 800be04:	460c      	mov	r4, r1
 800be06:	d507      	bpl.n	800be18 <__smakebuf_r+0x1c>
 800be08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	6123      	str	r3, [r4, #16]
 800be10:	2301      	movs	r3, #1
 800be12:	6163      	str	r3, [r4, #20]
 800be14:	b002      	add	sp, #8
 800be16:	bd70      	pop	{r4, r5, r6, pc}
 800be18:	ab01      	add	r3, sp, #4
 800be1a:	466a      	mov	r2, sp
 800be1c:	f7ff ffc8 	bl	800bdb0 <__swhatbuf_r>
 800be20:	9900      	ldr	r1, [sp, #0]
 800be22:	4605      	mov	r5, r0
 800be24:	4630      	mov	r0, r6
 800be26:	f7ff fa57 	bl	800b2d8 <_malloc_r>
 800be2a:	b948      	cbnz	r0, 800be40 <__smakebuf_r+0x44>
 800be2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be30:	059a      	lsls	r2, r3, #22
 800be32:	d4ef      	bmi.n	800be14 <__smakebuf_r+0x18>
 800be34:	f023 0303 	bic.w	r3, r3, #3
 800be38:	f043 0302 	orr.w	r3, r3, #2
 800be3c:	81a3      	strh	r3, [r4, #12]
 800be3e:	e7e3      	b.n	800be08 <__smakebuf_r+0xc>
 800be40:	4b0d      	ldr	r3, [pc, #52]	; (800be78 <__smakebuf_r+0x7c>)
 800be42:	62b3      	str	r3, [r6, #40]	; 0x28
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	6020      	str	r0, [r4, #0]
 800be48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be4c:	81a3      	strh	r3, [r4, #12]
 800be4e:	9b00      	ldr	r3, [sp, #0]
 800be50:	6163      	str	r3, [r4, #20]
 800be52:	9b01      	ldr	r3, [sp, #4]
 800be54:	6120      	str	r0, [r4, #16]
 800be56:	b15b      	cbz	r3, 800be70 <__smakebuf_r+0x74>
 800be58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be5c:	4630      	mov	r0, r6
 800be5e:	f000 f889 	bl	800bf74 <_isatty_r>
 800be62:	b128      	cbz	r0, 800be70 <__smakebuf_r+0x74>
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	f023 0303 	bic.w	r3, r3, #3
 800be6a:	f043 0301 	orr.w	r3, r3, #1
 800be6e:	81a3      	strh	r3, [r4, #12]
 800be70:	89a0      	ldrh	r0, [r4, #12]
 800be72:	4305      	orrs	r5, r0
 800be74:	81a5      	strh	r5, [r4, #12]
 800be76:	e7cd      	b.n	800be14 <__smakebuf_r+0x18>
 800be78:	0800b0f1 	.word	0x0800b0f1

0800be7c <__malloc_lock>:
 800be7c:	4801      	ldr	r0, [pc, #4]	; (800be84 <__malloc_lock+0x8>)
 800be7e:	f7ff ba09 	b.w	800b294 <__retarget_lock_acquire_recursive>
 800be82:	bf00      	nop
 800be84:	200001a4 	.word	0x200001a4

0800be88 <__malloc_unlock>:
 800be88:	4801      	ldr	r0, [pc, #4]	; (800be90 <__malloc_unlock+0x8>)
 800be8a:	f7ff ba04 	b.w	800b296 <__retarget_lock_release_recursive>
 800be8e:	bf00      	nop
 800be90:	200001a4 	.word	0x200001a4

0800be94 <_free_r>:
 800be94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be96:	2900      	cmp	r1, #0
 800be98:	d044      	beq.n	800bf24 <_free_r+0x90>
 800be9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be9e:	9001      	str	r0, [sp, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f1a1 0404 	sub.w	r4, r1, #4
 800bea6:	bfb8      	it	lt
 800bea8:	18e4      	addlt	r4, r4, r3
 800beaa:	f7ff ffe7 	bl	800be7c <__malloc_lock>
 800beae:	4a1e      	ldr	r2, [pc, #120]	; (800bf28 <_free_r+0x94>)
 800beb0:	9801      	ldr	r0, [sp, #4]
 800beb2:	6813      	ldr	r3, [r2, #0]
 800beb4:	b933      	cbnz	r3, 800bec4 <_free_r+0x30>
 800beb6:	6063      	str	r3, [r4, #4]
 800beb8:	6014      	str	r4, [r2, #0]
 800beba:	b003      	add	sp, #12
 800bebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bec0:	f7ff bfe2 	b.w	800be88 <__malloc_unlock>
 800bec4:	42a3      	cmp	r3, r4
 800bec6:	d908      	bls.n	800beda <_free_r+0x46>
 800bec8:	6825      	ldr	r5, [r4, #0]
 800beca:	1961      	adds	r1, r4, r5
 800becc:	428b      	cmp	r3, r1
 800bece:	bf01      	itttt	eq
 800bed0:	6819      	ldreq	r1, [r3, #0]
 800bed2:	685b      	ldreq	r3, [r3, #4]
 800bed4:	1949      	addeq	r1, r1, r5
 800bed6:	6021      	streq	r1, [r4, #0]
 800bed8:	e7ed      	b.n	800beb6 <_free_r+0x22>
 800beda:	461a      	mov	r2, r3
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	b10b      	cbz	r3, 800bee4 <_free_r+0x50>
 800bee0:	42a3      	cmp	r3, r4
 800bee2:	d9fa      	bls.n	800beda <_free_r+0x46>
 800bee4:	6811      	ldr	r1, [r2, #0]
 800bee6:	1855      	adds	r5, r2, r1
 800bee8:	42a5      	cmp	r5, r4
 800beea:	d10b      	bne.n	800bf04 <_free_r+0x70>
 800beec:	6824      	ldr	r4, [r4, #0]
 800beee:	4421      	add	r1, r4
 800bef0:	1854      	adds	r4, r2, r1
 800bef2:	42a3      	cmp	r3, r4
 800bef4:	6011      	str	r1, [r2, #0]
 800bef6:	d1e0      	bne.n	800beba <_free_r+0x26>
 800bef8:	681c      	ldr	r4, [r3, #0]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	6053      	str	r3, [r2, #4]
 800befe:	4421      	add	r1, r4
 800bf00:	6011      	str	r1, [r2, #0]
 800bf02:	e7da      	b.n	800beba <_free_r+0x26>
 800bf04:	d902      	bls.n	800bf0c <_free_r+0x78>
 800bf06:	230c      	movs	r3, #12
 800bf08:	6003      	str	r3, [r0, #0]
 800bf0a:	e7d6      	b.n	800beba <_free_r+0x26>
 800bf0c:	6825      	ldr	r5, [r4, #0]
 800bf0e:	1961      	adds	r1, r4, r5
 800bf10:	428b      	cmp	r3, r1
 800bf12:	bf04      	itt	eq
 800bf14:	6819      	ldreq	r1, [r3, #0]
 800bf16:	685b      	ldreq	r3, [r3, #4]
 800bf18:	6063      	str	r3, [r4, #4]
 800bf1a:	bf04      	itt	eq
 800bf1c:	1949      	addeq	r1, r1, r5
 800bf1e:	6021      	streq	r1, [r4, #0]
 800bf20:	6054      	str	r4, [r2, #4]
 800bf22:	e7ca      	b.n	800beba <_free_r+0x26>
 800bf24:	b003      	add	sp, #12
 800bf26:	bd30      	pop	{r4, r5, pc}
 800bf28:	200001a8 	.word	0x200001a8

0800bf2c <_read_r>:
 800bf2c:	b538      	push	{r3, r4, r5, lr}
 800bf2e:	4d07      	ldr	r5, [pc, #28]	; (800bf4c <_read_r+0x20>)
 800bf30:	4604      	mov	r4, r0
 800bf32:	4608      	mov	r0, r1
 800bf34:	4611      	mov	r1, r2
 800bf36:	2200      	movs	r2, #0
 800bf38:	602a      	str	r2, [r5, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f7fc fb9e 	bl	800867c <_read>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_read_r+0x1e>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_read_r+0x1e>
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	200001b0 	.word	0x200001b0

0800bf50 <_fstat_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4d07      	ldr	r5, [pc, #28]	; (800bf70 <_fstat_r+0x20>)
 800bf54:	2300      	movs	r3, #0
 800bf56:	4604      	mov	r4, r0
 800bf58:	4608      	mov	r0, r1
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	602b      	str	r3, [r5, #0]
 800bf5e:	f7fc fbd2 	bl	8008706 <_fstat>
 800bf62:	1c43      	adds	r3, r0, #1
 800bf64:	d102      	bne.n	800bf6c <_fstat_r+0x1c>
 800bf66:	682b      	ldr	r3, [r5, #0]
 800bf68:	b103      	cbz	r3, 800bf6c <_fstat_r+0x1c>
 800bf6a:	6023      	str	r3, [r4, #0]
 800bf6c:	bd38      	pop	{r3, r4, r5, pc}
 800bf6e:	bf00      	nop
 800bf70:	200001b0 	.word	0x200001b0

0800bf74 <_isatty_r>:
 800bf74:	b538      	push	{r3, r4, r5, lr}
 800bf76:	4d06      	ldr	r5, [pc, #24]	; (800bf90 <_isatty_r+0x1c>)
 800bf78:	2300      	movs	r3, #0
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	4608      	mov	r0, r1
 800bf7e:	602b      	str	r3, [r5, #0]
 800bf80:	f7fc fbd1 	bl	8008726 <_isatty>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d102      	bne.n	800bf8e <_isatty_r+0x1a>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	b103      	cbz	r3, 800bf8e <_isatty_r+0x1a>
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	200001b0 	.word	0x200001b0

0800bf94 <_init>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	bf00      	nop
 800bf98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9a:	bc08      	pop	{r3}
 800bf9c:	469e      	mov	lr, r3
 800bf9e:	4770      	bx	lr

0800bfa0 <_fini>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	bf00      	nop
 800bfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa6:	bc08      	pop	{r3}
 800bfa8:	469e      	mov	lr, r3
 800bfaa:	4770      	bx	lr
