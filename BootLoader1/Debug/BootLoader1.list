
BootLoader1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004108  08004108  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004108  08004108  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004108  08004108  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000013c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009717  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001736  00000000  00000000  000297b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  0002aef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006a0  00000000  00000000  0002b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d9c7  00000000  00000000  0002bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009eee  00000000  00000000  0004968f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae642  00000000  00000000  0005357d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00101bbf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023f8  00000000  00000000  00101c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fe8 	.word	0x08003fe8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003fe8 	.word	0x08003fe8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 faf4 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f81e 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f8ce 	bl	800041c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000280:	f000 f86c 	bl	800035c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f89a 	bl	80003bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Turn ON the Green Led to tell the user that Bootloader is running
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET );    //Green LED ON
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028e:	4808      	ldr	r0, [pc, #32]	; (80002b0 <main+0x40>)
 8000290:	f000 fdd0 	bl	8000e34 <HAL_GPIO_WritePin>
  printf("Starting Bootloader(%d.%d)\n", BL_Version[0], BL_Version[1] );
 8000294:	2300      	movs	r3, #0
 8000296:	2201      	movs	r2, #1
 8000298:	4619      	mov	r1, r3
 800029a:	4806      	ldr	r0, [pc, #24]	; (80002b4 <main+0x44>)
 800029c:	f002 fea0 	bl	8002fe0 <iprintf>
  HAL_Delay(2000);   //2sec delay for nothing
 80002a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a4:	f000 fb42 	bl	800092c <HAL_Delay>

  // Jump to application
  goto_application();
 80002a8:	f000 f916 	bl	80004d8 <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ac:	e7fe      	b.n	80002ac <main+0x3c>
 80002ae:	bf00      	nop
 80002b0:	48001000 	.word	0x48001000
 80002b4:	08004000 	.word	0x08004000

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b09e      	sub	sp, #120	; 0x78
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fe82 	bl	8002fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	463b      	mov	r3, r7
 80002de:	223c      	movs	r2, #60	; 0x3c
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 fe74 	bl	8002fd0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e8:	2302      	movs	r3, #2
 80002ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	2310      	movs	r3, #16
 80002f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f4:	2300      	movs	r3, #0
 80002f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fdb1 	bl	8000e64 <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000308:	f000 f900 	bl	800050c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000310:	2300      	movs	r3, #0
 8000312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000320:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fdda 	bl	8001ee0 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000332:	f000 f8eb 	bl	800050c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000336:	2303      	movs	r3, #3
 8000338:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800033a:	2300      	movs	r3, #0
 800033c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	463b      	mov	r3, r7
 8000344:	4618      	mov	r0, r3
 8000346:	f002 f801 	bl	800234c <HAL_RCCEx_PeriphCLKConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000350:	f000 f8dc 	bl	800050c <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	3778      	adds	r7, #120	; 0x78
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000362:	4a15      	ldr	r2, [pc, #84]	; (80003b8 <MX_USART1_UART_Init+0x5c>)
 8000364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800036c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000382:	220c      	movs	r2, #12
 8000384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 800039a:	2200      	movs	r2, #0
 800039c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 80003a0:	f002 f984 	bl	80026ac <HAL_UART_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003aa:	f000 f8af 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	2000008c 	.word	0x2000008c
 80003b8:	40013800 	.word	0x40013800

080003bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003c2:	4a15      	ldr	r2, [pc, #84]	; (8000418 <MX_USART2_UART_Init+0x5c>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_USART2_UART_Init+0x58>)
 8000400:	f002 f954 	bl	80026ac <HAL_UART_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800040a:	f000 f87f 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000110 	.word	0x20000110
 8000418:	40004400 	.word	0x40004400

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000432:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <MX_GPIO_Init+0x90>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a1d      	ldr	r2, [pc, #116]	; (80004ac <MX_GPIO_Init+0x90>)
 8000438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <MX_GPIO_Init+0x90>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b18      	ldr	r3, [pc, #96]	; (80004ac <MX_GPIO_Init+0x90>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a17      	ldr	r2, [pc, #92]	; (80004ac <MX_GPIO_Init+0x90>)
 8000450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <MX_GPIO_Init+0x90>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <MX_GPIO_Init+0x90>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a11      	ldr	r2, [pc, #68]	; (80004ac <MX_GPIO_Init+0x90>)
 8000468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_GPIO_Init+0x90>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000480:	480b      	ldr	r0, [pc, #44]	; (80004b0 <MX_GPIO_Init+0x94>)
 8000482:	f000 fcd7 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800048a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	2301      	movs	r3, #1
 800048e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000498:	f107 030c 	add.w	r3, r7, #12
 800049c:	4619      	mov	r1, r3
 800049e:	4804      	ldr	r0, [pc, #16]	; (80004b0 <MX_GPIO_Init+0x94>)
 80004a0:	f000 fb4e 	bl	8000b40 <HAL_GPIO_Init>

}
 80004a4:	bf00      	nop
 80004a6:	3720      	adds	r7, #32
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000
 80004b0:	48001000 	.word	0x48001000

080004b4 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004bc:	1d39      	adds	r1, r7, #4
 80004be:	f04f 33ff 	mov.w	r3, #4294967295
 80004c2:	2201      	movs	r2, #1
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <__io_putchar+0x20>)
 80004c6:	f002 f93f 	bl	8002748 <HAL_UART_Transmit>

  return ch;
 80004ca:	687b      	ldr	r3, [r7, #4]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000110 	.word	0x20000110

080004d8 <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  printf("Gonna Jump to Application\n");
 80004de:	4808      	ldr	r0, [pc, #32]	; (8000500 <goto_application+0x28>)
 80004e0:	f002 fe04 	bl	80030ec <puts>

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08008000 + 4U)));
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <goto_application+0x2c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	607b      	str	r3, [r7, #4]

  //__set_MSP(*(volatile uint32_t*) 0x08040000);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
 80004ea:	2200      	movs	r2, #0
 80004ec:	2101      	movs	r1, #1
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <goto_application+0x30>)
 80004f0:	f000 fca0 	bl	8000e34 <HAL_GPIO_WritePin>
  app_reset_handler();    //call the app reset handler
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4798      	blx	r3
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	0800401c 	.word	0x0800401c
 8000504:	08008004 	.word	0x08008004
 8000508:	48000400 	.word	0x48000400

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
}
 8000512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000514:	e7fe      	b.n	8000514 <Error_Handler+0x8>
	...

08000518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <HAL_MspInit+0x44>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <HAL_MspInit+0x44>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <HAL_MspInit+0x44>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_MspInit+0x44>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <HAL_MspInit+0x44>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000540:	61d3      	str	r3, [r2, #28]
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_MspInit+0x44>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000

08000560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	; 0x30
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	f107 031c 	add.w	r3, r7, #28
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a2f      	ldr	r2, [pc, #188]	; (800063c <HAL_UART_MspInit+0xdc>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d12a      	bne.n	80005d8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000582:	4b2f      	ldr	r3, [pc, #188]	; (8000640 <HAL_UART_MspInit+0xe0>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a2e      	ldr	r2, [pc, #184]	; (8000640 <HAL_UART_MspInit+0xe0>)
 8000588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b2c      	ldr	r3, [pc, #176]	; (8000640 <HAL_UART_MspInit+0xe0>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b29      	ldr	r3, [pc, #164]	; (8000640 <HAL_UART_MspInit+0xe0>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a28      	ldr	r2, [pc, #160]	; (8000640 <HAL_UART_MspInit+0xe0>)
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b26      	ldr	r3, [pc, #152]	; (8000640 <HAL_UART_MspInit+0xe0>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c0:	2303      	movs	r3, #3
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005c4:	2307      	movs	r3, #7
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4619      	mov	r1, r3
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d2:	f000 fab5 	bl	8000b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005d6:	e02c      	b.n	8000632 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a19      	ldr	r2, [pc, #100]	; (8000644 <HAL_UART_MspInit+0xe4>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d127      	bne.n	8000632 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <HAL_UART_MspInit+0xe0>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a16      	ldr	r2, [pc, #88]	; (8000640 <HAL_UART_MspInit+0xe0>)
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <HAL_UART_MspInit+0xe0>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <HAL_UART_MspInit+0xe0>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <HAL_UART_MspInit+0xe0>)
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <HAL_UART_MspInit+0xe0>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000612:	2360      	movs	r3, #96	; 0x60
 8000614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000616:	2302      	movs	r3, #2
 8000618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000622:	2307      	movs	r3, #7
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4619      	mov	r1, r3
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <HAL_UART_MspInit+0xe8>)
 800062e:	f000 fa87 	bl	8000b40 <HAL_GPIO_Init>
}
 8000632:	bf00      	nop
 8000634:	3730      	adds	r7, #48	; 0x30
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40013800 	.word	0x40013800
 8000640:	40021000 	.word	0x40021000
 8000644:	40004400 	.word	0x40004400
 8000648:	48000c00 	.word	0x48000c00

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <NMI_Handler+0x4>

08000652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <MemManage_Handler+0x4>

0800065e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <UsageFault_Handler+0x4>

0800066a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000698:	f000 f928 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	e00a      	b.n	80006c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006b2:	f3af 8000 	nop.w
 80006b6:	4601      	mov	r1, r0
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	60ba      	str	r2, [r7, #8]
 80006be:	b2ca      	uxtb	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbf0      	blt.n	80006b2 <_read+0x12>
  }

  return len;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b086      	sub	sp, #24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	e009      	b.n	8000700 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	60ba      	str	r2, [r7, #8]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fedd 	bl	80004b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbf1      	blt.n	80006ec <_write+0x12>
  }
  return len;
 8000708:	687b      	ldr	r3, [r7, #4]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <_close>:

int _close(int file)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800073a:	605a      	str	r2, [r3, #4]
  return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <_isatty>:

int _isatty(int file)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000784:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <_sbrk+0x5c>)
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <_sbrk+0x60>)
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d102      	bne.n	800079e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <_sbrk+0x64>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <_sbrk+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <_sbrk+0x64>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d207      	bcs.n	80007bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007ac:	f002 fbe6 	bl	8002f7c <__errno>
 80007b0:	4603      	mov	r3, r0
 80007b2:	220c      	movs	r2, #12
 80007b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	e009      	b.n	80007d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <_sbrk+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <_sbrk+0x64>)
 80007cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ce:	68fb      	ldr	r3, [r7, #12]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000a000 	.word	0x2000a000
 80007dc:	00000400 	.word	0x00000400
 80007e0:	20000194 	.word	0x20000194
 80007e4:	200001b0 	.word	0x200001b0

080007e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <SystemInit+0x20>)
 80007ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f2:	4a05      	ldr	r2, [pc, #20]	; (8000808 <SystemInit+0x20>)
 80007f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800080c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000844 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <LoopForever+0x6>)
  ldr r1, =_edata
 8000812:	490e      	ldr	r1, [pc, #56]	; (800084c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <LoopForever+0xe>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000828:	4c0b      	ldr	r4, [pc, #44]	; (8000858 <LoopForever+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000836:	f7ff ffd7 	bl	80007e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800083a:	f002 fba5 	bl	8002f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800083e:	f7ff fd17 	bl	8000270 <main>

08000842 <LoopForever>:

LoopForever:
    b LoopForever
 8000842:	e7fe      	b.n	8000842 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000844:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000850:	08004110 	.word	0x08004110
  ldr r2, =_sbss
 8000854:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000858:	200001ac 	.word	0x200001ac

0800085c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_2_IRQHandler>
	...

08000860 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_Init+0x28>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <HAL_Init+0x28>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f000 f931 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000876:	200f      	movs	r0, #15
 8000878:	f000 f808 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087c:	f7ff fe4c 	bl	8000518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40022000 	.word	0x40022000

0800088c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x54>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x58>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f93b 	bl	8000b26 <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 f911 	bl	8000aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_InitTick+0x5c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x20>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x24>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_IncTick+0x24>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008
 8000910:	20000198 	.word	0x20000198

08000914 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;  
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_GetTick+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000198 	.word	0x20000198

0800092c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000934:	f7ff ffee 	bl	8000914 <HAL_GetTick>
 8000938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000944:	d005      	beq.n	8000952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_Delay+0x44>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000952:	bf00      	nop
 8000954:	f7ff ffde 	bl	8000914 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8f7      	bhi.n	8000954 <HAL_Delay+0x28>
  {
  }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa4:	d301      	bcc.n	8000aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00f      	b.n	8000aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <SysTick_Config+0x40>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f7ff ff8e 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <SysTick_Config+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SysTick_Config+0x40>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff47 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b00:	f7ff ff5c 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff ff8e 	bl	8000a2c <NVIC_EncodePriority>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff5d 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ffb0 	bl	8000a94 <SysTick_Config>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4e:	e154      	b.n	8000dfa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	2101      	movs	r1, #1
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 8146 	beq.w	8000df4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d005      	beq.n	8000b80 <HAL_GPIO_Init+0x40>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d130      	bne.n	8000be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	091b      	lsrs	r3, r3, #4
 8000bcc:	f003 0201 	and.w	r2, r3, #1
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d017      	beq.n	8000c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d123      	bne.n	8000c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	08da      	lsrs	r2, r3, #3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3208      	adds	r2, #8
 8000c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	220f      	movs	r2, #15
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	08da      	lsrs	r2, r3, #3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3208      	adds	r2, #8
 8000c6c:	6939      	ldr	r1, [r7, #16]
 8000c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0203 	and.w	r2, r3, #3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 80a0 	beq.w	8000df4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb4:	4b58      	ldr	r3, [pc, #352]	; (8000e18 <HAL_GPIO_Init+0x2d8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a57      	ldr	r2, [pc, #348]	; (8000e18 <HAL_GPIO_Init+0x2d8>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <HAL_GPIO_Init+0x2d8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ccc:	4a53      	ldr	r2, [pc, #332]	; (8000e1c <HAL_GPIO_Init+0x2dc>)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cf6:	d019      	beq.n	8000d2c <HAL_GPIO_Init+0x1ec>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <HAL_GPIO_Init+0x2e0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d013      	beq.n	8000d28 <HAL_GPIO_Init+0x1e8>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x2e4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d00d      	beq.n	8000d24 <HAL_GPIO_Init+0x1e4>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a47      	ldr	r2, [pc, #284]	; (8000e28 <HAL_GPIO_Init+0x2e8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d007      	beq.n	8000d20 <HAL_GPIO_Init+0x1e0>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a46      	ldr	r2, [pc, #280]	; (8000e2c <HAL_GPIO_Init+0x2ec>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d101      	bne.n	8000d1c <HAL_GPIO_Init+0x1dc>
 8000d18:	2304      	movs	r3, #4
 8000d1a:	e008      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	e006      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d20:	2303      	movs	r3, #3
 8000d22:	e004      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	f002 0203 	and.w	r2, r2, #3
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	4093      	lsls	r3, r2
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d3e:	4937      	ldr	r1, [pc, #220]	; (8000e1c <HAL_GPIO_Init+0x2dc>)
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d70:	4a2f      	ldr	r2, [pc, #188]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d76:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d9a:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dc4:	4a1a      	ldr	r2, [pc, #104]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa22 f303 	lsr.w	r3, r2, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f47f aea3 	bne.w	8000b50 <HAL_GPIO_Init+0x10>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000
 8000e20:	48000400 	.word	0x48000400
 8000e24:	48000800 	.word	0x48000800
 8000e28:	48000c00 	.word	0x48000c00
 8000e2c:	48001000 	.word	0x48001000
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	f001 b823 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 817d 	beq.w	800119a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ea0:	4bbc      	ldr	r3, [pc, #752]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d00c      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eac:	4bb9      	ldr	r3, [pc, #740]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d15c      	bne.n	8000f72 <HAL_RCC_OscConfig+0x10e>
 8000eb8:	4bb6      	ldr	r3, [pc, #728]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec4:	d155      	bne.n	8000f72 <HAL_RCC_OscConfig+0x10e>
 8000ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ede:	fab3 f383 	clz	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	095b      	lsrs	r3, r3, #5
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d102      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x94>
 8000ef2:	4ba8      	ldr	r3, [pc, #672]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	e015      	b.n	8000f24 <HAL_RCC_OscConfig+0xc0>
 8000ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f00:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f04:	fa93 f3a3 	rbit	r3, r3
 8000f08:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f10:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f14:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f20:	4b9c      	ldr	r3, [pc, #624]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f28:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f30:	fa92 f2a2 	rbit	r2, r2
 8000f34:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f38:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f3c:	fab2 f282 	clz	r2, r2
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	f042 0220 	orr.w	r2, r2, #32
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	f002 021f 	and.w	r2, r2, #31
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 811f 	beq.w	8001198 <HAL_RCC_OscConfig+0x334>
 8000f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 8116 	bne.w	8001198 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	f000 bfaf 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f82:	d106      	bne.n	8000f92 <HAL_RCC_OscConfig+0x12e>
 8000f84:	4b83      	ldr	r3, [pc, #524]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a82      	ldr	r2, [pc, #520]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e036      	b.n	8001000 <HAL_RCC_OscConfig+0x19c>
 8000f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10c      	bne.n	8000fbc <HAL_RCC_OscConfig+0x158>
 8000fa2:	4b7c      	ldr	r3, [pc, #496]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a7b      	ldr	r2, [pc, #492]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b79      	ldr	r3, [pc, #484]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a78      	ldr	r2, [pc, #480]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e021      	b.n	8001000 <HAL_RCC_OscConfig+0x19c>
 8000fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x184>
 8000fce:	4b71      	ldr	r3, [pc, #452]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a70      	ldr	r2, [pc, #448]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b6e      	ldr	r3, [pc, #440]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a6d      	ldr	r2, [pc, #436]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e00b      	b.n	8001000 <HAL_RCC_OscConfig+0x19c>
 8000fe8:	4b6a      	ldr	r3, [pc, #424]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a69      	ldr	r2, [pc, #420]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b67      	ldr	r3, [pc, #412]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a66      	ldr	r2, [pc, #408]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001000:	4b64      	ldr	r3, [pc, #400]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	f023 020f 	bic.w	r2, r3, #15
 8001008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800100c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	495f      	ldr	r1, [pc, #380]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8001016:	4313      	orrs	r3, r2
 8001018:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800101a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800101e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d059      	beq.n	80010de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102a:	f7ff fc73 	bl	8000914 <HAL_GetTick>
 800102e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	e00a      	b.n	800104a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fc6e 	bl	8000914 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b64      	cmp	r3, #100	; 0x64
 8001042:	d902      	bls.n	800104a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	f000 bf43 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 800104a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800104e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001052:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001056:	fa93 f3a3 	rbit	r3, r3
 800105a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800105e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	fab3 f383 	clz	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	095b      	lsrs	r3, r3, #5
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d102      	bne.n	800107c <HAL_RCC_OscConfig+0x218>
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	e015      	b.n	80010a8 <HAL_RCC_OscConfig+0x244>
 800107c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001080:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001094:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001098:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010a4:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010b4:	fa92 f2a2 	rbit	r2, r2
 80010b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010c0:	fab2 f282 	clz	r2, r2
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	f042 0220 	orr.w	r2, r2, #32
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	f002 021f 	and.w	r2, r2, #31
 80010d0:	2101      	movs	r1, #1
 80010d2:	fa01 f202 	lsl.w	r2, r1, r2
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0ab      	beq.n	8001034 <HAL_RCC_OscConfig+0x1d0>
 80010dc:	e05d      	b.n	800119a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fc19 	bl	8000914 <HAL_GetTick>
 80010e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	e00a      	b.n	80010fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff fc14 	bl	8000914 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b64      	cmp	r3, #100	; 0x64
 80010f6:	d902      	bls.n	80010fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	f000 bee9 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 80010fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001102:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001112:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	fab3 f383 	clz	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	095b      	lsrs	r3, r3, #5
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d102      	bne.n	8001130 <HAL_RCC_OscConfig+0x2cc>
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	e015      	b.n	800115c <HAL_RCC_OscConfig+0x2f8>
 8001130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001134:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800113c:	fa93 f3a3 	rbit	r3, r3
 8001140:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001148:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800114c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001160:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001164:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001168:	fa92 f2a2 	rbit	r2, r2
 800116c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001170:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001174:	fab2 f282 	clz	r2, r2
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	f042 0220 	orr.w	r2, r2, #32
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	f002 021f 	and.w	r2, r2, #31
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1ab      	bne.n	80010e8 <HAL_RCC_OscConfig+0x284>
 8001190:	e003      	b.n	800119a <HAL_RCC_OscConfig+0x336>
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800119e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 817d 	beq.w	80014aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011b0:	4ba6      	ldr	r3, [pc, #664]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011bc:	4ba3      	ldr	r3, [pc, #652]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d172      	bne.n	80012ae <HAL_RCC_OscConfig+0x44a>
 80011c8:	4ba0      	ldr	r3, [pc, #640]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d16c      	bne.n	80012ae <HAL_RCC_OscConfig+0x44a>
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d102      	bne.n	8001204 <HAL_RCC_OscConfig+0x3a0>
 80011fe:	4b93      	ldr	r3, [pc, #588]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	e013      	b.n	800122c <HAL_RCC_OscConfig+0x3c8>
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800121c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001228:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	2202      	movs	r2, #2
 800122e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001232:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001236:	fa92 f2a2 	rbit	r2, r2
 800123a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800123e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001242:	fab2 f282 	clz	r2, r2
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	f042 0220 	orr.w	r2, r2, #32
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	f002 021f 	and.w	r2, r2, #31
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00a      	beq.n	8001274 <HAL_RCC_OscConfig+0x410>
 800125e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d002      	beq.n	8001274 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	f000 be2e 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b75      	ldr	r3, [pc, #468]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001280:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	21f8      	movs	r1, #248	; 0xf8
 800128a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001292:	fa91 f1a1 	rbit	r1, r1
 8001296:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800129a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800129e:	fab1 f181 	clz	r1, r1
 80012a2:	b2c9      	uxtb	r1, r1
 80012a4:	408b      	lsls	r3, r1
 80012a6:	4969      	ldr	r1, [pc, #420]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ac:	e0fd      	b.n	80014aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8088 	beq.w	80013d0 <HAL_RCC_OscConfig+0x56c>
 80012c0:	2301      	movs	r3, #1
 80012c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d6:	fab3 f383 	clz	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	461a      	mov	r2, r3
 80012e8:	2301      	movs	r3, #1
 80012ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fb12 	bl	8000914 <HAL_GetTick>
 80012f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	e00a      	b.n	800130c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fb0d 	bl	8000914 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d902      	bls.n	800130c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	f000 bde2 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800131e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	095b      	lsrs	r3, r3, #5
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d102      	bne.n	800133c <HAL_RCC_OscConfig+0x4d8>
 8001336:	4b45      	ldr	r3, [pc, #276]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	e013      	b.n	8001364 <HAL_RCC_OscConfig+0x500>
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001354:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001358:	fa93 f3a3 	rbit	r3, r3
 800135c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001360:	4b3a      	ldr	r3, [pc, #232]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	2202      	movs	r2, #2
 8001366:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800136a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800136e:	fa92 f2a2 	rbit	r2, r2
 8001372:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001376:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800137a:	fab2 f282 	clz	r2, r2
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	f042 0220 	orr.w	r2, r2, #32
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	f002 021f 	and.w	r2, r2, #31
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f202 	lsl.w	r2, r1, r2
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0af      	beq.n	80012f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	21f8      	movs	r1, #248	; 0xf8
 80013ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013b4:	fa91 f1a1 	rbit	r1, r1
 80013b8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013c0:	fab1 f181 	clz	r1, r1
 80013c4:	b2c9      	uxtb	r1, r1
 80013c6:	408b      	lsls	r3, r1
 80013c8:	4920      	ldr	r1, [pc, #128]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
 80013ce:	e06c      	b.n	80014aa <HAL_RCC_OscConfig+0x646>
 80013d0:	2301      	movs	r3, #1
 80013d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	461a      	mov	r2, r3
 80013f8:	2300      	movs	r3, #0
 80013fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fa8a 	bl	8000914 <HAL_GetTick>
 8001400:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001404:	e00a      	b.n	800141c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fa85 	bl	8000914 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d902      	bls.n	800141c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	f000 bd5a 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001426:	fa93 f3a3 	rbit	r3, r3
 800142a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800142e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	fab3 f383 	clz	r3, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	095b      	lsrs	r3, r3, #5
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b01      	cmp	r3, #1
 8001444:	d104      	bne.n	8001450 <HAL_RCC_OscConfig+0x5ec>
 8001446:	4b01      	ldr	r3, [pc, #4]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	e015      	b.n	8001478 <HAL_RCC_OscConfig+0x614>
 800144c:	40021000 	.word	0x40021000
 8001450:	2302      	movs	r3, #2
 8001452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001468:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001474:	4bc8      	ldr	r3, [pc, #800]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	2202      	movs	r2, #2
 800147a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800147e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001482:	fa92 f2a2 	rbit	r2, r2
 8001486:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800148a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800148e:	fab2 f282 	clz	r2, r2
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	f042 0220 	orr.w	r2, r2, #32
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	f002 021f 	and.w	r2, r2, #31
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1ad      	bne.n	8001406 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8110 	beq.w	80016e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d079      	beq.n	80015c4 <HAL_RCC_OscConfig+0x760>
 80014d0:	2301      	movs	r3, #1
 80014d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	4bab      	ldr	r3, [pc, #684]	; (800179c <HAL_RCC_OscConfig+0x938>)
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	461a      	mov	r2, r3
 80014f6:	2301      	movs	r3, #1
 80014f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fa0b 	bl	8000914 <HAL_GetTick>
 80014fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e00a      	b.n	800151a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fa06 	bl	8000914 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d902      	bls.n	800151a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	f000 bcdb 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800152c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001530:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001534:	2202      	movs	r2, #2
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	fa93 f2a3 	rbit	r2, r3
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001558:	2202      	movs	r2, #2
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	fa93 f2a3 	rbit	r2, r3
 800156a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001572:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001574:	4b88      	ldr	r3, [pc, #544]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 8001576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001580:	2102      	movs	r1, #2
 8001582:	6019      	str	r1, [r3, #0]
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fa93 f1a3 	rbit	r1, r3
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800159a:	6019      	str	r1, [r3, #0]
  return result;
 800159c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	fab3 f383 	clz	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0a0      	beq.n	8001504 <HAL_RCC_OscConfig+0x6a0>
 80015c2:	e08d      	b.n	80016e0 <HAL_RCC_OscConfig+0x87c>
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	fa93 f2a3 	rbit	r2, r3
 80015de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015e6:	601a      	str	r2, [r3, #0]
  return result;
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f2:	fab3 f383 	clz	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x938>)
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	461a      	mov	r2, r3
 8001602:	2300      	movs	r3, #0
 8001604:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff f985 	bl	8000914 <HAL_GetTick>
 800160a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160e:	e00a      	b.n	8001626 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001610:	f7ff f980 	bl	8000914 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d902      	bls.n	8001626 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	f000 bc55 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001636:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	fa93 f2a3 	rbit	r2, r3
 8001640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001644:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001652:	2202      	movs	r2, #2
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fa93 f2a3 	rbit	r2, r3
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001676:	2202      	movs	r2, #2
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fa93 f2a3 	rbit	r2, r3
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001690:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 8001694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800169e:	2102      	movs	r1, #2
 80016a0:	6019      	str	r1, [r3, #0]
 80016a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f1a3 	rbit	r1, r3
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016b8:	6019      	str	r1, [r3, #0]
  return result;
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2101      	movs	r1, #1
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d197      	bne.n	8001610 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 81a1 	beq.w	8001a38 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d116      	bne.n	8001736 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001712:	61d3      	str	r3, [r2, #28]
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800172e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001730:	2301      	movs	r3, #1
 8001732:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_RCC_OscConfig+0x93c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173e:	2b00      	cmp	r3, #0
 8001740:	d11a      	bne.n	8001778 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_RCC_OscConfig+0x93c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <HAL_RCC_OscConfig+0x93c>)
 8001748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174e:	f7ff f8e1 	bl	8000914 <HAL_GetTick>
 8001752:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	e009      	b.n	800176c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001758:	f7ff f8dc 	bl	8000914 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b64      	cmp	r3, #100	; 0x64
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e3b1      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_RCC_OscConfig+0x93c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ef      	beq.n	8001758 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d10d      	bne.n	80017a4 <HAL_RCC_OscConfig+0x940>
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4a02      	ldr	r2, [pc, #8]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6213      	str	r3, [r2, #32]
 8001794:	e03c      	b.n	8001810 <HAL_RCC_OscConfig+0x9ac>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	10908120 	.word	0x10908120
 80017a0:	40007000 	.word	0x40007000
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10c      	bne.n	80017ce <HAL_RCC_OscConfig+0x96a>
 80017b4:	4bc1      	ldr	r3, [pc, #772]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4ac0      	ldr	r2, [pc, #768]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	4bbe      	ldr	r3, [pc, #760]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4abd      	ldr	r2, [pc, #756]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017c6:	f023 0304 	bic.w	r3, r3, #4
 80017ca:	6213      	str	r3, [r2, #32]
 80017cc:	e020      	b.n	8001810 <HAL_RCC_OscConfig+0x9ac>
 80017ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x994>
 80017de:	4bb7      	ldr	r3, [pc, #732]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4ab6      	ldr	r2, [pc, #728]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6213      	str	r3, [r2, #32]
 80017ea:	4bb4      	ldr	r3, [pc, #720]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4ab3      	ldr	r2, [pc, #716]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6213      	str	r3, [r2, #32]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0x9ac>
 80017f8:	4bb0      	ldr	r3, [pc, #704]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4aaf      	ldr	r2, [pc, #700]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	4bad      	ldr	r3, [pc, #692]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4aac      	ldr	r2, [pc, #688]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 800180a:	f023 0304 	bic.w	r3, r3, #4
 800180e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 8081 	beq.w	8001924 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff f877 	bl	8000914 <HAL_GetTick>
 8001826:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff f872 	bl	8000914 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e345      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800184c:	2202      	movs	r2, #2
 800184e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001854:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	fa93 f2a3 	rbit	r2, r3
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001870:	2202      	movs	r2, #2
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001878:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	fa93 f2a3 	rbit	r2, r3
 8001882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001886:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800188a:	601a      	str	r2, [r3, #0]
  return result;
 800188c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001890:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001894:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0xa4c>
 80018aa:	4b84      	ldr	r3, [pc, #528]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	e013      	b.n	80018d8 <HAL_RCC_OscConfig+0xa74>
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018b8:	2202      	movs	r2, #2
 80018ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	4b79      	ldr	r3, [pc, #484]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018e0:	2102      	movs	r1, #2
 80018e2:	6011      	str	r1, [r2, #0]
 80018e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	fa92 f1a2 	rbit	r1, r2
 80018f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018fa:	6011      	str	r1, [r2, #0]
  return result;
 80018fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001900:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	fab2 f282 	clz	r2, r2
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	f002 021f 	and.w	r2, r2, #31
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f202 	lsl.w	r2, r1, r2
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d084      	beq.n	800182c <HAL_RCC_OscConfig+0x9c8>
 8001922:	e07f      	b.n	8001a24 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7fe fff6 	bl	8000914 <HAL_GetTick>
 8001928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192c:	e00b      	b.n	8001946 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7fe fff1 	bl	8000914 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e2c4      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800194e:	2202      	movs	r2, #2
 8001950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001972:	2202      	movs	r2, #2
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fa93 f2a3 	rbit	r2, r3
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800198c:	601a      	str	r2, [r3, #0]
  return result;
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001996:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d102      	bne.n	80019b2 <HAL_RCC_OscConfig+0xb4e>
 80019ac:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	e013      	b.n	80019da <HAL_RCC_OscConfig+0xb76>
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019ba:	2202      	movs	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019e2:	2102      	movs	r1, #2
 80019e4:	6011      	str	r1, [r2, #0]
 80019e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	fa92 f1a2 	rbit	r1, r2
 80019f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019fc:	6011      	str	r1, [r2, #0]
  return result;
 80019fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a02:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	fab2 f282 	clz	r2, r2
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	f002 021f 	and.w	r2, r2, #31
 8001a18:	2101      	movs	r1, #1
 8001a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d184      	bne.n	800192e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	4a22      	ldr	r2, [pc, #136]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 8001a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8242 	beq.w	8001ece <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	f000 8213 	beq.w	8001e7e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	f040 8162 	bne.w	8001d2e <HAL_RCC_OscConfig+0xeca>
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fa93 f2a3 	rbit	r2, r3
 8001a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a8e:	601a      	str	r2, [r3, #0]
  return result;
 8001a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a94:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7fe ff30 	bl	8000914 <HAL_GetTick>
 8001ab4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	e00c      	b.n	8001ad4 <HAL_RCC_OscConfig+0xc70>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7fe ff28 	bl	8000914 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1fd      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001adc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001af8:	601a      	str	r2, [r3, #0]
  return result;
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d102      	bne.n	8001b1e <HAL_RCC_OscConfig+0xcba>
 8001b18:	4bb0      	ldr	r3, [pc, #704]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	e027      	b.n	8001b6e <HAL_RCC_OscConfig+0xd0a>
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	4b9c      	ldr	r3, [pc, #624]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b72:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b7a:	6011      	str	r1, [r2, #0]
 8001b7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b80:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	fa92 f1a2 	rbit	r1, r2
 8001b8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b92:	6011      	str	r1, [r2, #0]
  return result;
 8001b94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f042 0220 	orr.w	r2, r2, #32
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f002 021f 	and.w	r2, r2, #31
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d182      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bba:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	497f      	ldr	r1, [pc, #508]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	fa93 f2a3 	rbit	r2, r3
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c06:	601a      	str	r2, [r3, #0]
  return result;
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c10:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	461a      	mov	r2, r3
 8001c24:	2301      	movs	r3, #1
 8001c26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7fe fe74 	bl	8000914 <HAL_GetTick>
 8001c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c30:	e009      	b.n	8001c46 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c32:	f7fe fe6f 	bl	8000914 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e144      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	fa93 f2a3 	rbit	r2, r3
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c6a:	601a      	str	r2, [r3, #0]
  return result;
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d102      	bne.n	8001c90 <HAL_RCC_OscConfig+0xe2c>
 8001c8a:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	e027      	b.n	8001ce0 <HAL_RCC_OscConfig+0xe7c>
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ce8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cec:	6011      	str	r1, [r2, #0]
 8001cee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	fa92 f1a2 	rbit	r1, r2
 8001cfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d00:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d04:	6011      	str	r1, [r2, #0]
  return result;
 8001d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d0a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	fab2 f282 	clz	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f002 021f 	and.w	r2, r2, #31
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f202 	lsl.w	r2, r1, r2
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d082      	beq.n	8001c32 <HAL_RCC_OscConfig+0xdce>
 8001d2c:	e0cf      	b.n	8001ece <HAL_RCC_OscConfig+0x106a>
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d52:	601a      	str	r2, [r3, #0]
  return result;
 8001d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d58:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7fe fdce 	bl	8000914 <HAL_GetTick>
 8001d78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7c:	e009      	b.n	8001d92 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7fe fdc9 	bl	8000914 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e09e      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fa93 f2a3 	rbit	r2, r3
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001db6:	601a      	str	r2, [r3, #0]
  return result;
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	095b      	lsrs	r3, r3, #5
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d104      	bne.n	8001de0 <HAL_RCC_OscConfig+0xf7c>
 8001dd6:	4b01      	ldr	r3, [pc, #4]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	e029      	b.n	8001e30 <HAL_RCC_OscConfig+0xfcc>
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001de8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	fa93 f2a3 	rbit	r2, r3
 8001dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e00:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_RCC_OscConfig+0x1078>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e34:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e3c:	6011      	str	r1, [r2, #0]
 8001e3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e42:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	fa92 f1a2 	rbit	r1, r2
 8001e4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e50:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e54:	6011      	str	r1, [r2, #0]
  return result;
 8001e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	fab2 f282 	clz	r2, r2
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f042 0220 	orr.w	r2, r2, #32
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f002 021f 	and.w	r2, r2, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d180      	bne.n	8001d7e <HAL_RCC_OscConfig+0xf1a>
 8001e7c:	e027      	b.n	8001ece <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e01e      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_RCC_OscConfig+0x1078>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e9e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d10b      	bne.n	8001eca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001eb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000

08001ee0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b09e      	sub	sp, #120	; 0x78
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e162      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b90      	ldr	r3, [pc, #576]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d910      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b8d      	ldr	r3, [pc, #564]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0207 	bic.w	r2, r3, #7
 8001f0e:	498b      	ldr	r1, [pc, #556]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b89      	ldr	r3, [pc, #548]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e14a      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	4b82      	ldr	r3, [pc, #520]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	497f      	ldr	r1, [pc, #508]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80dc 	beq.w	800210c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d13c      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xf6>
 8001f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d102      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xa6>
 8001f80:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	e00f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0xc6>
 8001f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	667b      	str	r3, [r7, #100]	; 0x64
 8001f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f98:	663b      	str	r3, [r7, #96]	; 0x60
 8001f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001faa:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fae:	fa92 f2a2 	rbit	r2, r2
 8001fb2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fb6:	fab2 f282 	clz	r2, r2
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f042 0220 	orr.w	r2, r2, #32
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	f002 021f 	and.w	r2, r2, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d17b      	bne.n	80020ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0f3      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d13c      	bne.n	8002058 <HAL_RCC_ClockConfig+0x178>
 8001fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d102      	bne.n	8002008 <HAL_RCC_ClockConfig+0x128>
 8002002:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e00f      	b.n	8002028 <HAL_RCC_ClockConfig+0x148>
 8002008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	647b      	str	r3, [r7, #68]	; 0x44
 8002016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800201a:	643b      	str	r3, [r7, #64]	; 0x40
 800201c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002024:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800202c:	63ba      	str	r2, [r7, #56]	; 0x38
 800202e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002030:	fa92 f2a2 	rbit	r2, r2
 8002034:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002038:	fab2 f282 	clz	r2, r2
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	f042 0220 	orr.w	r2, r2, #32
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	f002 021f 	and.w	r2, r2, #31
 8002048:	2101      	movs	r1, #1
 800204a:	fa01 f202 	lsl.w	r2, r1, r2
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d13a      	bne.n	80020ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0b2      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
 8002058:	2302      	movs	r3, #2
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d102      	bne.n	8002080 <HAL_RCC_ClockConfig+0x1a0>
 800207a:	4b31      	ldr	r3, [pc, #196]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	e00d      	b.n	800209c <HAL_RCC_ClockConfig+0x1bc>
 8002080:	2302      	movs	r3, #2
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
 800208c:	2302      	movs	r3, #2
 800208e:	623b      	str	r3, [r7, #32]
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	4b29      	ldr	r3, [pc, #164]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2202      	movs	r2, #2
 800209e:	61ba      	str	r2, [r7, #24]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	fa92 f2a2 	rbit	r2, r2
 80020a6:	617a      	str	r2, [r7, #20]
  return result;
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	fab2 f282 	clz	r2, r2
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f042 0220 	orr.w	r2, r2, #32
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	f002 021f 	and.w	r2, r2, #31
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e079      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f023 0203 	bic.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	491a      	ldr	r1, [pc, #104]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020dc:	f7fe fc1a 	bl	8000914 <HAL_GetTick>
 80020e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e4:	f7fe fc16 	bl	8000914 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e061      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 020c 	and.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	429a      	cmp	r2, r3
 800210a:	d1eb      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d214      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	4906      	ldr	r1, [pc, #24]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e040      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	491a      	ldr	r1, [pc, #104]	; (80021c8 <HAL_RCC_ClockConfig+0x2e8>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4912      	ldr	r1, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x2e8>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002182:	f000 f829 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002186:	4601      	mov	r1, r0
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <HAL_RCC_ClockConfig+0x2e8>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002190:	22f0      	movs	r2, #240	; 0xf0
 8002192:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	fa92 f2a2 	rbit	r2, r2
 800219a:	60fa      	str	r2, [r7, #12]
  return result;
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	fab2 f282 	clz	r2, r2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	40d3      	lsrs	r3, r2
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x2ec>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	fa21 f303 	lsr.w	r3, r1, r3
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_RCC_ClockConfig+0x2f0>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_RCC_ClockConfig+0x2f4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fb68 	bl	800088c <HAL_InitTick>
  
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3778      	adds	r7, #120	; 0x78
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08004038 	.word	0x08004038
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b08b      	sub	sp, #44	; 0x2c
 80021dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021f2:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x30>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x36>
 8002206:	e03c      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_GetSysClockFreq+0xc4>)
 800220a:	623b      	str	r3, [r7, #32]
      break;
 800220c:	e03c      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002214:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002218:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	fa92 f2a2 	rbit	r2, r2
 8002220:	607a      	str	r2, [r7, #4]
  return result;
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	fab2 f282 	clz	r2, r2
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	40d3      	lsrs	r3, r2
 800222c:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800222e:	5cd3      	ldrb	r3, [r2, r3]
 8002230:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	220f      	movs	r2, #15
 800223c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	fa92 f2a2 	rbit	r2, r2
 8002244:	60fa      	str	r2, [r7, #12]
  return result;
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	fab2 f282 	clz	r2, r2
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	40d3      	lsrs	r3, r2
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	fbb2 f2f3 	udiv	r2, r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	e004      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	623b      	str	r3, [r7, #32]
      break;
 8002280:	e002      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002284:	623b      	str	r3, [r7, #32]
      break;
 8002286:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002288:	6a3b      	ldr	r3, [r7, #32]
}
 800228a:	4618      	mov	r0, r3
 800228c:	372c      	adds	r7, #44	; 0x2c
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	007a1200 	.word	0x007a1200
 80022a0:	08004050 	.word	0x08004050
 80022a4:	08004060 	.word	0x08004060
 80022a8:	003d0900 	.word	0x003d0900

080022ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000000 	.word	0x20000000

080022c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022ca:	f7ff ffef 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 80022ce:	4601      	mov	r1, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	fa92 f2a2 	rbit	r2, r2
 80022e4:	603a      	str	r2, [r7, #0]
  return result;
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	fab2 f282 	clz	r2, r2
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	40d3      	lsrs	r3, r2
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	08004048 	.word	0x08004048

08002308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800230e:	f7ff ffcd 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 8002312:	4601      	mov	r1, r0
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800231c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002320:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	fa92 f2a2 	rbit	r2, r2
 8002328:	603a      	str	r2, [r7, #0]
  return result;
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	40d3      	lsrs	r3, r2
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	08004048 	.word	0x08004048

0800234c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b092      	sub	sp, #72	; 0x48
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80d4 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002370:	4b4e      	ldr	r3, [pc, #312]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10e      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4a4a      	ldr	r2, [pc, #296]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002386:	61d3      	str	r3, [r2, #28]
 8002388:	4b48      	ldr	r3, [pc, #288]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b45      	ldr	r3, [pc, #276]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d118      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a6:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a41      	ldr	r2, [pc, #260]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7fe faaf 	bl	8000914 <HAL_GetTick>
 80023b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	e008      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ba:	f7fe faab 	bl	8000914 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b64      	cmp	r3, #100	; 0x64
 80023c6:	d901      	bls.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e169      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023d8:	4b34      	ldr	r3, [pc, #208]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8084 	beq.w	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d07c      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023f8:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	461a      	mov	r2, r3
 8002422:	2301      	movs	r3, #1
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	461a      	mov	r2, r3
 8002446:	2300      	movs	r3, #0
 8002448:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800244a:	4a18      	ldr	r2, [pc, #96]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d04b      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7fe fa5b 	bl	8000914 <HAL_GetTick>
 800245e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fa57 	bl	8000914 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e113      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002478:	2302      	movs	r3, #2
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
 8002484:	2302      	movs	r3, #2
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	61fb      	str	r3, [r7, #28]
  return result;
 8002490:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d108      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80024a6:	4b01      	ldr	r3, [pc, #4]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	e00d      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
 80024b4:	10908100 	.word	0x10908100
 80024b8:	2302      	movs	r3, #2
 80024ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	4b78      	ldr	r3, [pc, #480]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	2202      	movs	r2, #2
 80024ca:	613a      	str	r2, [r7, #16]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	fa92 f2a2 	rbit	r2, r2
 80024d2:	60fa      	str	r2, [r7, #12]
  return result;
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	fab2 f282 	clz	r2, r2
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f002 021f 	and.w	r2, r2, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0b7      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024f2:	4b6d      	ldr	r3, [pc, #436]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	496a      	ldr	r1, [pc, #424]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002504:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b66      	ldr	r3, [pc, #408]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	4a65      	ldr	r2, [pc, #404]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002516:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002524:	4b60      	ldr	r3, [pc, #384]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f023 0203 	bic.w	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	495d      	ldr	r1, [pc, #372]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002532:	4313      	orrs	r3, r2
 8002534:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002542:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4956      	ldr	r1, [pc, #344]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002550:	4313      	orrs	r3, r2
 8002552:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002560:	4b51      	ldr	r3, [pc, #324]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	494e      	ldr	r1, [pc, #312]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800256e:	4313      	orrs	r3, r2
 8002570:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800257e:	4b4a      	ldr	r3, [pc, #296]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f023 0210 	bic.w	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4947      	ldr	r1, [pc, #284]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800259c:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	493f      	ldr	r1, [pc, #252]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025ba:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f023 0220 	bic.w	r2, r3, #32
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4938      	ldr	r1, [pc, #224]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	4930      	ldr	r1, [pc, #192]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025f6:	4b2c      	ldr	r3, [pc, #176]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	4929      	ldr	r1, [pc, #164]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002604:	4313      	orrs	r3, r2
 8002606:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	4921      	ldr	r1, [pc, #132]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	491a      	ldr	r1, [pc, #104]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	4912      	ldr	r1, [pc, #72]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	490b      	ldr	r1, [pc, #44]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800267c:	4313      	orrs	r3, r2
 800267e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	4903      	ldr	r1, [pc, #12]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800269a:	4313      	orrs	r3, r2
 800269c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3748      	adds	r7, #72	; 0x48
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000

080026ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e040      	b.n	8002740 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fd ff46 	bl	8000560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8c0 	bl	8002870 <UART_SetConfig>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e022      	b.n	8002740 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa8a 	bl	8002c1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fb11 	bl	8002d60 <UART_CheckIdleState>
 800273e:	4603      	mov	r3, r0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800275c:	2b20      	cmp	r3, #32
 800275e:	f040 8082 	bne.w	8002866 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_UART_Transmit+0x26>
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07a      	b.n	8002868 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_UART_Transmit+0x38>
 800277c:	2302      	movs	r3, #2
 800277e:	e073      	b.n	8002868 <HAL_UART_Transmit+0x120>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2221      	movs	r2, #33	; 0x21
 8002794:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002796:	f7fe f8bd 	bl	8000914 <HAL_GetTick>
 800279a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	88fa      	ldrh	r2, [r7, #6]
 80027a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	88fa      	ldrh	r2, [r7, #6]
 80027a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b4:	d108      	bne.n	80027c8 <HAL_UART_Transmit+0x80>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d104      	bne.n	80027c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	e003      	b.n	80027d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80027d8:	e02d      	b.n	8002836 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2180      	movs	r1, #128	; 0x80
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fb04 	bl	8002df2 <UART_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e039      	b.n	8002868 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10b      	bne.n	8002812 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	881a      	ldrh	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002806:	b292      	uxth	r2, r2
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	3302      	adds	r3, #2
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	e008      	b.n	8002824 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b292      	uxth	r2, r2
 800281c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3301      	adds	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1cb      	bne.n	80027da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2200      	movs	r2, #0
 800284a:	2140      	movs	r1, #64	; 0x40
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fad0 	bl	8002df2 <UART_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e005      	b.n	8002868 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800289e:	f023 030c 	bic.w	r3, r3, #12
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	6979      	ldr	r1, [r7, #20]
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4aa8      	ldr	r2, [pc, #672]	; (8002b8c <UART_SetConfig+0x31c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d120      	bne.n	8002932 <UART_SetConfig+0xc2>
 80028f0:	4ba7      	ldr	r3, [pc, #668]	; (8002b90 <UART_SetConfig+0x320>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d817      	bhi.n	800292c <UART_SetConfig+0xbc>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <UART_SetConfig+0x94>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002915 	.word	0x08002915
 8002908:	08002921 	.word	0x08002921
 800290c:	08002927 	.word	0x08002927
 8002910:	0800291b 	.word	0x0800291b
 8002914:	2301      	movs	r3, #1
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	e0b5      	b.n	8002a86 <UART_SetConfig+0x216>
 800291a:	2302      	movs	r3, #2
 800291c:	77fb      	strb	r3, [r7, #31]
 800291e:	e0b2      	b.n	8002a86 <UART_SetConfig+0x216>
 8002920:	2304      	movs	r3, #4
 8002922:	77fb      	strb	r3, [r7, #31]
 8002924:	e0af      	b.n	8002a86 <UART_SetConfig+0x216>
 8002926:	2308      	movs	r3, #8
 8002928:	77fb      	strb	r3, [r7, #31]
 800292a:	e0ac      	b.n	8002a86 <UART_SetConfig+0x216>
 800292c:	2310      	movs	r3, #16
 800292e:	77fb      	strb	r3, [r7, #31]
 8002930:	e0a9      	b.n	8002a86 <UART_SetConfig+0x216>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a97      	ldr	r2, [pc, #604]	; (8002b94 <UART_SetConfig+0x324>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d124      	bne.n	8002986 <UART_SetConfig+0x116>
 800293c:	4b94      	ldr	r3, [pc, #592]	; (8002b90 <UART_SetConfig+0x320>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002944:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002948:	d011      	beq.n	800296e <UART_SetConfig+0xfe>
 800294a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800294e:	d817      	bhi.n	8002980 <UART_SetConfig+0x110>
 8002950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002954:	d011      	beq.n	800297a <UART_SetConfig+0x10a>
 8002956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800295a:	d811      	bhi.n	8002980 <UART_SetConfig+0x110>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <UART_SetConfig+0xf8>
 8002960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002964:	d006      	beq.n	8002974 <UART_SetConfig+0x104>
 8002966:	e00b      	b.n	8002980 <UART_SetConfig+0x110>
 8002968:	2300      	movs	r3, #0
 800296a:	77fb      	strb	r3, [r7, #31]
 800296c:	e08b      	b.n	8002a86 <UART_SetConfig+0x216>
 800296e:	2302      	movs	r3, #2
 8002970:	77fb      	strb	r3, [r7, #31]
 8002972:	e088      	b.n	8002a86 <UART_SetConfig+0x216>
 8002974:	2304      	movs	r3, #4
 8002976:	77fb      	strb	r3, [r7, #31]
 8002978:	e085      	b.n	8002a86 <UART_SetConfig+0x216>
 800297a:	2308      	movs	r3, #8
 800297c:	77fb      	strb	r3, [r7, #31]
 800297e:	e082      	b.n	8002a86 <UART_SetConfig+0x216>
 8002980:	2310      	movs	r3, #16
 8002982:	77fb      	strb	r3, [r7, #31]
 8002984:	e07f      	b.n	8002a86 <UART_SetConfig+0x216>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <UART_SetConfig+0x328>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d124      	bne.n	80029da <UART_SetConfig+0x16a>
 8002990:	4b7f      	ldr	r3, [pc, #508]	; (8002b90 <UART_SetConfig+0x320>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002998:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800299c:	d011      	beq.n	80029c2 <UART_SetConfig+0x152>
 800299e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029a2:	d817      	bhi.n	80029d4 <UART_SetConfig+0x164>
 80029a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029a8:	d011      	beq.n	80029ce <UART_SetConfig+0x15e>
 80029aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029ae:	d811      	bhi.n	80029d4 <UART_SetConfig+0x164>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <UART_SetConfig+0x14c>
 80029b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029b8:	d006      	beq.n	80029c8 <UART_SetConfig+0x158>
 80029ba:	e00b      	b.n	80029d4 <UART_SetConfig+0x164>
 80029bc:	2300      	movs	r3, #0
 80029be:	77fb      	strb	r3, [r7, #31]
 80029c0:	e061      	b.n	8002a86 <UART_SetConfig+0x216>
 80029c2:	2302      	movs	r3, #2
 80029c4:	77fb      	strb	r3, [r7, #31]
 80029c6:	e05e      	b.n	8002a86 <UART_SetConfig+0x216>
 80029c8:	2304      	movs	r3, #4
 80029ca:	77fb      	strb	r3, [r7, #31]
 80029cc:	e05b      	b.n	8002a86 <UART_SetConfig+0x216>
 80029ce:	2308      	movs	r3, #8
 80029d0:	77fb      	strb	r3, [r7, #31]
 80029d2:	e058      	b.n	8002a86 <UART_SetConfig+0x216>
 80029d4:	2310      	movs	r3, #16
 80029d6:	77fb      	strb	r3, [r7, #31]
 80029d8:	e055      	b.n	8002a86 <UART_SetConfig+0x216>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6f      	ldr	r2, [pc, #444]	; (8002b9c <UART_SetConfig+0x32c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d124      	bne.n	8002a2e <UART_SetConfig+0x1be>
 80029e4:	4b6a      	ldr	r3, [pc, #424]	; (8002b90 <UART_SetConfig+0x320>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80029ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029f0:	d011      	beq.n	8002a16 <UART_SetConfig+0x1a6>
 80029f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029f6:	d817      	bhi.n	8002a28 <UART_SetConfig+0x1b8>
 80029f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029fc:	d011      	beq.n	8002a22 <UART_SetConfig+0x1b2>
 80029fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a02:	d811      	bhi.n	8002a28 <UART_SetConfig+0x1b8>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <UART_SetConfig+0x1a0>
 8002a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0c:	d006      	beq.n	8002a1c <UART_SetConfig+0x1ac>
 8002a0e:	e00b      	b.n	8002a28 <UART_SetConfig+0x1b8>
 8002a10:	2300      	movs	r3, #0
 8002a12:	77fb      	strb	r3, [r7, #31]
 8002a14:	e037      	b.n	8002a86 <UART_SetConfig+0x216>
 8002a16:	2302      	movs	r3, #2
 8002a18:	77fb      	strb	r3, [r7, #31]
 8002a1a:	e034      	b.n	8002a86 <UART_SetConfig+0x216>
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	77fb      	strb	r3, [r7, #31]
 8002a20:	e031      	b.n	8002a86 <UART_SetConfig+0x216>
 8002a22:	2308      	movs	r3, #8
 8002a24:	77fb      	strb	r3, [r7, #31]
 8002a26:	e02e      	b.n	8002a86 <UART_SetConfig+0x216>
 8002a28:	2310      	movs	r3, #16
 8002a2a:	77fb      	strb	r3, [r7, #31]
 8002a2c:	e02b      	b.n	8002a86 <UART_SetConfig+0x216>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a5b      	ldr	r2, [pc, #364]	; (8002ba0 <UART_SetConfig+0x330>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d124      	bne.n	8002a82 <UART_SetConfig+0x212>
 8002a38:	4b55      	ldr	r3, [pc, #340]	; (8002b90 <UART_SetConfig+0x320>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002a40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a44:	d011      	beq.n	8002a6a <UART_SetConfig+0x1fa>
 8002a46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a4a:	d817      	bhi.n	8002a7c <UART_SetConfig+0x20c>
 8002a4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a50:	d011      	beq.n	8002a76 <UART_SetConfig+0x206>
 8002a52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a56:	d811      	bhi.n	8002a7c <UART_SetConfig+0x20c>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <UART_SetConfig+0x1f4>
 8002a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a60:	d006      	beq.n	8002a70 <UART_SetConfig+0x200>
 8002a62:	e00b      	b.n	8002a7c <UART_SetConfig+0x20c>
 8002a64:	2300      	movs	r3, #0
 8002a66:	77fb      	strb	r3, [r7, #31]
 8002a68:	e00d      	b.n	8002a86 <UART_SetConfig+0x216>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	77fb      	strb	r3, [r7, #31]
 8002a6e:	e00a      	b.n	8002a86 <UART_SetConfig+0x216>
 8002a70:	2304      	movs	r3, #4
 8002a72:	77fb      	strb	r3, [r7, #31]
 8002a74:	e007      	b.n	8002a86 <UART_SetConfig+0x216>
 8002a76:	2308      	movs	r3, #8
 8002a78:	77fb      	strb	r3, [r7, #31]
 8002a7a:	e004      	b.n	8002a86 <UART_SetConfig+0x216>
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	77fb      	strb	r3, [r7, #31]
 8002a80:	e001      	b.n	8002a86 <UART_SetConfig+0x216>
 8002a82:	2310      	movs	r3, #16
 8002a84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8e:	d15c      	bne.n	8002b4a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8002a90:	7ffb      	ldrb	r3, [r7, #31]
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d827      	bhi.n	8002ae6 <UART_SetConfig+0x276>
 8002a96:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <UART_SetConfig+0x22c>)
 8002a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9c:	08002ac1 	.word	0x08002ac1
 8002aa0:	08002ac9 	.word	0x08002ac9
 8002aa4:	08002ad1 	.word	0x08002ad1
 8002aa8:	08002ae7 	.word	0x08002ae7
 8002aac:	08002ad7 	.word	0x08002ad7
 8002ab0:	08002ae7 	.word	0x08002ae7
 8002ab4:	08002ae7 	.word	0x08002ae7
 8002ab8:	08002ae7 	.word	0x08002ae7
 8002abc:	08002adf 	.word	0x08002adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ac0:	f7ff fc00 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 8002ac4:	61b8      	str	r0, [r7, #24]
        break;
 8002ac6:	e013      	b.n	8002af0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ac8:	f7ff fc1e 	bl	8002308 <HAL_RCC_GetPCLK2Freq>
 8002acc:	61b8      	str	r0, [r7, #24]
        break;
 8002ace:	e00f      	b.n	8002af0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ad0:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <UART_SetConfig+0x334>)
 8002ad2:	61bb      	str	r3, [r7, #24]
        break;
 8002ad4:	e00c      	b.n	8002af0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ad6:	f7ff fb7f 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002ada:	61b8      	str	r0, [r7, #24]
        break;
 8002adc:	e008      	b.n	8002af0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ae2:	61bb      	str	r3, [r7, #24]
        break;
 8002ae4:	e004      	b.n	8002af0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	77bb      	strb	r3, [r7, #30]
        break;
 8002aee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8084 	beq.w	8002c00 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	005a      	lsls	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	441a      	add	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	d916      	bls.n	8002b44 <UART_SetConfig+0x2d4>
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1c:	d212      	bcs.n	8002b44 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f023 030f 	bic.w	r3, r3, #15
 8002b26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	89fb      	ldrh	r3, [r7, #14]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	89fa      	ldrh	r2, [r7, #14]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	e05d      	b.n	8002c00 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	77bb      	strb	r3, [r7, #30]
 8002b48:	e05a      	b.n	8002c00 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b4a:	7ffb      	ldrb	r3, [r7, #31]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d836      	bhi.n	8002bbe <UART_SetConfig+0x34e>
 8002b50:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <UART_SetConfig+0x2e8>)
 8002b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b56:	bf00      	nop
 8002b58:	08002b7d 	.word	0x08002b7d
 8002b5c:	08002b85 	.word	0x08002b85
 8002b60:	08002ba9 	.word	0x08002ba9
 8002b64:	08002bbf 	.word	0x08002bbf
 8002b68:	08002baf 	.word	0x08002baf
 8002b6c:	08002bbf 	.word	0x08002bbf
 8002b70:	08002bbf 	.word	0x08002bbf
 8002b74:	08002bbf 	.word	0x08002bbf
 8002b78:	08002bb7 	.word	0x08002bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b7c:	f7ff fba2 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 8002b80:	61b8      	str	r0, [r7, #24]
        break;
 8002b82:	e021      	b.n	8002bc8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b84:	f7ff fbc0 	bl	8002308 <HAL_RCC_GetPCLK2Freq>
 8002b88:	61b8      	str	r0, [r7, #24]
        break;
 8002b8a:	e01d      	b.n	8002bc8 <UART_SetConfig+0x358>
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40004400 	.word	0x40004400
 8002b98:	40004800 	.word	0x40004800
 8002b9c:	40004c00 	.word	0x40004c00
 8002ba0:	40005000 	.word	0x40005000
 8002ba4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <UART_SetConfig+0x3a8>)
 8002baa:	61bb      	str	r3, [r7, #24]
        break;
 8002bac:	e00c      	b.n	8002bc8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bae:	f7ff fb13 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002bb2:	61b8      	str	r0, [r7, #24]
        break;
 8002bb4:	e008      	b.n	8002bc8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bba:	61bb      	str	r3, [r7, #24]
        break;
 8002bbc:	e004      	b.n	8002bc8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	77bb      	strb	r3, [r7, #30]
        break;
 8002bc6:	bf00      	nop
    }

    if (pclk != 0U)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d018      	beq.n	8002c00 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	085a      	lsrs	r2, r3, #1
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	441a      	add	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	d908      	bls.n	8002bfc <UART_SetConfig+0x38c>
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d204      	bcs.n	8002bfc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	e001      	b.n	8002c00 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	007a1200 	.word	0x007a1200

08002c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01a      	beq.n	8002d32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d1a:	d10a      	bne.n	8002d32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	605a      	str	r2, [r3, #4]
  }
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d70:	f7fd fdd0 	bl	8000914 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d10e      	bne.n	8002da2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f82d 	bl	8002df2 <UART_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e023      	b.n	8002dea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d10e      	bne.n	8002dce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002db0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f817 	bl	8002df2 <UART_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e00d      	b.n	8002dea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b09c      	sub	sp, #112	; 0x70
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e02:	e0a5      	b.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0a:	f000 80a1 	beq.w	8002f50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0e:	f7fd fd81 	bl	8000914 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d302      	bcc.n	8002e24 <UART_WaitOnFlagUntilTimeout+0x32>
 8002e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d13e      	bne.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e38:	667b      	str	r3, [r7, #100]	; 0x64
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e44:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e6      	bne.n	8002e24 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e60:	e853 3f00 	ldrex	r3, [r3]
 8002e64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3308      	adds	r3, #8
 8002e74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e76:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e5      	bne.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e067      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d04f      	beq.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ebe:	d147      	bne.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	e853 3f00 	ldrex	r3, [r3]
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ede:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef0:	e841 2300 	strex	r3, r2, [r1]
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e6      	bne.n	8002eca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3308      	adds	r3, #8
 8002f1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f1c:	623a      	str	r2, [r7, #32]
 8002f1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	69f9      	ldr	r1, [r7, #28]
 8002f22:	6a3a      	ldr	r2, [r7, #32]
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e5      	bne.n	8002efc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e010      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	f43f af4a 	beq.w	8002e04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3770      	adds	r7, #112	; 0x70
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <__errno>:
 8002f7c:	4b01      	ldr	r3, [pc, #4]	; (8002f84 <__errno+0x8>)
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	2000000c 	.word	0x2000000c

08002f88 <__libc_init_array>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	4d0d      	ldr	r5, [pc, #52]	; (8002fc0 <__libc_init_array+0x38>)
 8002f8c:	4c0d      	ldr	r4, [pc, #52]	; (8002fc4 <__libc_init_array+0x3c>)
 8002f8e:	1b64      	subs	r4, r4, r5
 8002f90:	10a4      	asrs	r4, r4, #2
 8002f92:	2600      	movs	r6, #0
 8002f94:	42a6      	cmp	r6, r4
 8002f96:	d109      	bne.n	8002fac <__libc_init_array+0x24>
 8002f98:	4d0b      	ldr	r5, [pc, #44]	; (8002fc8 <__libc_init_array+0x40>)
 8002f9a:	4c0c      	ldr	r4, [pc, #48]	; (8002fcc <__libc_init_array+0x44>)
 8002f9c:	f001 f824 	bl	8003fe8 <_init>
 8002fa0:	1b64      	subs	r4, r4, r5
 8002fa2:	10a4      	asrs	r4, r4, #2
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	42a6      	cmp	r6, r4
 8002fa8:	d105      	bne.n	8002fb6 <__libc_init_array+0x2e>
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
 8002fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb0:	4798      	blx	r3
 8002fb2:	3601      	adds	r6, #1
 8002fb4:	e7ee      	b.n	8002f94 <__libc_init_array+0xc>
 8002fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fba:	4798      	blx	r3
 8002fbc:	3601      	adds	r6, #1
 8002fbe:	e7f2      	b.n	8002fa6 <__libc_init_array+0x1e>
 8002fc0:	08004108 	.word	0x08004108
 8002fc4:	08004108 	.word	0x08004108
 8002fc8:	08004108 	.word	0x08004108
 8002fcc:	0800410c 	.word	0x0800410c

08002fd0 <memset>:
 8002fd0:	4402      	add	r2, r0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d100      	bne.n	8002fda <memset+0xa>
 8002fd8:	4770      	bx	lr
 8002fda:	f803 1b01 	strb.w	r1, [r3], #1
 8002fde:	e7f9      	b.n	8002fd4 <memset+0x4>

08002fe0 <iprintf>:
 8002fe0:	b40f      	push	{r0, r1, r2, r3}
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <iprintf+0x2c>)
 8002fe4:	b513      	push	{r0, r1, r4, lr}
 8002fe6:	681c      	ldr	r4, [r3, #0]
 8002fe8:	b124      	cbz	r4, 8002ff4 <iprintf+0x14>
 8002fea:	69a3      	ldr	r3, [r4, #24]
 8002fec:	b913      	cbnz	r3, 8002ff4 <iprintf+0x14>
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f000 fa5e 	bl	80034b0 <__sinit>
 8002ff4:	ab05      	add	r3, sp, #20
 8002ff6:	9a04      	ldr	r2, [sp, #16]
 8002ff8:	68a1      	ldr	r1, [r4, #8]
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f000 fc67 	bl	80038d0 <_vfiprintf_r>
 8003002:	b002      	add	sp, #8
 8003004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003008:	b004      	add	sp, #16
 800300a:	4770      	bx	lr
 800300c:	2000000c 	.word	0x2000000c

08003010 <_puts_r>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	460e      	mov	r6, r1
 8003014:	4605      	mov	r5, r0
 8003016:	b118      	cbz	r0, 8003020 <_puts_r+0x10>
 8003018:	6983      	ldr	r3, [r0, #24]
 800301a:	b90b      	cbnz	r3, 8003020 <_puts_r+0x10>
 800301c:	f000 fa48 	bl	80034b0 <__sinit>
 8003020:	69ab      	ldr	r3, [r5, #24]
 8003022:	68ac      	ldr	r4, [r5, #8]
 8003024:	b913      	cbnz	r3, 800302c <_puts_r+0x1c>
 8003026:	4628      	mov	r0, r5
 8003028:	f000 fa42 	bl	80034b0 <__sinit>
 800302c:	4b2c      	ldr	r3, [pc, #176]	; (80030e0 <_puts_r+0xd0>)
 800302e:	429c      	cmp	r4, r3
 8003030:	d120      	bne.n	8003074 <_puts_r+0x64>
 8003032:	686c      	ldr	r4, [r5, #4]
 8003034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003036:	07db      	lsls	r3, r3, #31
 8003038:	d405      	bmi.n	8003046 <_puts_r+0x36>
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	0598      	lsls	r0, r3, #22
 800303e:	d402      	bmi.n	8003046 <_puts_r+0x36>
 8003040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003042:	f000 fad3 	bl	80035ec <__retarget_lock_acquire_recursive>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	0719      	lsls	r1, r3, #28
 800304a:	d51d      	bpl.n	8003088 <_puts_r+0x78>
 800304c:	6923      	ldr	r3, [r4, #16]
 800304e:	b1db      	cbz	r3, 8003088 <_puts_r+0x78>
 8003050:	3e01      	subs	r6, #1
 8003052:	68a3      	ldr	r3, [r4, #8]
 8003054:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003058:	3b01      	subs	r3, #1
 800305a:	60a3      	str	r3, [r4, #8]
 800305c:	bb39      	cbnz	r1, 80030ae <_puts_r+0x9e>
 800305e:	2b00      	cmp	r3, #0
 8003060:	da38      	bge.n	80030d4 <_puts_r+0xc4>
 8003062:	4622      	mov	r2, r4
 8003064:	210a      	movs	r1, #10
 8003066:	4628      	mov	r0, r5
 8003068:	f000 f848 	bl	80030fc <__swbuf_r>
 800306c:	3001      	adds	r0, #1
 800306e:	d011      	beq.n	8003094 <_puts_r+0x84>
 8003070:	250a      	movs	r5, #10
 8003072:	e011      	b.n	8003098 <_puts_r+0x88>
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <_puts_r+0xd4>)
 8003076:	429c      	cmp	r4, r3
 8003078:	d101      	bne.n	800307e <_puts_r+0x6e>
 800307a:	68ac      	ldr	r4, [r5, #8]
 800307c:	e7da      	b.n	8003034 <_puts_r+0x24>
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <_puts_r+0xd8>)
 8003080:	429c      	cmp	r4, r3
 8003082:	bf08      	it	eq
 8003084:	68ec      	ldreq	r4, [r5, #12]
 8003086:	e7d5      	b.n	8003034 <_puts_r+0x24>
 8003088:	4621      	mov	r1, r4
 800308a:	4628      	mov	r0, r5
 800308c:	f000 f888 	bl	80031a0 <__swsetup_r>
 8003090:	2800      	cmp	r0, #0
 8003092:	d0dd      	beq.n	8003050 <_puts_r+0x40>
 8003094:	f04f 35ff 	mov.w	r5, #4294967295
 8003098:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800309a:	07da      	lsls	r2, r3, #31
 800309c:	d405      	bmi.n	80030aa <_puts_r+0x9a>
 800309e:	89a3      	ldrh	r3, [r4, #12]
 80030a0:	059b      	lsls	r3, r3, #22
 80030a2:	d402      	bmi.n	80030aa <_puts_r+0x9a>
 80030a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030a6:	f000 faa2 	bl	80035ee <__retarget_lock_release_recursive>
 80030aa:	4628      	mov	r0, r5
 80030ac:	bd70      	pop	{r4, r5, r6, pc}
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	da04      	bge.n	80030bc <_puts_r+0xac>
 80030b2:	69a2      	ldr	r2, [r4, #24]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	dc06      	bgt.n	80030c6 <_puts_r+0xb6>
 80030b8:	290a      	cmp	r1, #10
 80030ba:	d004      	beq.n	80030c6 <_puts_r+0xb6>
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	6022      	str	r2, [r4, #0]
 80030c2:	7019      	strb	r1, [r3, #0]
 80030c4:	e7c5      	b.n	8003052 <_puts_r+0x42>
 80030c6:	4622      	mov	r2, r4
 80030c8:	4628      	mov	r0, r5
 80030ca:	f000 f817 	bl	80030fc <__swbuf_r>
 80030ce:	3001      	adds	r0, #1
 80030d0:	d1bf      	bne.n	8003052 <_puts_r+0x42>
 80030d2:	e7df      	b.n	8003094 <_puts_r+0x84>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	250a      	movs	r5, #10
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	6022      	str	r2, [r4, #0]
 80030dc:	701d      	strb	r5, [r3, #0]
 80030de:	e7db      	b.n	8003098 <_puts_r+0x88>
 80030e0:	08004094 	.word	0x08004094
 80030e4:	080040b4 	.word	0x080040b4
 80030e8:	08004074 	.word	0x08004074

080030ec <puts>:
 80030ec:	4b02      	ldr	r3, [pc, #8]	; (80030f8 <puts+0xc>)
 80030ee:	4601      	mov	r1, r0
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	f7ff bf8d 	b.w	8003010 <_puts_r>
 80030f6:	bf00      	nop
 80030f8:	2000000c 	.word	0x2000000c

080030fc <__swbuf_r>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	460e      	mov	r6, r1
 8003100:	4614      	mov	r4, r2
 8003102:	4605      	mov	r5, r0
 8003104:	b118      	cbz	r0, 800310e <__swbuf_r+0x12>
 8003106:	6983      	ldr	r3, [r0, #24]
 8003108:	b90b      	cbnz	r3, 800310e <__swbuf_r+0x12>
 800310a:	f000 f9d1 	bl	80034b0 <__sinit>
 800310e:	4b21      	ldr	r3, [pc, #132]	; (8003194 <__swbuf_r+0x98>)
 8003110:	429c      	cmp	r4, r3
 8003112:	d12b      	bne.n	800316c <__swbuf_r+0x70>
 8003114:	686c      	ldr	r4, [r5, #4]
 8003116:	69a3      	ldr	r3, [r4, #24]
 8003118:	60a3      	str	r3, [r4, #8]
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	071a      	lsls	r2, r3, #28
 800311e:	d52f      	bpl.n	8003180 <__swbuf_r+0x84>
 8003120:	6923      	ldr	r3, [r4, #16]
 8003122:	b36b      	cbz	r3, 8003180 <__swbuf_r+0x84>
 8003124:	6923      	ldr	r3, [r4, #16]
 8003126:	6820      	ldr	r0, [r4, #0]
 8003128:	1ac0      	subs	r0, r0, r3
 800312a:	6963      	ldr	r3, [r4, #20]
 800312c:	b2f6      	uxtb	r6, r6
 800312e:	4283      	cmp	r3, r0
 8003130:	4637      	mov	r7, r6
 8003132:	dc04      	bgt.n	800313e <__swbuf_r+0x42>
 8003134:	4621      	mov	r1, r4
 8003136:	4628      	mov	r0, r5
 8003138:	f000 f926 	bl	8003388 <_fflush_r>
 800313c:	bb30      	cbnz	r0, 800318c <__swbuf_r+0x90>
 800313e:	68a3      	ldr	r3, [r4, #8]
 8003140:	3b01      	subs	r3, #1
 8003142:	60a3      	str	r3, [r4, #8]
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	6022      	str	r2, [r4, #0]
 800314a:	701e      	strb	r6, [r3, #0]
 800314c:	6963      	ldr	r3, [r4, #20]
 800314e:	3001      	adds	r0, #1
 8003150:	4283      	cmp	r3, r0
 8003152:	d004      	beq.n	800315e <__swbuf_r+0x62>
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	07db      	lsls	r3, r3, #31
 8003158:	d506      	bpl.n	8003168 <__swbuf_r+0x6c>
 800315a:	2e0a      	cmp	r6, #10
 800315c:	d104      	bne.n	8003168 <__swbuf_r+0x6c>
 800315e:	4621      	mov	r1, r4
 8003160:	4628      	mov	r0, r5
 8003162:	f000 f911 	bl	8003388 <_fflush_r>
 8003166:	b988      	cbnz	r0, 800318c <__swbuf_r+0x90>
 8003168:	4638      	mov	r0, r7
 800316a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800316c:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <__swbuf_r+0x9c>)
 800316e:	429c      	cmp	r4, r3
 8003170:	d101      	bne.n	8003176 <__swbuf_r+0x7a>
 8003172:	68ac      	ldr	r4, [r5, #8]
 8003174:	e7cf      	b.n	8003116 <__swbuf_r+0x1a>
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <__swbuf_r+0xa0>)
 8003178:	429c      	cmp	r4, r3
 800317a:	bf08      	it	eq
 800317c:	68ec      	ldreq	r4, [r5, #12]
 800317e:	e7ca      	b.n	8003116 <__swbuf_r+0x1a>
 8003180:	4621      	mov	r1, r4
 8003182:	4628      	mov	r0, r5
 8003184:	f000 f80c 	bl	80031a0 <__swsetup_r>
 8003188:	2800      	cmp	r0, #0
 800318a:	d0cb      	beq.n	8003124 <__swbuf_r+0x28>
 800318c:	f04f 37ff 	mov.w	r7, #4294967295
 8003190:	e7ea      	b.n	8003168 <__swbuf_r+0x6c>
 8003192:	bf00      	nop
 8003194:	08004094 	.word	0x08004094
 8003198:	080040b4 	.word	0x080040b4
 800319c:	08004074 	.word	0x08004074

080031a0 <__swsetup_r>:
 80031a0:	4b32      	ldr	r3, [pc, #200]	; (800326c <__swsetup_r+0xcc>)
 80031a2:	b570      	push	{r4, r5, r6, lr}
 80031a4:	681d      	ldr	r5, [r3, #0]
 80031a6:	4606      	mov	r6, r0
 80031a8:	460c      	mov	r4, r1
 80031aa:	b125      	cbz	r5, 80031b6 <__swsetup_r+0x16>
 80031ac:	69ab      	ldr	r3, [r5, #24]
 80031ae:	b913      	cbnz	r3, 80031b6 <__swsetup_r+0x16>
 80031b0:	4628      	mov	r0, r5
 80031b2:	f000 f97d 	bl	80034b0 <__sinit>
 80031b6:	4b2e      	ldr	r3, [pc, #184]	; (8003270 <__swsetup_r+0xd0>)
 80031b8:	429c      	cmp	r4, r3
 80031ba:	d10f      	bne.n	80031dc <__swsetup_r+0x3c>
 80031bc:	686c      	ldr	r4, [r5, #4]
 80031be:	89a3      	ldrh	r3, [r4, #12]
 80031c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031c4:	0719      	lsls	r1, r3, #28
 80031c6:	d42c      	bmi.n	8003222 <__swsetup_r+0x82>
 80031c8:	06dd      	lsls	r5, r3, #27
 80031ca:	d411      	bmi.n	80031f0 <__swsetup_r+0x50>
 80031cc:	2309      	movs	r3, #9
 80031ce:	6033      	str	r3, [r6, #0]
 80031d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80031d4:	81a3      	strh	r3, [r4, #12]
 80031d6:	f04f 30ff 	mov.w	r0, #4294967295
 80031da:	e03e      	b.n	800325a <__swsetup_r+0xba>
 80031dc:	4b25      	ldr	r3, [pc, #148]	; (8003274 <__swsetup_r+0xd4>)
 80031de:	429c      	cmp	r4, r3
 80031e0:	d101      	bne.n	80031e6 <__swsetup_r+0x46>
 80031e2:	68ac      	ldr	r4, [r5, #8]
 80031e4:	e7eb      	b.n	80031be <__swsetup_r+0x1e>
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <__swsetup_r+0xd8>)
 80031e8:	429c      	cmp	r4, r3
 80031ea:	bf08      	it	eq
 80031ec:	68ec      	ldreq	r4, [r5, #12]
 80031ee:	e7e6      	b.n	80031be <__swsetup_r+0x1e>
 80031f0:	0758      	lsls	r0, r3, #29
 80031f2:	d512      	bpl.n	800321a <__swsetup_r+0x7a>
 80031f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031f6:	b141      	cbz	r1, 800320a <__swsetup_r+0x6a>
 80031f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031fc:	4299      	cmp	r1, r3
 80031fe:	d002      	beq.n	8003206 <__swsetup_r+0x66>
 8003200:	4630      	mov	r0, r6
 8003202:	f000 fa5b 	bl	80036bc <_free_r>
 8003206:	2300      	movs	r3, #0
 8003208:	6363      	str	r3, [r4, #52]	; 0x34
 800320a:	89a3      	ldrh	r3, [r4, #12]
 800320c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003210:	81a3      	strh	r3, [r4, #12]
 8003212:	2300      	movs	r3, #0
 8003214:	6063      	str	r3, [r4, #4]
 8003216:	6923      	ldr	r3, [r4, #16]
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	89a3      	ldrh	r3, [r4, #12]
 800321c:	f043 0308 	orr.w	r3, r3, #8
 8003220:	81a3      	strh	r3, [r4, #12]
 8003222:	6923      	ldr	r3, [r4, #16]
 8003224:	b94b      	cbnz	r3, 800323a <__swsetup_r+0x9a>
 8003226:	89a3      	ldrh	r3, [r4, #12]
 8003228:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800322c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003230:	d003      	beq.n	800323a <__swsetup_r+0x9a>
 8003232:	4621      	mov	r1, r4
 8003234:	4630      	mov	r0, r6
 8003236:	f000 fa01 	bl	800363c <__smakebuf_r>
 800323a:	89a0      	ldrh	r0, [r4, #12]
 800323c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003240:	f010 0301 	ands.w	r3, r0, #1
 8003244:	d00a      	beq.n	800325c <__swsetup_r+0xbc>
 8003246:	2300      	movs	r3, #0
 8003248:	60a3      	str	r3, [r4, #8]
 800324a:	6963      	ldr	r3, [r4, #20]
 800324c:	425b      	negs	r3, r3
 800324e:	61a3      	str	r3, [r4, #24]
 8003250:	6923      	ldr	r3, [r4, #16]
 8003252:	b943      	cbnz	r3, 8003266 <__swsetup_r+0xc6>
 8003254:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003258:	d1ba      	bne.n	80031d0 <__swsetup_r+0x30>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	0781      	lsls	r1, r0, #30
 800325e:	bf58      	it	pl
 8003260:	6963      	ldrpl	r3, [r4, #20]
 8003262:	60a3      	str	r3, [r4, #8]
 8003264:	e7f4      	b.n	8003250 <__swsetup_r+0xb0>
 8003266:	2000      	movs	r0, #0
 8003268:	e7f7      	b.n	800325a <__swsetup_r+0xba>
 800326a:	bf00      	nop
 800326c:	2000000c 	.word	0x2000000c
 8003270:	08004094 	.word	0x08004094
 8003274:	080040b4 	.word	0x080040b4
 8003278:	08004074 	.word	0x08004074

0800327c <__sflush_r>:
 800327c:	898a      	ldrh	r2, [r1, #12]
 800327e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003282:	4605      	mov	r5, r0
 8003284:	0710      	lsls	r0, r2, #28
 8003286:	460c      	mov	r4, r1
 8003288:	d458      	bmi.n	800333c <__sflush_r+0xc0>
 800328a:	684b      	ldr	r3, [r1, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	dc05      	bgt.n	800329c <__sflush_r+0x20>
 8003290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	dc02      	bgt.n	800329c <__sflush_r+0x20>
 8003296:	2000      	movs	r0, #0
 8003298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800329c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800329e:	2e00      	cmp	r6, #0
 80032a0:	d0f9      	beq.n	8003296 <__sflush_r+0x1a>
 80032a2:	2300      	movs	r3, #0
 80032a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032a8:	682f      	ldr	r7, [r5, #0]
 80032aa:	602b      	str	r3, [r5, #0]
 80032ac:	d032      	beq.n	8003314 <__sflush_r+0x98>
 80032ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032b0:	89a3      	ldrh	r3, [r4, #12]
 80032b2:	075a      	lsls	r2, r3, #29
 80032b4:	d505      	bpl.n	80032c2 <__sflush_r+0x46>
 80032b6:	6863      	ldr	r3, [r4, #4]
 80032b8:	1ac0      	subs	r0, r0, r3
 80032ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032bc:	b10b      	cbz	r3, 80032c2 <__sflush_r+0x46>
 80032be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032c0:	1ac0      	subs	r0, r0, r3
 80032c2:	2300      	movs	r3, #0
 80032c4:	4602      	mov	r2, r0
 80032c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032c8:	6a21      	ldr	r1, [r4, #32]
 80032ca:	4628      	mov	r0, r5
 80032cc:	47b0      	blx	r6
 80032ce:	1c43      	adds	r3, r0, #1
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	d106      	bne.n	80032e2 <__sflush_r+0x66>
 80032d4:	6829      	ldr	r1, [r5, #0]
 80032d6:	291d      	cmp	r1, #29
 80032d8:	d82c      	bhi.n	8003334 <__sflush_r+0xb8>
 80032da:	4a2a      	ldr	r2, [pc, #168]	; (8003384 <__sflush_r+0x108>)
 80032dc:	40ca      	lsrs	r2, r1
 80032de:	07d6      	lsls	r6, r2, #31
 80032e0:	d528      	bpl.n	8003334 <__sflush_r+0xb8>
 80032e2:	2200      	movs	r2, #0
 80032e4:	6062      	str	r2, [r4, #4]
 80032e6:	04d9      	lsls	r1, r3, #19
 80032e8:	6922      	ldr	r2, [r4, #16]
 80032ea:	6022      	str	r2, [r4, #0]
 80032ec:	d504      	bpl.n	80032f8 <__sflush_r+0x7c>
 80032ee:	1c42      	adds	r2, r0, #1
 80032f0:	d101      	bne.n	80032f6 <__sflush_r+0x7a>
 80032f2:	682b      	ldr	r3, [r5, #0]
 80032f4:	b903      	cbnz	r3, 80032f8 <__sflush_r+0x7c>
 80032f6:	6560      	str	r0, [r4, #84]	; 0x54
 80032f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032fa:	602f      	str	r7, [r5, #0]
 80032fc:	2900      	cmp	r1, #0
 80032fe:	d0ca      	beq.n	8003296 <__sflush_r+0x1a>
 8003300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003304:	4299      	cmp	r1, r3
 8003306:	d002      	beq.n	800330e <__sflush_r+0x92>
 8003308:	4628      	mov	r0, r5
 800330a:	f000 f9d7 	bl	80036bc <_free_r>
 800330e:	2000      	movs	r0, #0
 8003310:	6360      	str	r0, [r4, #52]	; 0x34
 8003312:	e7c1      	b.n	8003298 <__sflush_r+0x1c>
 8003314:	6a21      	ldr	r1, [r4, #32]
 8003316:	2301      	movs	r3, #1
 8003318:	4628      	mov	r0, r5
 800331a:	47b0      	blx	r6
 800331c:	1c41      	adds	r1, r0, #1
 800331e:	d1c7      	bne.n	80032b0 <__sflush_r+0x34>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0c4      	beq.n	80032b0 <__sflush_r+0x34>
 8003326:	2b1d      	cmp	r3, #29
 8003328:	d001      	beq.n	800332e <__sflush_r+0xb2>
 800332a:	2b16      	cmp	r3, #22
 800332c:	d101      	bne.n	8003332 <__sflush_r+0xb6>
 800332e:	602f      	str	r7, [r5, #0]
 8003330:	e7b1      	b.n	8003296 <__sflush_r+0x1a>
 8003332:	89a3      	ldrh	r3, [r4, #12]
 8003334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003338:	81a3      	strh	r3, [r4, #12]
 800333a:	e7ad      	b.n	8003298 <__sflush_r+0x1c>
 800333c:	690f      	ldr	r7, [r1, #16]
 800333e:	2f00      	cmp	r7, #0
 8003340:	d0a9      	beq.n	8003296 <__sflush_r+0x1a>
 8003342:	0793      	lsls	r3, r2, #30
 8003344:	680e      	ldr	r6, [r1, #0]
 8003346:	bf08      	it	eq
 8003348:	694b      	ldreq	r3, [r1, #20]
 800334a:	600f      	str	r7, [r1, #0]
 800334c:	bf18      	it	ne
 800334e:	2300      	movne	r3, #0
 8003350:	eba6 0807 	sub.w	r8, r6, r7
 8003354:	608b      	str	r3, [r1, #8]
 8003356:	f1b8 0f00 	cmp.w	r8, #0
 800335a:	dd9c      	ble.n	8003296 <__sflush_r+0x1a>
 800335c:	6a21      	ldr	r1, [r4, #32]
 800335e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003360:	4643      	mov	r3, r8
 8003362:	463a      	mov	r2, r7
 8003364:	4628      	mov	r0, r5
 8003366:	47b0      	blx	r6
 8003368:	2800      	cmp	r0, #0
 800336a:	dc06      	bgt.n	800337a <__sflush_r+0xfe>
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003372:	81a3      	strh	r3, [r4, #12]
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	e78e      	b.n	8003298 <__sflush_r+0x1c>
 800337a:	4407      	add	r7, r0
 800337c:	eba8 0800 	sub.w	r8, r8, r0
 8003380:	e7e9      	b.n	8003356 <__sflush_r+0xda>
 8003382:	bf00      	nop
 8003384:	20400001 	.word	0x20400001

08003388 <_fflush_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	690b      	ldr	r3, [r1, #16]
 800338c:	4605      	mov	r5, r0
 800338e:	460c      	mov	r4, r1
 8003390:	b913      	cbnz	r3, 8003398 <_fflush_r+0x10>
 8003392:	2500      	movs	r5, #0
 8003394:	4628      	mov	r0, r5
 8003396:	bd38      	pop	{r3, r4, r5, pc}
 8003398:	b118      	cbz	r0, 80033a2 <_fflush_r+0x1a>
 800339a:	6983      	ldr	r3, [r0, #24]
 800339c:	b90b      	cbnz	r3, 80033a2 <_fflush_r+0x1a>
 800339e:	f000 f887 	bl	80034b0 <__sinit>
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <_fflush_r+0x6c>)
 80033a4:	429c      	cmp	r4, r3
 80033a6:	d11b      	bne.n	80033e0 <_fflush_r+0x58>
 80033a8:	686c      	ldr	r4, [r5, #4]
 80033aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ef      	beq.n	8003392 <_fflush_r+0xa>
 80033b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033b4:	07d0      	lsls	r0, r2, #31
 80033b6:	d404      	bmi.n	80033c2 <_fflush_r+0x3a>
 80033b8:	0599      	lsls	r1, r3, #22
 80033ba:	d402      	bmi.n	80033c2 <_fflush_r+0x3a>
 80033bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033be:	f000 f915 	bl	80035ec <__retarget_lock_acquire_recursive>
 80033c2:	4628      	mov	r0, r5
 80033c4:	4621      	mov	r1, r4
 80033c6:	f7ff ff59 	bl	800327c <__sflush_r>
 80033ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033cc:	07da      	lsls	r2, r3, #31
 80033ce:	4605      	mov	r5, r0
 80033d0:	d4e0      	bmi.n	8003394 <_fflush_r+0xc>
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	059b      	lsls	r3, r3, #22
 80033d6:	d4dd      	bmi.n	8003394 <_fflush_r+0xc>
 80033d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033da:	f000 f908 	bl	80035ee <__retarget_lock_release_recursive>
 80033de:	e7d9      	b.n	8003394 <_fflush_r+0xc>
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <_fflush_r+0x70>)
 80033e2:	429c      	cmp	r4, r3
 80033e4:	d101      	bne.n	80033ea <_fflush_r+0x62>
 80033e6:	68ac      	ldr	r4, [r5, #8]
 80033e8:	e7df      	b.n	80033aa <_fflush_r+0x22>
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <_fflush_r+0x74>)
 80033ec:	429c      	cmp	r4, r3
 80033ee:	bf08      	it	eq
 80033f0:	68ec      	ldreq	r4, [r5, #12]
 80033f2:	e7da      	b.n	80033aa <_fflush_r+0x22>
 80033f4:	08004094 	.word	0x08004094
 80033f8:	080040b4 	.word	0x080040b4
 80033fc:	08004074 	.word	0x08004074

08003400 <std>:
 8003400:	2300      	movs	r3, #0
 8003402:	b510      	push	{r4, lr}
 8003404:	4604      	mov	r4, r0
 8003406:	e9c0 3300 	strd	r3, r3, [r0]
 800340a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800340e:	6083      	str	r3, [r0, #8]
 8003410:	8181      	strh	r1, [r0, #12]
 8003412:	6643      	str	r3, [r0, #100]	; 0x64
 8003414:	81c2      	strh	r2, [r0, #14]
 8003416:	6183      	str	r3, [r0, #24]
 8003418:	4619      	mov	r1, r3
 800341a:	2208      	movs	r2, #8
 800341c:	305c      	adds	r0, #92	; 0x5c
 800341e:	f7ff fdd7 	bl	8002fd0 <memset>
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <std+0x38>)
 8003424:	6263      	str	r3, [r4, #36]	; 0x24
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <std+0x3c>)
 8003428:	62a3      	str	r3, [r4, #40]	; 0x28
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <std+0x40>)
 800342c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <std+0x44>)
 8003430:	6224      	str	r4, [r4, #32]
 8003432:	6323      	str	r3, [r4, #48]	; 0x30
 8003434:	bd10      	pop	{r4, pc}
 8003436:	bf00      	nop
 8003438:	08003e79 	.word	0x08003e79
 800343c:	08003e9b 	.word	0x08003e9b
 8003440:	08003ed3 	.word	0x08003ed3
 8003444:	08003ef7 	.word	0x08003ef7

08003448 <_cleanup_r>:
 8003448:	4901      	ldr	r1, [pc, #4]	; (8003450 <_cleanup_r+0x8>)
 800344a:	f000 b8af 	b.w	80035ac <_fwalk_reent>
 800344e:	bf00      	nop
 8003450:	08003389 	.word	0x08003389

08003454 <__sfmoreglue>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	2268      	movs	r2, #104	; 0x68
 8003458:	1e4d      	subs	r5, r1, #1
 800345a:	4355      	muls	r5, r2
 800345c:	460e      	mov	r6, r1
 800345e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003462:	f000 f997 	bl	8003794 <_malloc_r>
 8003466:	4604      	mov	r4, r0
 8003468:	b140      	cbz	r0, 800347c <__sfmoreglue+0x28>
 800346a:	2100      	movs	r1, #0
 800346c:	e9c0 1600 	strd	r1, r6, [r0]
 8003470:	300c      	adds	r0, #12
 8003472:	60a0      	str	r0, [r4, #8]
 8003474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003478:	f7ff fdaa 	bl	8002fd0 <memset>
 800347c:	4620      	mov	r0, r4
 800347e:	bd70      	pop	{r4, r5, r6, pc}

08003480 <__sfp_lock_acquire>:
 8003480:	4801      	ldr	r0, [pc, #4]	; (8003488 <__sfp_lock_acquire+0x8>)
 8003482:	f000 b8b3 	b.w	80035ec <__retarget_lock_acquire_recursive>
 8003486:	bf00      	nop
 8003488:	2000019d 	.word	0x2000019d

0800348c <__sfp_lock_release>:
 800348c:	4801      	ldr	r0, [pc, #4]	; (8003494 <__sfp_lock_release+0x8>)
 800348e:	f000 b8ae 	b.w	80035ee <__retarget_lock_release_recursive>
 8003492:	bf00      	nop
 8003494:	2000019d 	.word	0x2000019d

08003498 <__sinit_lock_acquire>:
 8003498:	4801      	ldr	r0, [pc, #4]	; (80034a0 <__sinit_lock_acquire+0x8>)
 800349a:	f000 b8a7 	b.w	80035ec <__retarget_lock_acquire_recursive>
 800349e:	bf00      	nop
 80034a0:	2000019e 	.word	0x2000019e

080034a4 <__sinit_lock_release>:
 80034a4:	4801      	ldr	r0, [pc, #4]	; (80034ac <__sinit_lock_release+0x8>)
 80034a6:	f000 b8a2 	b.w	80035ee <__retarget_lock_release_recursive>
 80034aa:	bf00      	nop
 80034ac:	2000019e 	.word	0x2000019e

080034b0 <__sinit>:
 80034b0:	b510      	push	{r4, lr}
 80034b2:	4604      	mov	r4, r0
 80034b4:	f7ff fff0 	bl	8003498 <__sinit_lock_acquire>
 80034b8:	69a3      	ldr	r3, [r4, #24]
 80034ba:	b11b      	cbz	r3, 80034c4 <__sinit+0x14>
 80034bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034c0:	f7ff bff0 	b.w	80034a4 <__sinit_lock_release>
 80034c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80034c8:	6523      	str	r3, [r4, #80]	; 0x50
 80034ca:	4b13      	ldr	r3, [pc, #76]	; (8003518 <__sinit+0x68>)
 80034cc:	4a13      	ldr	r2, [pc, #76]	; (800351c <__sinit+0x6c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80034d2:	42a3      	cmp	r3, r4
 80034d4:	bf04      	itt	eq
 80034d6:	2301      	moveq	r3, #1
 80034d8:	61a3      	streq	r3, [r4, #24]
 80034da:	4620      	mov	r0, r4
 80034dc:	f000 f820 	bl	8003520 <__sfp>
 80034e0:	6060      	str	r0, [r4, #4]
 80034e2:	4620      	mov	r0, r4
 80034e4:	f000 f81c 	bl	8003520 <__sfp>
 80034e8:	60a0      	str	r0, [r4, #8]
 80034ea:	4620      	mov	r0, r4
 80034ec:	f000 f818 	bl	8003520 <__sfp>
 80034f0:	2200      	movs	r2, #0
 80034f2:	60e0      	str	r0, [r4, #12]
 80034f4:	2104      	movs	r1, #4
 80034f6:	6860      	ldr	r0, [r4, #4]
 80034f8:	f7ff ff82 	bl	8003400 <std>
 80034fc:	68a0      	ldr	r0, [r4, #8]
 80034fe:	2201      	movs	r2, #1
 8003500:	2109      	movs	r1, #9
 8003502:	f7ff ff7d 	bl	8003400 <std>
 8003506:	68e0      	ldr	r0, [r4, #12]
 8003508:	2202      	movs	r2, #2
 800350a:	2112      	movs	r1, #18
 800350c:	f7ff ff78 	bl	8003400 <std>
 8003510:	2301      	movs	r3, #1
 8003512:	61a3      	str	r3, [r4, #24]
 8003514:	e7d2      	b.n	80034bc <__sinit+0xc>
 8003516:	bf00      	nop
 8003518:	08004070 	.word	0x08004070
 800351c:	08003449 	.word	0x08003449

08003520 <__sfp>:
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003522:	4607      	mov	r7, r0
 8003524:	f7ff ffac 	bl	8003480 <__sfp_lock_acquire>
 8003528:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <__sfp+0x84>)
 800352a:	681e      	ldr	r6, [r3, #0]
 800352c:	69b3      	ldr	r3, [r6, #24]
 800352e:	b913      	cbnz	r3, 8003536 <__sfp+0x16>
 8003530:	4630      	mov	r0, r6
 8003532:	f7ff ffbd 	bl	80034b0 <__sinit>
 8003536:	3648      	adds	r6, #72	; 0x48
 8003538:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800353c:	3b01      	subs	r3, #1
 800353e:	d503      	bpl.n	8003548 <__sfp+0x28>
 8003540:	6833      	ldr	r3, [r6, #0]
 8003542:	b30b      	cbz	r3, 8003588 <__sfp+0x68>
 8003544:	6836      	ldr	r6, [r6, #0]
 8003546:	e7f7      	b.n	8003538 <__sfp+0x18>
 8003548:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800354c:	b9d5      	cbnz	r5, 8003584 <__sfp+0x64>
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <__sfp+0x88>)
 8003550:	60e3      	str	r3, [r4, #12]
 8003552:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003556:	6665      	str	r5, [r4, #100]	; 0x64
 8003558:	f000 f847 	bl	80035ea <__retarget_lock_init_recursive>
 800355c:	f7ff ff96 	bl	800348c <__sfp_lock_release>
 8003560:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003564:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003568:	6025      	str	r5, [r4, #0]
 800356a:	61a5      	str	r5, [r4, #24]
 800356c:	2208      	movs	r2, #8
 800356e:	4629      	mov	r1, r5
 8003570:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003574:	f7ff fd2c 	bl	8002fd0 <memset>
 8003578:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800357c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003580:	4620      	mov	r0, r4
 8003582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003584:	3468      	adds	r4, #104	; 0x68
 8003586:	e7d9      	b.n	800353c <__sfp+0x1c>
 8003588:	2104      	movs	r1, #4
 800358a:	4638      	mov	r0, r7
 800358c:	f7ff ff62 	bl	8003454 <__sfmoreglue>
 8003590:	4604      	mov	r4, r0
 8003592:	6030      	str	r0, [r6, #0]
 8003594:	2800      	cmp	r0, #0
 8003596:	d1d5      	bne.n	8003544 <__sfp+0x24>
 8003598:	f7ff ff78 	bl	800348c <__sfp_lock_release>
 800359c:	230c      	movs	r3, #12
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	e7ee      	b.n	8003580 <__sfp+0x60>
 80035a2:	bf00      	nop
 80035a4:	08004070 	.word	0x08004070
 80035a8:	ffff0001 	.word	0xffff0001

080035ac <_fwalk_reent>:
 80035ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035b0:	4606      	mov	r6, r0
 80035b2:	4688      	mov	r8, r1
 80035b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035b8:	2700      	movs	r7, #0
 80035ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035be:	f1b9 0901 	subs.w	r9, r9, #1
 80035c2:	d505      	bpl.n	80035d0 <_fwalk_reent+0x24>
 80035c4:	6824      	ldr	r4, [r4, #0]
 80035c6:	2c00      	cmp	r4, #0
 80035c8:	d1f7      	bne.n	80035ba <_fwalk_reent+0xe>
 80035ca:	4638      	mov	r0, r7
 80035cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035d0:	89ab      	ldrh	r3, [r5, #12]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d907      	bls.n	80035e6 <_fwalk_reent+0x3a>
 80035d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035da:	3301      	adds	r3, #1
 80035dc:	d003      	beq.n	80035e6 <_fwalk_reent+0x3a>
 80035de:	4629      	mov	r1, r5
 80035e0:	4630      	mov	r0, r6
 80035e2:	47c0      	blx	r8
 80035e4:	4307      	orrs	r7, r0
 80035e6:	3568      	adds	r5, #104	; 0x68
 80035e8:	e7e9      	b.n	80035be <_fwalk_reent+0x12>

080035ea <__retarget_lock_init_recursive>:
 80035ea:	4770      	bx	lr

080035ec <__retarget_lock_acquire_recursive>:
 80035ec:	4770      	bx	lr

080035ee <__retarget_lock_release_recursive>:
 80035ee:	4770      	bx	lr

080035f0 <__swhatbuf_r>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	460e      	mov	r6, r1
 80035f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f8:	2900      	cmp	r1, #0
 80035fa:	b096      	sub	sp, #88	; 0x58
 80035fc:	4614      	mov	r4, r2
 80035fe:	461d      	mov	r5, r3
 8003600:	da08      	bge.n	8003614 <__swhatbuf_r+0x24>
 8003602:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	602a      	str	r2, [r5, #0]
 800360a:	061a      	lsls	r2, r3, #24
 800360c:	d410      	bmi.n	8003630 <__swhatbuf_r+0x40>
 800360e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003612:	e00e      	b.n	8003632 <__swhatbuf_r+0x42>
 8003614:	466a      	mov	r2, sp
 8003616:	f000 fc95 	bl	8003f44 <_fstat_r>
 800361a:	2800      	cmp	r0, #0
 800361c:	dbf1      	blt.n	8003602 <__swhatbuf_r+0x12>
 800361e:	9a01      	ldr	r2, [sp, #4]
 8003620:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003624:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003628:	425a      	negs	r2, r3
 800362a:	415a      	adcs	r2, r3
 800362c:	602a      	str	r2, [r5, #0]
 800362e:	e7ee      	b.n	800360e <__swhatbuf_r+0x1e>
 8003630:	2340      	movs	r3, #64	; 0x40
 8003632:	2000      	movs	r0, #0
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	b016      	add	sp, #88	; 0x58
 8003638:	bd70      	pop	{r4, r5, r6, pc}
	...

0800363c <__smakebuf_r>:
 800363c:	898b      	ldrh	r3, [r1, #12]
 800363e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003640:	079d      	lsls	r5, r3, #30
 8003642:	4606      	mov	r6, r0
 8003644:	460c      	mov	r4, r1
 8003646:	d507      	bpl.n	8003658 <__smakebuf_r+0x1c>
 8003648:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	6123      	str	r3, [r4, #16]
 8003650:	2301      	movs	r3, #1
 8003652:	6163      	str	r3, [r4, #20]
 8003654:	b002      	add	sp, #8
 8003656:	bd70      	pop	{r4, r5, r6, pc}
 8003658:	ab01      	add	r3, sp, #4
 800365a:	466a      	mov	r2, sp
 800365c:	f7ff ffc8 	bl	80035f0 <__swhatbuf_r>
 8003660:	9900      	ldr	r1, [sp, #0]
 8003662:	4605      	mov	r5, r0
 8003664:	4630      	mov	r0, r6
 8003666:	f000 f895 	bl	8003794 <_malloc_r>
 800366a:	b948      	cbnz	r0, 8003680 <__smakebuf_r+0x44>
 800366c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003670:	059a      	lsls	r2, r3, #22
 8003672:	d4ef      	bmi.n	8003654 <__smakebuf_r+0x18>
 8003674:	f023 0303 	bic.w	r3, r3, #3
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	81a3      	strh	r3, [r4, #12]
 800367e:	e7e3      	b.n	8003648 <__smakebuf_r+0xc>
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <__smakebuf_r+0x7c>)
 8003682:	62b3      	str	r3, [r6, #40]	; 0x28
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	6020      	str	r0, [r4, #0]
 8003688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368c:	81a3      	strh	r3, [r4, #12]
 800368e:	9b00      	ldr	r3, [sp, #0]
 8003690:	6163      	str	r3, [r4, #20]
 8003692:	9b01      	ldr	r3, [sp, #4]
 8003694:	6120      	str	r0, [r4, #16]
 8003696:	b15b      	cbz	r3, 80036b0 <__smakebuf_r+0x74>
 8003698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800369c:	4630      	mov	r0, r6
 800369e:	f000 fc63 	bl	8003f68 <_isatty_r>
 80036a2:	b128      	cbz	r0, 80036b0 <__smakebuf_r+0x74>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	89a0      	ldrh	r0, [r4, #12]
 80036b2:	4305      	orrs	r5, r0
 80036b4:	81a5      	strh	r5, [r4, #12]
 80036b6:	e7cd      	b.n	8003654 <__smakebuf_r+0x18>
 80036b8:	08003449 	.word	0x08003449

080036bc <_free_r>:
 80036bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036be:	2900      	cmp	r1, #0
 80036c0:	d044      	beq.n	800374c <_free_r+0x90>
 80036c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036c6:	9001      	str	r0, [sp, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f1a1 0404 	sub.w	r4, r1, #4
 80036ce:	bfb8      	it	lt
 80036d0:	18e4      	addlt	r4, r4, r3
 80036d2:	f000 fc6b 	bl	8003fac <__malloc_lock>
 80036d6:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <_free_r+0x94>)
 80036d8:	9801      	ldr	r0, [sp, #4]
 80036da:	6813      	ldr	r3, [r2, #0]
 80036dc:	b933      	cbnz	r3, 80036ec <_free_r+0x30>
 80036de:	6063      	str	r3, [r4, #4]
 80036e0:	6014      	str	r4, [r2, #0]
 80036e2:	b003      	add	sp, #12
 80036e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036e8:	f000 bc66 	b.w	8003fb8 <__malloc_unlock>
 80036ec:	42a3      	cmp	r3, r4
 80036ee:	d908      	bls.n	8003702 <_free_r+0x46>
 80036f0:	6825      	ldr	r5, [r4, #0]
 80036f2:	1961      	adds	r1, r4, r5
 80036f4:	428b      	cmp	r3, r1
 80036f6:	bf01      	itttt	eq
 80036f8:	6819      	ldreq	r1, [r3, #0]
 80036fa:	685b      	ldreq	r3, [r3, #4]
 80036fc:	1949      	addeq	r1, r1, r5
 80036fe:	6021      	streq	r1, [r4, #0]
 8003700:	e7ed      	b.n	80036de <_free_r+0x22>
 8003702:	461a      	mov	r2, r3
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	b10b      	cbz	r3, 800370c <_free_r+0x50>
 8003708:	42a3      	cmp	r3, r4
 800370a:	d9fa      	bls.n	8003702 <_free_r+0x46>
 800370c:	6811      	ldr	r1, [r2, #0]
 800370e:	1855      	adds	r5, r2, r1
 8003710:	42a5      	cmp	r5, r4
 8003712:	d10b      	bne.n	800372c <_free_r+0x70>
 8003714:	6824      	ldr	r4, [r4, #0]
 8003716:	4421      	add	r1, r4
 8003718:	1854      	adds	r4, r2, r1
 800371a:	42a3      	cmp	r3, r4
 800371c:	6011      	str	r1, [r2, #0]
 800371e:	d1e0      	bne.n	80036e2 <_free_r+0x26>
 8003720:	681c      	ldr	r4, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	6053      	str	r3, [r2, #4]
 8003726:	4421      	add	r1, r4
 8003728:	6011      	str	r1, [r2, #0]
 800372a:	e7da      	b.n	80036e2 <_free_r+0x26>
 800372c:	d902      	bls.n	8003734 <_free_r+0x78>
 800372e:	230c      	movs	r3, #12
 8003730:	6003      	str	r3, [r0, #0]
 8003732:	e7d6      	b.n	80036e2 <_free_r+0x26>
 8003734:	6825      	ldr	r5, [r4, #0]
 8003736:	1961      	adds	r1, r4, r5
 8003738:	428b      	cmp	r3, r1
 800373a:	bf04      	itt	eq
 800373c:	6819      	ldreq	r1, [r3, #0]
 800373e:	685b      	ldreq	r3, [r3, #4]
 8003740:	6063      	str	r3, [r4, #4]
 8003742:	bf04      	itt	eq
 8003744:	1949      	addeq	r1, r1, r5
 8003746:	6021      	streq	r1, [r4, #0]
 8003748:	6054      	str	r4, [r2, #4]
 800374a:	e7ca      	b.n	80036e2 <_free_r+0x26>
 800374c:	b003      	add	sp, #12
 800374e:	bd30      	pop	{r4, r5, pc}
 8003750:	200001a0 	.word	0x200001a0

08003754 <sbrk_aligned>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	4e0e      	ldr	r6, [pc, #56]	; (8003790 <sbrk_aligned+0x3c>)
 8003758:	460c      	mov	r4, r1
 800375a:	6831      	ldr	r1, [r6, #0]
 800375c:	4605      	mov	r5, r0
 800375e:	b911      	cbnz	r1, 8003766 <sbrk_aligned+0x12>
 8003760:	f000 fb7a 	bl	8003e58 <_sbrk_r>
 8003764:	6030      	str	r0, [r6, #0]
 8003766:	4621      	mov	r1, r4
 8003768:	4628      	mov	r0, r5
 800376a:	f000 fb75 	bl	8003e58 <_sbrk_r>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	d00a      	beq.n	8003788 <sbrk_aligned+0x34>
 8003772:	1cc4      	adds	r4, r0, #3
 8003774:	f024 0403 	bic.w	r4, r4, #3
 8003778:	42a0      	cmp	r0, r4
 800377a:	d007      	beq.n	800378c <sbrk_aligned+0x38>
 800377c:	1a21      	subs	r1, r4, r0
 800377e:	4628      	mov	r0, r5
 8003780:	f000 fb6a 	bl	8003e58 <_sbrk_r>
 8003784:	3001      	adds	r0, #1
 8003786:	d101      	bne.n	800378c <sbrk_aligned+0x38>
 8003788:	f04f 34ff 	mov.w	r4, #4294967295
 800378c:	4620      	mov	r0, r4
 800378e:	bd70      	pop	{r4, r5, r6, pc}
 8003790:	200001a4 	.word	0x200001a4

08003794 <_malloc_r>:
 8003794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003798:	1ccd      	adds	r5, r1, #3
 800379a:	f025 0503 	bic.w	r5, r5, #3
 800379e:	3508      	adds	r5, #8
 80037a0:	2d0c      	cmp	r5, #12
 80037a2:	bf38      	it	cc
 80037a4:	250c      	movcc	r5, #12
 80037a6:	2d00      	cmp	r5, #0
 80037a8:	4607      	mov	r7, r0
 80037aa:	db01      	blt.n	80037b0 <_malloc_r+0x1c>
 80037ac:	42a9      	cmp	r1, r5
 80037ae:	d905      	bls.n	80037bc <_malloc_r+0x28>
 80037b0:	230c      	movs	r3, #12
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	2600      	movs	r6, #0
 80037b6:	4630      	mov	r0, r6
 80037b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037bc:	4e2e      	ldr	r6, [pc, #184]	; (8003878 <_malloc_r+0xe4>)
 80037be:	f000 fbf5 	bl	8003fac <__malloc_lock>
 80037c2:	6833      	ldr	r3, [r6, #0]
 80037c4:	461c      	mov	r4, r3
 80037c6:	bb34      	cbnz	r4, 8003816 <_malloc_r+0x82>
 80037c8:	4629      	mov	r1, r5
 80037ca:	4638      	mov	r0, r7
 80037cc:	f7ff ffc2 	bl	8003754 <sbrk_aligned>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	4604      	mov	r4, r0
 80037d4:	d14d      	bne.n	8003872 <_malloc_r+0xde>
 80037d6:	6834      	ldr	r4, [r6, #0]
 80037d8:	4626      	mov	r6, r4
 80037da:	2e00      	cmp	r6, #0
 80037dc:	d140      	bne.n	8003860 <_malloc_r+0xcc>
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	4631      	mov	r1, r6
 80037e2:	4638      	mov	r0, r7
 80037e4:	eb04 0803 	add.w	r8, r4, r3
 80037e8:	f000 fb36 	bl	8003e58 <_sbrk_r>
 80037ec:	4580      	cmp	r8, r0
 80037ee:	d13a      	bne.n	8003866 <_malloc_r+0xd2>
 80037f0:	6821      	ldr	r1, [r4, #0]
 80037f2:	3503      	adds	r5, #3
 80037f4:	1a6d      	subs	r5, r5, r1
 80037f6:	f025 0503 	bic.w	r5, r5, #3
 80037fa:	3508      	adds	r5, #8
 80037fc:	2d0c      	cmp	r5, #12
 80037fe:	bf38      	it	cc
 8003800:	250c      	movcc	r5, #12
 8003802:	4629      	mov	r1, r5
 8003804:	4638      	mov	r0, r7
 8003806:	f7ff ffa5 	bl	8003754 <sbrk_aligned>
 800380a:	3001      	adds	r0, #1
 800380c:	d02b      	beq.n	8003866 <_malloc_r+0xd2>
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	442b      	add	r3, r5
 8003812:	6023      	str	r3, [r4, #0]
 8003814:	e00e      	b.n	8003834 <_malloc_r+0xa0>
 8003816:	6822      	ldr	r2, [r4, #0]
 8003818:	1b52      	subs	r2, r2, r5
 800381a:	d41e      	bmi.n	800385a <_malloc_r+0xc6>
 800381c:	2a0b      	cmp	r2, #11
 800381e:	d916      	bls.n	800384e <_malloc_r+0xba>
 8003820:	1961      	adds	r1, r4, r5
 8003822:	42a3      	cmp	r3, r4
 8003824:	6025      	str	r5, [r4, #0]
 8003826:	bf18      	it	ne
 8003828:	6059      	strne	r1, [r3, #4]
 800382a:	6863      	ldr	r3, [r4, #4]
 800382c:	bf08      	it	eq
 800382e:	6031      	streq	r1, [r6, #0]
 8003830:	5162      	str	r2, [r4, r5]
 8003832:	604b      	str	r3, [r1, #4]
 8003834:	4638      	mov	r0, r7
 8003836:	f104 060b 	add.w	r6, r4, #11
 800383a:	f000 fbbd 	bl	8003fb8 <__malloc_unlock>
 800383e:	f026 0607 	bic.w	r6, r6, #7
 8003842:	1d23      	adds	r3, r4, #4
 8003844:	1af2      	subs	r2, r6, r3
 8003846:	d0b6      	beq.n	80037b6 <_malloc_r+0x22>
 8003848:	1b9b      	subs	r3, r3, r6
 800384a:	50a3      	str	r3, [r4, r2]
 800384c:	e7b3      	b.n	80037b6 <_malloc_r+0x22>
 800384e:	6862      	ldr	r2, [r4, #4]
 8003850:	42a3      	cmp	r3, r4
 8003852:	bf0c      	ite	eq
 8003854:	6032      	streq	r2, [r6, #0]
 8003856:	605a      	strne	r2, [r3, #4]
 8003858:	e7ec      	b.n	8003834 <_malloc_r+0xa0>
 800385a:	4623      	mov	r3, r4
 800385c:	6864      	ldr	r4, [r4, #4]
 800385e:	e7b2      	b.n	80037c6 <_malloc_r+0x32>
 8003860:	4634      	mov	r4, r6
 8003862:	6876      	ldr	r6, [r6, #4]
 8003864:	e7b9      	b.n	80037da <_malloc_r+0x46>
 8003866:	230c      	movs	r3, #12
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4638      	mov	r0, r7
 800386c:	f000 fba4 	bl	8003fb8 <__malloc_unlock>
 8003870:	e7a1      	b.n	80037b6 <_malloc_r+0x22>
 8003872:	6025      	str	r5, [r4, #0]
 8003874:	e7de      	b.n	8003834 <_malloc_r+0xa0>
 8003876:	bf00      	nop
 8003878:	200001a0 	.word	0x200001a0

0800387c <__sfputc_r>:
 800387c:	6893      	ldr	r3, [r2, #8]
 800387e:	3b01      	subs	r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	b410      	push	{r4}
 8003884:	6093      	str	r3, [r2, #8]
 8003886:	da08      	bge.n	800389a <__sfputc_r+0x1e>
 8003888:	6994      	ldr	r4, [r2, #24]
 800388a:	42a3      	cmp	r3, r4
 800388c:	db01      	blt.n	8003892 <__sfputc_r+0x16>
 800388e:	290a      	cmp	r1, #10
 8003890:	d103      	bne.n	800389a <__sfputc_r+0x1e>
 8003892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003896:	f7ff bc31 	b.w	80030fc <__swbuf_r>
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	1c58      	adds	r0, r3, #1
 800389e:	6010      	str	r0, [r2, #0]
 80038a0:	7019      	strb	r1, [r3, #0]
 80038a2:	4608      	mov	r0, r1
 80038a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <__sfputs_r>:
 80038aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ac:	4606      	mov	r6, r0
 80038ae:	460f      	mov	r7, r1
 80038b0:	4614      	mov	r4, r2
 80038b2:	18d5      	adds	r5, r2, r3
 80038b4:	42ac      	cmp	r4, r5
 80038b6:	d101      	bne.n	80038bc <__sfputs_r+0x12>
 80038b8:	2000      	movs	r0, #0
 80038ba:	e007      	b.n	80038cc <__sfputs_r+0x22>
 80038bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038c0:	463a      	mov	r2, r7
 80038c2:	4630      	mov	r0, r6
 80038c4:	f7ff ffda 	bl	800387c <__sfputc_r>
 80038c8:	1c43      	adds	r3, r0, #1
 80038ca:	d1f3      	bne.n	80038b4 <__sfputs_r+0xa>
 80038cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038d0 <_vfiprintf_r>:
 80038d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d4:	460d      	mov	r5, r1
 80038d6:	b09d      	sub	sp, #116	; 0x74
 80038d8:	4614      	mov	r4, r2
 80038da:	4698      	mov	r8, r3
 80038dc:	4606      	mov	r6, r0
 80038de:	b118      	cbz	r0, 80038e8 <_vfiprintf_r+0x18>
 80038e0:	6983      	ldr	r3, [r0, #24]
 80038e2:	b90b      	cbnz	r3, 80038e8 <_vfiprintf_r+0x18>
 80038e4:	f7ff fde4 	bl	80034b0 <__sinit>
 80038e8:	4b89      	ldr	r3, [pc, #548]	; (8003b10 <_vfiprintf_r+0x240>)
 80038ea:	429d      	cmp	r5, r3
 80038ec:	d11b      	bne.n	8003926 <_vfiprintf_r+0x56>
 80038ee:	6875      	ldr	r5, [r6, #4]
 80038f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038f2:	07d9      	lsls	r1, r3, #31
 80038f4:	d405      	bmi.n	8003902 <_vfiprintf_r+0x32>
 80038f6:	89ab      	ldrh	r3, [r5, #12]
 80038f8:	059a      	lsls	r2, r3, #22
 80038fa:	d402      	bmi.n	8003902 <_vfiprintf_r+0x32>
 80038fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038fe:	f7ff fe75 	bl	80035ec <__retarget_lock_acquire_recursive>
 8003902:	89ab      	ldrh	r3, [r5, #12]
 8003904:	071b      	lsls	r3, r3, #28
 8003906:	d501      	bpl.n	800390c <_vfiprintf_r+0x3c>
 8003908:	692b      	ldr	r3, [r5, #16]
 800390a:	b9eb      	cbnz	r3, 8003948 <_vfiprintf_r+0x78>
 800390c:	4629      	mov	r1, r5
 800390e:	4630      	mov	r0, r6
 8003910:	f7ff fc46 	bl	80031a0 <__swsetup_r>
 8003914:	b1c0      	cbz	r0, 8003948 <_vfiprintf_r+0x78>
 8003916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003918:	07dc      	lsls	r4, r3, #31
 800391a:	d50e      	bpl.n	800393a <_vfiprintf_r+0x6a>
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	b01d      	add	sp, #116	; 0x74
 8003922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003926:	4b7b      	ldr	r3, [pc, #492]	; (8003b14 <_vfiprintf_r+0x244>)
 8003928:	429d      	cmp	r5, r3
 800392a:	d101      	bne.n	8003930 <_vfiprintf_r+0x60>
 800392c:	68b5      	ldr	r5, [r6, #8]
 800392e:	e7df      	b.n	80038f0 <_vfiprintf_r+0x20>
 8003930:	4b79      	ldr	r3, [pc, #484]	; (8003b18 <_vfiprintf_r+0x248>)
 8003932:	429d      	cmp	r5, r3
 8003934:	bf08      	it	eq
 8003936:	68f5      	ldreq	r5, [r6, #12]
 8003938:	e7da      	b.n	80038f0 <_vfiprintf_r+0x20>
 800393a:	89ab      	ldrh	r3, [r5, #12]
 800393c:	0598      	lsls	r0, r3, #22
 800393e:	d4ed      	bmi.n	800391c <_vfiprintf_r+0x4c>
 8003940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003942:	f7ff fe54 	bl	80035ee <__retarget_lock_release_recursive>
 8003946:	e7e9      	b.n	800391c <_vfiprintf_r+0x4c>
 8003948:	2300      	movs	r3, #0
 800394a:	9309      	str	r3, [sp, #36]	; 0x24
 800394c:	2320      	movs	r3, #32
 800394e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003952:	f8cd 800c 	str.w	r8, [sp, #12]
 8003956:	2330      	movs	r3, #48	; 0x30
 8003958:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b1c <_vfiprintf_r+0x24c>
 800395c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003960:	f04f 0901 	mov.w	r9, #1
 8003964:	4623      	mov	r3, r4
 8003966:	469a      	mov	sl, r3
 8003968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800396c:	b10a      	cbz	r2, 8003972 <_vfiprintf_r+0xa2>
 800396e:	2a25      	cmp	r2, #37	; 0x25
 8003970:	d1f9      	bne.n	8003966 <_vfiprintf_r+0x96>
 8003972:	ebba 0b04 	subs.w	fp, sl, r4
 8003976:	d00b      	beq.n	8003990 <_vfiprintf_r+0xc0>
 8003978:	465b      	mov	r3, fp
 800397a:	4622      	mov	r2, r4
 800397c:	4629      	mov	r1, r5
 800397e:	4630      	mov	r0, r6
 8003980:	f7ff ff93 	bl	80038aa <__sfputs_r>
 8003984:	3001      	adds	r0, #1
 8003986:	f000 80aa 	beq.w	8003ade <_vfiprintf_r+0x20e>
 800398a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800398c:	445a      	add	r2, fp
 800398e:	9209      	str	r2, [sp, #36]	; 0x24
 8003990:	f89a 3000 	ldrb.w	r3, [sl]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a2 	beq.w	8003ade <_vfiprintf_r+0x20e>
 800399a:	2300      	movs	r3, #0
 800399c:	f04f 32ff 	mov.w	r2, #4294967295
 80039a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039a4:	f10a 0a01 	add.w	sl, sl, #1
 80039a8:	9304      	str	r3, [sp, #16]
 80039aa:	9307      	str	r3, [sp, #28]
 80039ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039b0:	931a      	str	r3, [sp, #104]	; 0x68
 80039b2:	4654      	mov	r4, sl
 80039b4:	2205      	movs	r2, #5
 80039b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ba:	4858      	ldr	r0, [pc, #352]	; (8003b1c <_vfiprintf_r+0x24c>)
 80039bc:	f7fc fc08 	bl	80001d0 <memchr>
 80039c0:	9a04      	ldr	r2, [sp, #16]
 80039c2:	b9d8      	cbnz	r0, 80039fc <_vfiprintf_r+0x12c>
 80039c4:	06d1      	lsls	r1, r2, #27
 80039c6:	bf44      	itt	mi
 80039c8:	2320      	movmi	r3, #32
 80039ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ce:	0713      	lsls	r3, r2, #28
 80039d0:	bf44      	itt	mi
 80039d2:	232b      	movmi	r3, #43	; 0x2b
 80039d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039d8:	f89a 3000 	ldrb.w	r3, [sl]
 80039dc:	2b2a      	cmp	r3, #42	; 0x2a
 80039de:	d015      	beq.n	8003a0c <_vfiprintf_r+0x13c>
 80039e0:	9a07      	ldr	r2, [sp, #28]
 80039e2:	4654      	mov	r4, sl
 80039e4:	2000      	movs	r0, #0
 80039e6:	f04f 0c0a 	mov.w	ip, #10
 80039ea:	4621      	mov	r1, r4
 80039ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039f0:	3b30      	subs	r3, #48	; 0x30
 80039f2:	2b09      	cmp	r3, #9
 80039f4:	d94e      	bls.n	8003a94 <_vfiprintf_r+0x1c4>
 80039f6:	b1b0      	cbz	r0, 8003a26 <_vfiprintf_r+0x156>
 80039f8:	9207      	str	r2, [sp, #28]
 80039fa:	e014      	b.n	8003a26 <_vfiprintf_r+0x156>
 80039fc:	eba0 0308 	sub.w	r3, r0, r8
 8003a00:	fa09 f303 	lsl.w	r3, r9, r3
 8003a04:	4313      	orrs	r3, r2
 8003a06:	9304      	str	r3, [sp, #16]
 8003a08:	46a2      	mov	sl, r4
 8003a0a:	e7d2      	b.n	80039b2 <_vfiprintf_r+0xe2>
 8003a0c:	9b03      	ldr	r3, [sp, #12]
 8003a0e:	1d19      	adds	r1, r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	9103      	str	r1, [sp, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bfbb      	ittet	lt
 8003a18:	425b      	neglt	r3, r3
 8003a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8003a1e:	9307      	strge	r3, [sp, #28]
 8003a20:	9307      	strlt	r3, [sp, #28]
 8003a22:	bfb8      	it	lt
 8003a24:	9204      	strlt	r2, [sp, #16]
 8003a26:	7823      	ldrb	r3, [r4, #0]
 8003a28:	2b2e      	cmp	r3, #46	; 0x2e
 8003a2a:	d10c      	bne.n	8003a46 <_vfiprintf_r+0x176>
 8003a2c:	7863      	ldrb	r3, [r4, #1]
 8003a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a30:	d135      	bne.n	8003a9e <_vfiprintf_r+0x1ce>
 8003a32:	9b03      	ldr	r3, [sp, #12]
 8003a34:	1d1a      	adds	r2, r3, #4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	9203      	str	r2, [sp, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bfb8      	it	lt
 8003a3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a42:	3402      	adds	r4, #2
 8003a44:	9305      	str	r3, [sp, #20]
 8003a46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b2c <_vfiprintf_r+0x25c>
 8003a4a:	7821      	ldrb	r1, [r4, #0]
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	4650      	mov	r0, sl
 8003a50:	f7fc fbbe 	bl	80001d0 <memchr>
 8003a54:	b140      	cbz	r0, 8003a68 <_vfiprintf_r+0x198>
 8003a56:	2340      	movs	r3, #64	; 0x40
 8003a58:	eba0 000a 	sub.w	r0, r0, sl
 8003a5c:	fa03 f000 	lsl.w	r0, r3, r0
 8003a60:	9b04      	ldr	r3, [sp, #16]
 8003a62:	4303      	orrs	r3, r0
 8003a64:	3401      	adds	r4, #1
 8003a66:	9304      	str	r3, [sp, #16]
 8003a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a6c:	482c      	ldr	r0, [pc, #176]	; (8003b20 <_vfiprintf_r+0x250>)
 8003a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a72:	2206      	movs	r2, #6
 8003a74:	f7fc fbac 	bl	80001d0 <memchr>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d03f      	beq.n	8003afc <_vfiprintf_r+0x22c>
 8003a7c:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <_vfiprintf_r+0x254>)
 8003a7e:	bb1b      	cbnz	r3, 8003ac8 <_vfiprintf_r+0x1f8>
 8003a80:	9b03      	ldr	r3, [sp, #12]
 8003a82:	3307      	adds	r3, #7
 8003a84:	f023 0307 	bic.w	r3, r3, #7
 8003a88:	3308      	adds	r3, #8
 8003a8a:	9303      	str	r3, [sp, #12]
 8003a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a8e:	443b      	add	r3, r7
 8003a90:	9309      	str	r3, [sp, #36]	; 0x24
 8003a92:	e767      	b.n	8003964 <_vfiprintf_r+0x94>
 8003a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a98:	460c      	mov	r4, r1
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	e7a5      	b.n	80039ea <_vfiprintf_r+0x11a>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	3401      	adds	r4, #1
 8003aa2:	9305      	str	r3, [sp, #20]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f04f 0c0a 	mov.w	ip, #10
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ab0:	3a30      	subs	r2, #48	; 0x30
 8003ab2:	2a09      	cmp	r2, #9
 8003ab4:	d903      	bls.n	8003abe <_vfiprintf_r+0x1ee>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0c5      	beq.n	8003a46 <_vfiprintf_r+0x176>
 8003aba:	9105      	str	r1, [sp, #20]
 8003abc:	e7c3      	b.n	8003a46 <_vfiprintf_r+0x176>
 8003abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e7f0      	b.n	8003aaa <_vfiprintf_r+0x1da>
 8003ac8:	ab03      	add	r3, sp, #12
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	462a      	mov	r2, r5
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <_vfiprintf_r+0x258>)
 8003ad0:	a904      	add	r1, sp, #16
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f3af 8000 	nop.w
 8003ad8:	4607      	mov	r7, r0
 8003ada:	1c78      	adds	r0, r7, #1
 8003adc:	d1d6      	bne.n	8003a8c <_vfiprintf_r+0x1bc>
 8003ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ae0:	07d9      	lsls	r1, r3, #31
 8003ae2:	d405      	bmi.n	8003af0 <_vfiprintf_r+0x220>
 8003ae4:	89ab      	ldrh	r3, [r5, #12]
 8003ae6:	059a      	lsls	r2, r3, #22
 8003ae8:	d402      	bmi.n	8003af0 <_vfiprintf_r+0x220>
 8003aea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003aec:	f7ff fd7f 	bl	80035ee <__retarget_lock_release_recursive>
 8003af0:	89ab      	ldrh	r3, [r5, #12]
 8003af2:	065b      	lsls	r3, r3, #25
 8003af4:	f53f af12 	bmi.w	800391c <_vfiprintf_r+0x4c>
 8003af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003afa:	e711      	b.n	8003920 <_vfiprintf_r+0x50>
 8003afc:	ab03      	add	r3, sp, #12
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	462a      	mov	r2, r5
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <_vfiprintf_r+0x258>)
 8003b04:	a904      	add	r1, sp, #16
 8003b06:	4630      	mov	r0, r6
 8003b08:	f000 f880 	bl	8003c0c <_printf_i>
 8003b0c:	e7e4      	b.n	8003ad8 <_vfiprintf_r+0x208>
 8003b0e:	bf00      	nop
 8003b10:	08004094 	.word	0x08004094
 8003b14:	080040b4 	.word	0x080040b4
 8003b18:	08004074 	.word	0x08004074
 8003b1c:	080040d4 	.word	0x080040d4
 8003b20:	080040de 	.word	0x080040de
 8003b24:	00000000 	.word	0x00000000
 8003b28:	080038ab 	.word	0x080038ab
 8003b2c:	080040da 	.word	0x080040da

08003b30 <_printf_common>:
 8003b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b34:	4616      	mov	r6, r2
 8003b36:	4699      	mov	r9, r3
 8003b38:	688a      	ldr	r2, [r1, #8]
 8003b3a:	690b      	ldr	r3, [r1, #16]
 8003b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b40:	4293      	cmp	r3, r2
 8003b42:	bfb8      	it	lt
 8003b44:	4613      	movlt	r3, r2
 8003b46:	6033      	str	r3, [r6, #0]
 8003b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b4c:	4607      	mov	r7, r0
 8003b4e:	460c      	mov	r4, r1
 8003b50:	b10a      	cbz	r2, 8003b56 <_printf_common+0x26>
 8003b52:	3301      	adds	r3, #1
 8003b54:	6033      	str	r3, [r6, #0]
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	0699      	lsls	r1, r3, #26
 8003b5a:	bf42      	ittt	mi
 8003b5c:	6833      	ldrmi	r3, [r6, #0]
 8003b5e:	3302      	addmi	r3, #2
 8003b60:	6033      	strmi	r3, [r6, #0]
 8003b62:	6825      	ldr	r5, [r4, #0]
 8003b64:	f015 0506 	ands.w	r5, r5, #6
 8003b68:	d106      	bne.n	8003b78 <_printf_common+0x48>
 8003b6a:	f104 0a19 	add.w	sl, r4, #25
 8003b6e:	68e3      	ldr	r3, [r4, #12]
 8003b70:	6832      	ldr	r2, [r6, #0]
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	42ab      	cmp	r3, r5
 8003b76:	dc26      	bgt.n	8003bc6 <_printf_common+0x96>
 8003b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b7c:	1e13      	subs	r3, r2, #0
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	bf18      	it	ne
 8003b82:	2301      	movne	r3, #1
 8003b84:	0692      	lsls	r2, r2, #26
 8003b86:	d42b      	bmi.n	8003be0 <_printf_common+0xb0>
 8003b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b8c:	4649      	mov	r1, r9
 8003b8e:	4638      	mov	r0, r7
 8003b90:	47c0      	blx	r8
 8003b92:	3001      	adds	r0, #1
 8003b94:	d01e      	beq.n	8003bd4 <_printf_common+0xa4>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	68e5      	ldr	r5, [r4, #12]
 8003b9a:	6832      	ldr	r2, [r6, #0]
 8003b9c:	f003 0306 	and.w	r3, r3, #6
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	bf08      	it	eq
 8003ba4:	1aad      	subeq	r5, r5, r2
 8003ba6:	68a3      	ldr	r3, [r4, #8]
 8003ba8:	6922      	ldr	r2, [r4, #16]
 8003baa:	bf0c      	ite	eq
 8003bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bb0:	2500      	movne	r5, #0
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	bfc4      	itt	gt
 8003bb6:	1a9b      	subgt	r3, r3, r2
 8003bb8:	18ed      	addgt	r5, r5, r3
 8003bba:	2600      	movs	r6, #0
 8003bbc:	341a      	adds	r4, #26
 8003bbe:	42b5      	cmp	r5, r6
 8003bc0:	d11a      	bne.n	8003bf8 <_printf_common+0xc8>
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e008      	b.n	8003bd8 <_printf_common+0xa8>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	4652      	mov	r2, sl
 8003bca:	4649      	mov	r1, r9
 8003bcc:	4638      	mov	r0, r7
 8003bce:	47c0      	blx	r8
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	d103      	bne.n	8003bdc <_printf_common+0xac>
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bdc:	3501      	adds	r5, #1
 8003bde:	e7c6      	b.n	8003b6e <_printf_common+0x3e>
 8003be0:	18e1      	adds	r1, r4, r3
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	2030      	movs	r0, #48	; 0x30
 8003be6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bea:	4422      	add	r2, r4
 8003bec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	e7c7      	b.n	8003b88 <_printf_common+0x58>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	4638      	mov	r0, r7
 8003c00:	47c0      	blx	r8
 8003c02:	3001      	adds	r0, #1
 8003c04:	d0e6      	beq.n	8003bd4 <_printf_common+0xa4>
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7d9      	b.n	8003bbe <_printf_common+0x8e>
	...

08003c0c <_printf_i>:
 8003c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	7e0f      	ldrb	r7, [r1, #24]
 8003c12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c14:	2f78      	cmp	r7, #120	; 0x78
 8003c16:	4691      	mov	r9, r2
 8003c18:	4680      	mov	r8, r0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	469a      	mov	sl, r3
 8003c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c22:	d807      	bhi.n	8003c34 <_printf_i+0x28>
 8003c24:	2f62      	cmp	r7, #98	; 0x62
 8003c26:	d80a      	bhi.n	8003c3e <_printf_i+0x32>
 8003c28:	2f00      	cmp	r7, #0
 8003c2a:	f000 80d8 	beq.w	8003dde <_printf_i+0x1d2>
 8003c2e:	2f58      	cmp	r7, #88	; 0x58
 8003c30:	f000 80a3 	beq.w	8003d7a <_printf_i+0x16e>
 8003c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c3c:	e03a      	b.n	8003cb4 <_printf_i+0xa8>
 8003c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c42:	2b15      	cmp	r3, #21
 8003c44:	d8f6      	bhi.n	8003c34 <_printf_i+0x28>
 8003c46:	a101      	add	r1, pc, #4	; (adr r1, 8003c4c <_printf_i+0x40>)
 8003c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c4c:	08003ca5 	.word	0x08003ca5
 8003c50:	08003cb9 	.word	0x08003cb9
 8003c54:	08003c35 	.word	0x08003c35
 8003c58:	08003c35 	.word	0x08003c35
 8003c5c:	08003c35 	.word	0x08003c35
 8003c60:	08003c35 	.word	0x08003c35
 8003c64:	08003cb9 	.word	0x08003cb9
 8003c68:	08003c35 	.word	0x08003c35
 8003c6c:	08003c35 	.word	0x08003c35
 8003c70:	08003c35 	.word	0x08003c35
 8003c74:	08003c35 	.word	0x08003c35
 8003c78:	08003dc5 	.word	0x08003dc5
 8003c7c:	08003ce9 	.word	0x08003ce9
 8003c80:	08003da7 	.word	0x08003da7
 8003c84:	08003c35 	.word	0x08003c35
 8003c88:	08003c35 	.word	0x08003c35
 8003c8c:	08003de7 	.word	0x08003de7
 8003c90:	08003c35 	.word	0x08003c35
 8003c94:	08003ce9 	.word	0x08003ce9
 8003c98:	08003c35 	.word	0x08003c35
 8003c9c:	08003c35 	.word	0x08003c35
 8003ca0:	08003daf 	.word	0x08003daf
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	1d1a      	adds	r2, r3, #4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	602a      	str	r2, [r5, #0]
 8003cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0a3      	b.n	8003e00 <_printf_i+0x1f4>
 8003cb8:	6820      	ldr	r0, [r4, #0]
 8003cba:	6829      	ldr	r1, [r5, #0]
 8003cbc:	0606      	lsls	r6, r0, #24
 8003cbe:	f101 0304 	add.w	r3, r1, #4
 8003cc2:	d50a      	bpl.n	8003cda <_printf_i+0xce>
 8003cc4:	680e      	ldr	r6, [r1, #0]
 8003cc6:	602b      	str	r3, [r5, #0]
 8003cc8:	2e00      	cmp	r6, #0
 8003cca:	da03      	bge.n	8003cd4 <_printf_i+0xc8>
 8003ccc:	232d      	movs	r3, #45	; 0x2d
 8003cce:	4276      	negs	r6, r6
 8003cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cd4:	485e      	ldr	r0, [pc, #376]	; (8003e50 <_printf_i+0x244>)
 8003cd6:	230a      	movs	r3, #10
 8003cd8:	e019      	b.n	8003d0e <_printf_i+0x102>
 8003cda:	680e      	ldr	r6, [r1, #0]
 8003cdc:	602b      	str	r3, [r5, #0]
 8003cde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ce2:	bf18      	it	ne
 8003ce4:	b236      	sxthne	r6, r6
 8003ce6:	e7ef      	b.n	8003cc8 <_printf_i+0xbc>
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	6820      	ldr	r0, [r4, #0]
 8003cec:	1d19      	adds	r1, r3, #4
 8003cee:	6029      	str	r1, [r5, #0]
 8003cf0:	0601      	lsls	r1, r0, #24
 8003cf2:	d501      	bpl.n	8003cf8 <_printf_i+0xec>
 8003cf4:	681e      	ldr	r6, [r3, #0]
 8003cf6:	e002      	b.n	8003cfe <_printf_i+0xf2>
 8003cf8:	0646      	lsls	r6, r0, #25
 8003cfa:	d5fb      	bpl.n	8003cf4 <_printf_i+0xe8>
 8003cfc:	881e      	ldrh	r6, [r3, #0]
 8003cfe:	4854      	ldr	r0, [pc, #336]	; (8003e50 <_printf_i+0x244>)
 8003d00:	2f6f      	cmp	r7, #111	; 0x6f
 8003d02:	bf0c      	ite	eq
 8003d04:	2308      	moveq	r3, #8
 8003d06:	230a      	movne	r3, #10
 8003d08:	2100      	movs	r1, #0
 8003d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d0e:	6865      	ldr	r5, [r4, #4]
 8003d10:	60a5      	str	r5, [r4, #8]
 8003d12:	2d00      	cmp	r5, #0
 8003d14:	bfa2      	ittt	ge
 8003d16:	6821      	ldrge	r1, [r4, #0]
 8003d18:	f021 0104 	bicge.w	r1, r1, #4
 8003d1c:	6021      	strge	r1, [r4, #0]
 8003d1e:	b90e      	cbnz	r6, 8003d24 <_printf_i+0x118>
 8003d20:	2d00      	cmp	r5, #0
 8003d22:	d04d      	beq.n	8003dc0 <_printf_i+0x1b4>
 8003d24:	4615      	mov	r5, r2
 8003d26:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d2a:	fb03 6711 	mls	r7, r3, r1, r6
 8003d2e:	5dc7      	ldrb	r7, [r0, r7]
 8003d30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d34:	4637      	mov	r7, r6
 8003d36:	42bb      	cmp	r3, r7
 8003d38:	460e      	mov	r6, r1
 8003d3a:	d9f4      	bls.n	8003d26 <_printf_i+0x11a>
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d10b      	bne.n	8003d58 <_printf_i+0x14c>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	07de      	lsls	r6, r3, #31
 8003d44:	d508      	bpl.n	8003d58 <_printf_i+0x14c>
 8003d46:	6923      	ldr	r3, [r4, #16]
 8003d48:	6861      	ldr	r1, [r4, #4]
 8003d4a:	4299      	cmp	r1, r3
 8003d4c:	bfde      	ittt	le
 8003d4e:	2330      	movle	r3, #48	; 0x30
 8003d50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d58:	1b52      	subs	r2, r2, r5
 8003d5a:	6122      	str	r2, [r4, #16]
 8003d5c:	f8cd a000 	str.w	sl, [sp]
 8003d60:	464b      	mov	r3, r9
 8003d62:	aa03      	add	r2, sp, #12
 8003d64:	4621      	mov	r1, r4
 8003d66:	4640      	mov	r0, r8
 8003d68:	f7ff fee2 	bl	8003b30 <_printf_common>
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d14c      	bne.n	8003e0a <_printf_i+0x1fe>
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295
 8003d74:	b004      	add	sp, #16
 8003d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7a:	4835      	ldr	r0, [pc, #212]	; (8003e50 <_printf_i+0x244>)
 8003d7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d80:	6829      	ldr	r1, [r5, #0]
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d88:	6029      	str	r1, [r5, #0]
 8003d8a:	061d      	lsls	r5, r3, #24
 8003d8c:	d514      	bpl.n	8003db8 <_printf_i+0x1ac>
 8003d8e:	07df      	lsls	r7, r3, #31
 8003d90:	bf44      	itt	mi
 8003d92:	f043 0320 	orrmi.w	r3, r3, #32
 8003d96:	6023      	strmi	r3, [r4, #0]
 8003d98:	b91e      	cbnz	r6, 8003da2 <_printf_i+0x196>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	f023 0320 	bic.w	r3, r3, #32
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	2310      	movs	r3, #16
 8003da4:	e7b0      	b.n	8003d08 <_printf_i+0xfc>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	f043 0320 	orr.w	r3, r3, #32
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	2378      	movs	r3, #120	; 0x78
 8003db0:	4828      	ldr	r0, [pc, #160]	; (8003e54 <_printf_i+0x248>)
 8003db2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003db6:	e7e3      	b.n	8003d80 <_printf_i+0x174>
 8003db8:	0659      	lsls	r1, r3, #25
 8003dba:	bf48      	it	mi
 8003dbc:	b2b6      	uxthmi	r6, r6
 8003dbe:	e7e6      	b.n	8003d8e <_printf_i+0x182>
 8003dc0:	4615      	mov	r5, r2
 8003dc2:	e7bb      	b.n	8003d3c <_printf_i+0x130>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	6826      	ldr	r6, [r4, #0]
 8003dc8:	6961      	ldr	r1, [r4, #20]
 8003dca:	1d18      	adds	r0, r3, #4
 8003dcc:	6028      	str	r0, [r5, #0]
 8003dce:	0635      	lsls	r5, r6, #24
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	d501      	bpl.n	8003dd8 <_printf_i+0x1cc>
 8003dd4:	6019      	str	r1, [r3, #0]
 8003dd6:	e002      	b.n	8003dde <_printf_i+0x1d2>
 8003dd8:	0670      	lsls	r0, r6, #25
 8003dda:	d5fb      	bpl.n	8003dd4 <_printf_i+0x1c8>
 8003ddc:	8019      	strh	r1, [r3, #0]
 8003dde:	2300      	movs	r3, #0
 8003de0:	6123      	str	r3, [r4, #16]
 8003de2:	4615      	mov	r5, r2
 8003de4:	e7ba      	b.n	8003d5c <_printf_i+0x150>
 8003de6:	682b      	ldr	r3, [r5, #0]
 8003de8:	1d1a      	adds	r2, r3, #4
 8003dea:	602a      	str	r2, [r5, #0]
 8003dec:	681d      	ldr	r5, [r3, #0]
 8003dee:	6862      	ldr	r2, [r4, #4]
 8003df0:	2100      	movs	r1, #0
 8003df2:	4628      	mov	r0, r5
 8003df4:	f7fc f9ec 	bl	80001d0 <memchr>
 8003df8:	b108      	cbz	r0, 8003dfe <_printf_i+0x1f2>
 8003dfa:	1b40      	subs	r0, r0, r5
 8003dfc:	6060      	str	r0, [r4, #4]
 8003dfe:	6863      	ldr	r3, [r4, #4]
 8003e00:	6123      	str	r3, [r4, #16]
 8003e02:	2300      	movs	r3, #0
 8003e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e08:	e7a8      	b.n	8003d5c <_printf_i+0x150>
 8003e0a:	6923      	ldr	r3, [r4, #16]
 8003e0c:	462a      	mov	r2, r5
 8003e0e:	4649      	mov	r1, r9
 8003e10:	4640      	mov	r0, r8
 8003e12:	47d0      	blx	sl
 8003e14:	3001      	adds	r0, #1
 8003e16:	d0ab      	beq.n	8003d70 <_printf_i+0x164>
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	079b      	lsls	r3, r3, #30
 8003e1c:	d413      	bmi.n	8003e46 <_printf_i+0x23a>
 8003e1e:	68e0      	ldr	r0, [r4, #12]
 8003e20:	9b03      	ldr	r3, [sp, #12]
 8003e22:	4298      	cmp	r0, r3
 8003e24:	bfb8      	it	lt
 8003e26:	4618      	movlt	r0, r3
 8003e28:	e7a4      	b.n	8003d74 <_printf_i+0x168>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4632      	mov	r2, r6
 8003e2e:	4649      	mov	r1, r9
 8003e30:	4640      	mov	r0, r8
 8003e32:	47d0      	blx	sl
 8003e34:	3001      	adds	r0, #1
 8003e36:	d09b      	beq.n	8003d70 <_printf_i+0x164>
 8003e38:	3501      	adds	r5, #1
 8003e3a:	68e3      	ldr	r3, [r4, #12]
 8003e3c:	9903      	ldr	r1, [sp, #12]
 8003e3e:	1a5b      	subs	r3, r3, r1
 8003e40:	42ab      	cmp	r3, r5
 8003e42:	dcf2      	bgt.n	8003e2a <_printf_i+0x21e>
 8003e44:	e7eb      	b.n	8003e1e <_printf_i+0x212>
 8003e46:	2500      	movs	r5, #0
 8003e48:	f104 0619 	add.w	r6, r4, #25
 8003e4c:	e7f5      	b.n	8003e3a <_printf_i+0x22e>
 8003e4e:	bf00      	nop
 8003e50:	080040e5 	.word	0x080040e5
 8003e54:	080040f6 	.word	0x080040f6

08003e58 <_sbrk_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4d06      	ldr	r5, [pc, #24]	; (8003e74 <_sbrk_r+0x1c>)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	4604      	mov	r4, r0
 8003e60:	4608      	mov	r0, r1
 8003e62:	602b      	str	r3, [r5, #0]
 8003e64:	f7fc fc8a 	bl	800077c <_sbrk>
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	d102      	bne.n	8003e72 <_sbrk_r+0x1a>
 8003e6c:	682b      	ldr	r3, [r5, #0]
 8003e6e:	b103      	cbz	r3, 8003e72 <_sbrk_r+0x1a>
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	bd38      	pop	{r3, r4, r5, pc}
 8003e74:	200001a8 	.word	0x200001a8

08003e78 <__sread>:
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e80:	f000 f8a0 	bl	8003fc4 <_read_r>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	bfab      	itete	ge
 8003e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e8c:	181b      	addge	r3, r3, r0
 8003e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e92:	bfac      	ite	ge
 8003e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e96:	81a3      	strhlt	r3, [r4, #12]
 8003e98:	bd10      	pop	{r4, pc}

08003e9a <__swrite>:
 8003e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9e:	461f      	mov	r7, r3
 8003ea0:	898b      	ldrh	r3, [r1, #12]
 8003ea2:	05db      	lsls	r3, r3, #23
 8003ea4:	4605      	mov	r5, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	4616      	mov	r6, r2
 8003eaa:	d505      	bpl.n	8003eb8 <__swrite+0x1e>
 8003eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f000 f868 	bl	8003f88 <_lseek_r>
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec2:	81a3      	strh	r3, [r4, #12]
 8003ec4:	4632      	mov	r2, r6
 8003ec6:	463b      	mov	r3, r7
 8003ec8:	4628      	mov	r0, r5
 8003eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ece:	f000 b817 	b.w	8003f00 <_write_r>

08003ed2 <__sseek>:
 8003ed2:	b510      	push	{r4, lr}
 8003ed4:	460c      	mov	r4, r1
 8003ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eda:	f000 f855 	bl	8003f88 <_lseek_r>
 8003ede:	1c43      	adds	r3, r0, #1
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	bf15      	itete	ne
 8003ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eee:	81a3      	strheq	r3, [r4, #12]
 8003ef0:	bf18      	it	ne
 8003ef2:	81a3      	strhne	r3, [r4, #12]
 8003ef4:	bd10      	pop	{r4, pc}

08003ef6 <__sclose>:
 8003ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003efa:	f000 b813 	b.w	8003f24 <_close_r>
	...

08003f00 <_write_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	4d07      	ldr	r5, [pc, #28]	; (8003f20 <_write_r+0x20>)
 8003f04:	4604      	mov	r4, r0
 8003f06:	4608      	mov	r0, r1
 8003f08:	4611      	mov	r1, r2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	602a      	str	r2, [r5, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f7fc fbe3 	bl	80006da <_write>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d102      	bne.n	8003f1e <_write_r+0x1e>
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	b103      	cbz	r3, 8003f1e <_write_r+0x1e>
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	200001a8 	.word	0x200001a8

08003f24 <_close_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4d06      	ldr	r5, [pc, #24]	; (8003f40 <_close_r+0x1c>)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	602b      	str	r3, [r5, #0]
 8003f30:	f7fc fbef 	bl	8000712 <_close>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d102      	bne.n	8003f3e <_close_r+0x1a>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	b103      	cbz	r3, 8003f3e <_close_r+0x1a>
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}
 8003f40:	200001a8 	.word	0x200001a8

08003f44 <_fstat_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4d07      	ldr	r5, [pc, #28]	; (8003f64 <_fstat_r+0x20>)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	602b      	str	r3, [r5, #0]
 8003f52:	f7fc fbea 	bl	800072a <_fstat>
 8003f56:	1c43      	adds	r3, r0, #1
 8003f58:	d102      	bne.n	8003f60 <_fstat_r+0x1c>
 8003f5a:	682b      	ldr	r3, [r5, #0]
 8003f5c:	b103      	cbz	r3, 8003f60 <_fstat_r+0x1c>
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	bd38      	pop	{r3, r4, r5, pc}
 8003f62:	bf00      	nop
 8003f64:	200001a8 	.word	0x200001a8

08003f68 <_isatty_r>:
 8003f68:	b538      	push	{r3, r4, r5, lr}
 8003f6a:	4d06      	ldr	r5, [pc, #24]	; (8003f84 <_isatty_r+0x1c>)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	4604      	mov	r4, r0
 8003f70:	4608      	mov	r0, r1
 8003f72:	602b      	str	r3, [r5, #0]
 8003f74:	f7fc fbe9 	bl	800074a <_isatty>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_isatty_r+0x1a>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_isatty_r+0x1a>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	200001a8 	.word	0x200001a8

08003f88 <_lseek_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4d07      	ldr	r5, [pc, #28]	; (8003fa8 <_lseek_r+0x20>)
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	4608      	mov	r0, r1
 8003f90:	4611      	mov	r1, r2
 8003f92:	2200      	movs	r2, #0
 8003f94:	602a      	str	r2, [r5, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	f7fc fbe2 	bl	8000760 <_lseek>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_lseek_r+0x1e>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_lseek_r+0x1e>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	200001a8 	.word	0x200001a8

08003fac <__malloc_lock>:
 8003fac:	4801      	ldr	r0, [pc, #4]	; (8003fb4 <__malloc_lock+0x8>)
 8003fae:	f7ff bb1d 	b.w	80035ec <__retarget_lock_acquire_recursive>
 8003fb2:	bf00      	nop
 8003fb4:	2000019c 	.word	0x2000019c

08003fb8 <__malloc_unlock>:
 8003fb8:	4801      	ldr	r0, [pc, #4]	; (8003fc0 <__malloc_unlock+0x8>)
 8003fba:	f7ff bb18 	b.w	80035ee <__retarget_lock_release_recursive>
 8003fbe:	bf00      	nop
 8003fc0:	2000019c 	.word	0x2000019c

08003fc4 <_read_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4d07      	ldr	r5, [pc, #28]	; (8003fe4 <_read_r+0x20>)
 8003fc8:	4604      	mov	r4, r0
 8003fca:	4608      	mov	r0, r1
 8003fcc:	4611      	mov	r1, r2
 8003fce:	2200      	movs	r2, #0
 8003fd0:	602a      	str	r2, [r5, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f7fc fb64 	bl	80006a0 <_read>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	d102      	bne.n	8003fe2 <_read_r+0x1e>
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	b103      	cbz	r3, 8003fe2 <_read_r+0x1e>
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	bd38      	pop	{r3, r4, r5, pc}
 8003fe4:	200001a8 	.word	0x200001a8

08003fe8 <_init>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	bf00      	nop
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr

08003ff4 <_fini>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr
